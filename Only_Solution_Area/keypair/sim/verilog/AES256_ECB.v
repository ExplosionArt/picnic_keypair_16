// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES256_ECB (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_address0,
        key_ce0,
        key_q0,
        ctr_address0,
        ctr_ce0,
        ctr_q0,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        buffer_offset
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
output  [3:0] ctr_address0;
output   ctr_ce0;
input  [7:0] ctr_q0;
output  [5:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [7:0] buffer_r_d0;
input  [5:0] buffer_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ctr_ce0;
reg buffer_r_ce0;
reg buffer_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    grp_KeyExpansion_fu_143_ap_ready;
wire    grp_KeyExpansion_fu_143_ap_done;
wire   [2:0] i_fu_169_p2;
reg   [2:0] i_reg_330;
wire    ap_CS_fsm_state3;
wire   [3:0] shl_ln_fu_179_p3;
reg   [3:0] shl_ln_reg_335;
wire   [0:0] icmp_ln164_fu_163_p2;
wire   [5:0] zext_ln166_fu_195_p1;
reg   [5:0] zext_ln166_reg_340;
wire   [2:0] j_fu_205_p2;
reg   [2:0] j_reg_348;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln166_fu_199_p2;
wire   [5:0] add_ln168_2_fu_229_p2;
reg   [5:0] add_ln168_2_reg_358;
wire   [2:0] i_11_fu_244_p2;
reg   [2:0] i_11_reg_366;
wire    ap_CS_fsm_state7;
wire   [5:0] zext_ln195_fu_258_p1;
reg   [5:0] zext_ln195_reg_371;
wire   [0:0] icmp_ln191_fu_238_p2;
wire   [3:0] shl_ln3_fu_266_p3;
reg   [3:0] shl_ln3_reg_376;
wire   [2:0] j_9_fu_280_p2;
reg   [2:0] j_9_reg_384;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln193_fu_274_p2;
wire   [5:0] add_ln195_1_fu_313_p2;
reg   [5:0] add_ln195_1_reg_394;
reg   [7:0] ctx_RoundKey_address0;
reg    ctx_RoundKey_ce0;
reg    ctx_RoundKey_we0;
wire   [7:0] ctx_RoundKey_q0;
reg   [3:0] test_address0;
reg    test_ce0;
reg    test_we0;
reg   [7:0] test_d0;
wire   [7:0] test_q0;
reg    test_ce1;
reg    test_we1;
wire   [7:0] test_q1;
wire    grp_KeyExpansion_fu_143_ap_start;
wire    grp_KeyExpansion_fu_143_ap_idle;
wire   [7:0] grp_KeyExpansion_fu_143_RoundKey_address0;
wire    grp_KeyExpansion_fu_143_RoundKey_ce0;
wire    grp_KeyExpansion_fu_143_RoundKey_we0;
wire   [7:0] grp_KeyExpansion_fu_143_RoundKey_d0;
wire   [4:0] grp_KeyExpansion_fu_143_Key_address0;
wire    grp_KeyExpansion_fu_143_Key_ce0;
wire    grp_Cipher_fu_155_ap_start;
wire    grp_Cipher_fu_155_ap_done;
wire    grp_Cipher_fu_155_ap_idle;
wire    grp_Cipher_fu_155_ap_ready;
wire   [3:0] grp_Cipher_fu_155_state_address0;
wire    grp_Cipher_fu_155_state_ce0;
wire    grp_Cipher_fu_155_state_we0;
wire   [7:0] grp_Cipher_fu_155_state_d0;
wire   [3:0] grp_Cipher_fu_155_state_address1;
wire    grp_Cipher_fu_155_state_ce1;
wire    grp_Cipher_fu_155_state_we1;
wire   [7:0] grp_Cipher_fu_155_state_d1;
wire   [7:0] grp_Cipher_fu_155_RoundKey_address0;
wire    grp_Cipher_fu_155_RoundKey_ce0;
reg   [2:0] i_0_reg_99;
reg   [2:0] j_0_reg_110;
wire    ap_CS_fsm_state5;
reg   [2:0] i_1_reg_121;
wire    ap_CS_fsm_state6;
reg   [2:0] j_1_reg_132;
wire    ap_CS_fsm_state9;
reg    grp_KeyExpansion_fu_143_ap_start_reg;
reg    grp_Cipher_fu_155_ap_start_reg;
wire   [63:0] zext_ln168_4_fu_220_p1;
wire   [63:0] zext_ln168_6_fu_234_p1;
wire   [63:0] zext_ln195_8_fu_295_p1;
wire   [63:0] zext_ln195_6_fu_318_p1;
wire   [1:0] trunc_ln168_fu_175_p1;
wire   [4:0] tmp_s_fu_187_p3;
wire   [3:0] zext_ln168_fu_211_p1;
wire   [3:0] add_ln168_fu_215_p2;
wire   [5:0] zext_ln168_5_fu_225_p1;
wire   [4:0] tmp_4_fu_250_p3;
wire   [1:0] trunc_ln195_fu_262_p1;
wire   [5:0] zext_ln195_7_fu_286_p1;
wire   [5:0] add_ln195_2_fu_290_p2;
wire   [3:0] zext_ln195_4_fu_300_p1;
wire   [3:0] add_ln195_fu_304_p2;
wire   [5:0] zext_ln195_5_fu_309_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_KeyExpansion_fu_143_ap_start_reg = 1'b0;
#0 grp_Cipher_fu_155_ap_start_reg = 1'b0;
end

AES256_ECB_ctx_RodEe #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
ctx_RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ctx_RoundKey_address0),
    .ce0(ctx_RoundKey_ce0),
    .we0(ctx_RoundKey_we0),
    .d0(grp_KeyExpansion_fu_143_RoundKey_d0),
    .q0(ctx_RoundKey_q0)
);

AES256_ECB_1_test #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
test_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(test_address0),
    .ce0(test_ce0),
    .we0(test_we0),
    .d0(test_d0),
    .q0(test_q0),
    .address1(grp_Cipher_fu_155_state_address1),
    .ce1(test_ce1),
    .we1(test_we1),
    .d1(grp_Cipher_fu_155_state_d1),
    .q1(test_q1)
);

KeyExpansion grp_KeyExpansion_fu_143(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_143_ap_start),
    .ap_done(grp_KeyExpansion_fu_143_ap_done),
    .ap_idle(grp_KeyExpansion_fu_143_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_143_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_143_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_143_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_143_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_143_RoundKey_d0),
    .RoundKey_q0(ctx_RoundKey_q0),
    .Key_address0(grp_KeyExpansion_fu_143_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_143_Key_ce0),
    .Key_q0(key_q0)
);

Cipher grp_Cipher_fu_155(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Cipher_fu_155_ap_start),
    .ap_done(grp_Cipher_fu_155_ap_done),
    .ap_idle(grp_Cipher_fu_155_ap_idle),
    .ap_ready(grp_Cipher_fu_155_ap_ready),
    .state_address0(grp_Cipher_fu_155_state_address0),
    .state_ce0(grp_Cipher_fu_155_state_ce0),
    .state_we0(grp_Cipher_fu_155_state_we0),
    .state_d0(grp_Cipher_fu_155_state_d0),
    .state_q0(test_q0),
    .state_address1(grp_Cipher_fu_155_state_address1),
    .state_ce1(grp_Cipher_fu_155_state_ce1),
    .state_we1(grp_Cipher_fu_155_state_we1),
    .state_d1(grp_Cipher_fu_155_state_d1),
    .state_q1(test_q1),
    .RoundKey_address0(grp_Cipher_fu_155_RoundKey_address0),
    .RoundKey_ce0(grp_Cipher_fu_155_RoundKey_ce0),
    .RoundKey_q0(ctx_RoundKey_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Cipher_fu_155_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln164_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_Cipher_fu_155_ap_start_reg <= 1'b1;
        end else if ((grp_Cipher_fu_155_ap_ready == 1'b1)) begin
            grp_Cipher_fu_155_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeyExpansion_fu_143_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_KeyExpansion_fu_143_ap_start_reg <= 1'b1;
        end else if ((grp_KeyExpansion_fu_143_ap_ready == 1'b1)) begin
            grp_KeyExpansion_fu_143_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_99 <= i_reg_330;
    end else if (((grp_KeyExpansion_fu_143_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_99 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln193_fu_274_p2 == 1'd1))) begin
        i_1_reg_121 <= i_11_reg_366;
    end else if (((1'b1 == ap_CS_fsm_state6) & (grp_Cipher_fu_155_ap_done == 1'b1))) begin
        i_1_reg_121 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_110 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_reg_110 <= j_reg_348;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_1_reg_132 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_1_reg_132 <= j_9_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln168_2_reg_358 <= add_ln168_2_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add_ln195_1_reg_394 <= add_ln195_1_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_11_reg_366 <= i_11_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_330 <= i_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_9_reg_384 <= j_9_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_348 <= j_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln191_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        shl_ln3_reg_376[3 : 2] <= shl_ln3_fu_266_p3[3 : 2];
        zext_ln195_reg_371[4 : 2] <= zext_ln195_fu_258_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_335[3 : 2] <= shl_ln_fu_179_p3[3 : 2];
        zext_ln166_reg_340[4 : 2] <= zext_ln166_fu_195_p1[4 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln191_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln191_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctr_ce0 = 1'b1;
    end else begin
        ctr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_RoundKey_address0 = grp_Cipher_fu_155_RoundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_address0 = grp_KeyExpansion_fu_143_RoundKey_address0;
    end else begin
        ctx_RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_RoundKey_ce0 = grp_Cipher_fu_155_RoundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_ce0 = grp_KeyExpansion_fu_143_RoundKey_ce0;
    end else begin
        ctx_RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_we0 = grp_KeyExpansion_fu_143_RoundKey_we0;
    end else begin
        ctx_RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        test_address0 = zext_ln195_8_fu_295_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        test_address0 = zext_ln168_6_fu_234_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        test_address0 = grp_Cipher_fu_155_state_address0;
    end else begin
        test_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8))) begin
        test_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        test_ce0 = grp_Cipher_fu_155_state_ce0;
    end else begin
        test_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        test_ce1 = grp_Cipher_fu_155_state_ce1;
    end else begin
        test_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        test_d0 = ctr_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        test_d0 = grp_Cipher_fu_155_state_d0;
    end else begin
        test_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        test_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        test_we0 = grp_Cipher_fu_155_state_we0;
    end else begin
        test_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        test_we1 = grp_Cipher_fu_155_state_we1;
    end else begin
        test_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_KeyExpansion_fu_143_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln164_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln166_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_Cipher_fu_155_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln191_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln193_fu_274_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln168_2_fu_229_p2 = (zext_ln166_reg_340 + zext_ln168_5_fu_225_p1);

assign add_ln168_fu_215_p2 = (zext_ln168_fu_211_p1 + shl_ln_reg_335);

assign add_ln195_1_fu_313_p2 = (buffer_offset + zext_ln195_5_fu_309_p1);

assign add_ln195_2_fu_290_p2 = (zext_ln195_reg_371 + zext_ln195_7_fu_286_p1);

assign add_ln195_fu_304_p2 = (zext_ln195_4_fu_300_p1 + shl_ln3_reg_376);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buffer_r_address0 = zext_ln195_6_fu_318_p1;

assign buffer_r_d0 = test_q0;

assign ctr_address0 = zext_ln168_4_fu_220_p1;

assign grp_Cipher_fu_155_ap_start = grp_Cipher_fu_155_ap_start_reg;

assign grp_KeyExpansion_fu_143_ap_start = grp_KeyExpansion_fu_143_ap_start_reg;

assign i_11_fu_244_p2 = (i_1_reg_121 + 3'd1);

assign i_fu_169_p2 = (i_0_reg_99 + 3'd1);

assign icmp_ln164_fu_163_p2 = ((i_0_reg_99 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln166_fu_199_p2 = ((j_0_reg_110 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_238_p2 = ((i_1_reg_121 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln193_fu_274_p2 = ((j_1_reg_132 == 3'd4) ? 1'b1 : 1'b0);

assign j_9_fu_280_p2 = (j_1_reg_132 + 3'd1);

assign j_fu_205_p2 = (j_0_reg_110 + 3'd1);

assign key_address0 = grp_KeyExpansion_fu_143_Key_address0;

assign key_ce0 = grp_KeyExpansion_fu_143_Key_ce0;

assign shl_ln3_fu_266_p3 = {{trunc_ln195_fu_262_p1}, {2'd0}};

assign shl_ln_fu_179_p3 = {{trunc_ln168_fu_175_p1}, {2'd0}};

assign tmp_4_fu_250_p3 = {{i_1_reg_121}, {2'd0}};

assign tmp_s_fu_187_p3 = {{i_0_reg_99}, {2'd0}};

assign trunc_ln168_fu_175_p1 = i_0_reg_99[1:0];

assign trunc_ln195_fu_262_p1 = i_1_reg_121[1:0];

assign zext_ln166_fu_195_p1 = tmp_s_fu_187_p3;

assign zext_ln168_4_fu_220_p1 = add_ln168_fu_215_p2;

assign zext_ln168_5_fu_225_p1 = j_0_reg_110;

assign zext_ln168_6_fu_234_p1 = add_ln168_2_reg_358;

assign zext_ln168_fu_211_p1 = j_0_reg_110;

assign zext_ln195_4_fu_300_p1 = j_1_reg_132;

assign zext_ln195_5_fu_309_p1 = add_ln195_fu_304_p2;

assign zext_ln195_6_fu_318_p1 = add_ln195_1_reg_394;

assign zext_ln195_7_fu_286_p1 = j_1_reg_132;

assign zext_ln195_8_fu_295_p1 = add_ln195_2_fu_290_p2;

assign zext_ln195_fu_258_p1 = tmp_4_fu_250_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_335[1:0] <= 2'b00;
    zext_ln166_reg_340[1:0] <= 2'b00;
    zext_ln166_reg_340[5] <= 1'b0;
    zext_ln195_reg_371[1:0] <= 2'b00;
    zext_ln195_reg_371[5] <= 1'b0;
    shl_ln3_reg_376[1:0] <= 2'b00;
end

endmodule //AES256_ECB
