-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity randombytes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_we0 : OUT STD_LOGIC;
    x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce0 : OUT STD_LOGIC;
    DRBG_ctx_V_we0 : OUT STD_LOGIC;
    DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
    DRBG_ctx_Key_we0 : OUT STD_LOGIC;
    DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of randombytes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal DRBG_ctx_V_addr_reg_430 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_284_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_297_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_fu_309_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_reg_446 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln270_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln270_reg_451 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln269_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_326_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_464 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal DRBG_ctx_V_addr_1_reg_472 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_1_fu_336_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal shl_ln_fu_355_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_485 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_fu_370_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_493 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln307_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln307_reg_498 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln306_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_511 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln308_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal block_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_ce0 : STD_LOGIC;
    signal block_we0 : STD_LOGIC;
    signal block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES256_ECB_fu_240_ap_start : STD_LOGIC;
    signal grp_AES256_ECB_fu_240_ap_done : STD_LOGIC;
    signal grp_AES256_ECB_fu_240_ap_idle : STD_LOGIC;
    signal grp_AES256_ECB_fu_240_ap_ready : STD_LOGIC;
    signal grp_AES256_ECB_fu_240_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AES256_ECB_fu_240_key_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_fu_240_ctr_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_fu_240_ctr_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_fu_240_buffer_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_AES256_ECB_fu_240_buffer_r_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_fu_240_buffer_r_we0 : STD_LOGIC;
    signal grp_AES256_ECB_fu_240_buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES256_ECB_1_fu_254_ap_start : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_254_ap_done : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_254_ap_idle : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_254_ap_ready : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_254_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AES256_ECB_1_fu_254_key_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_254_ctr_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_1_fu_254_ctr_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_254_buffer_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_1_fu_254_buffer_r_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_254_buffer_r_we0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_254_buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_170 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_0_reg_182 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_reg_193 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j1_0_reg_205 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln287_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_217 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_3_reg_228 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_AES256_ECB_fu_240_ap_start_reg : STD_LOGIC := '0';
    signal grp_AES256_ECB_1_fu_254_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln249_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln292_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln309_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln309_1_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln310_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln246_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln290_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_393_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component AES256_ECB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctr_ce0 : OUT STD_LOGIC;
        ctr_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_offset : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component AES256_ECB_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctr_ce0 : OUT STD_LOGIC;
        ctr_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component randombytes_block IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component randombytes_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    block_U : component randombytes_block
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_address0,
        ce0 => block_ce0,
        we0 => block_we0,
        d0 => grp_AES256_ECB_1_fu_254_buffer_r_d0,
        q0 => block_q0);

    temp_U : component randombytes_temp
    generic map (
        DataWidth => 8,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => grp_AES256_ECB_fu_240_buffer_r_d0,
        q0 => temp_q0);

    grp_AES256_ECB_fu_240 : component AES256_ECB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES256_ECB_fu_240_ap_start,
        ap_done => grp_AES256_ECB_fu_240_ap_done,
        ap_idle => grp_AES256_ECB_fu_240_ap_idle,
        ap_ready => grp_AES256_ECB_fu_240_ap_ready,
        key_address0 => grp_AES256_ECB_fu_240_key_address0,
        key_ce0 => grp_AES256_ECB_fu_240_key_ce0,
        key_q0 => DRBG_ctx_Key_q0,
        ctr_address0 => grp_AES256_ECB_fu_240_ctr_address0,
        ctr_ce0 => grp_AES256_ECB_fu_240_ctr_ce0,
        ctr_q0 => DRBG_ctx_V_q0,
        buffer_r_address0 => grp_AES256_ECB_fu_240_buffer_r_address0,
        buffer_r_ce0 => grp_AES256_ECB_fu_240_buffer_r_ce0,
        buffer_r_we0 => grp_AES256_ECB_fu_240_buffer_r_we0,
        buffer_r_d0 => grp_AES256_ECB_fu_240_buffer_r_d0,
        buffer_offset => shl_ln_reg_485);

    grp_AES256_ECB_1_fu_254 : component AES256_ECB_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES256_ECB_1_fu_254_ap_start,
        ap_done => grp_AES256_ECB_1_fu_254_ap_done,
        ap_idle => grp_AES256_ECB_1_fu_254_ap_idle,
        ap_ready => grp_AES256_ECB_1_fu_254_ap_ready,
        key_address0 => grp_AES256_ECB_1_fu_254_key_address0,
        key_ce0 => grp_AES256_ECB_1_fu_254_key_ce0,
        key_q0 => DRBG_ctx_Key_q0,
        ctr_address0 => grp_AES256_ECB_1_fu_254_ctr_address0,
        ctr_ce0 => grp_AES256_ECB_1_fu_254_ctr_ce0,
        ctr_q0 => DRBG_ctx_V_q0,
        buffer_r_address0 => grp_AES256_ECB_1_fu_254_buffer_r_address0,
        buffer_r_ce0 => grp_AES256_ECB_1_fu_254_buffer_r_ce0,
        buffer_r_we0 => grp_AES256_ECB_1_fu_254_buffer_r_we0,
        buffer_r_d0 => grp_AES256_ECB_1_fu_254_buffer_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AES256_ECB_1_fu_254_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AES256_ECB_1_fu_254_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_AES256_ECB_1_fu_254_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES256_ECB_1_fu_254_ap_ready = ap_const_logic_1)) then 
                    grp_AES256_ECB_1_fu_254_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AES256_ECB_fu_240_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AES256_ECB_fu_240_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_AES256_ECB_fu_240_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES256_ECB_fu_240_ap_ready = ap_const_logic_1)) then 
                    grp_AES256_ECB_fu_240_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_0_reg_193 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_AES256_ECB_fu_240_ap_done = ap_const_logic_1))) then 
                i_0_reg_193 <= i_4_reg_464;
            end if; 
        end if;
    end process;

    i_2_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln287_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_2_reg_217 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_2_reg_217 <= i_reg_493;
            end if; 
        end if;
    end process;

    i_3_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_3_reg_228 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_3_reg_228 <= i_1_reg_511;
            end if; 
        end if;
    end process;

    j1_0_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln287_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j1_0_reg_205 <= ap_const_lv5_F;
            elsif (((grp_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j1_0_reg_205 <= j_1_fu_349_p2;
            end if; 
        end if;
    end process;

    j_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_170 <= j_fu_297_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_170 <= ap_const_lv5_F;
            end if; 
        end if;
    end process;

    loop_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                loop_0_reg_182 <= loop_reg_446;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_AES256_ECB_1_fu_254_ap_done = ap_const_logic_1))) then 
                loop_0_reg_182 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_336_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                DRBG_ctx_V_addr_1_reg_472 <= zext_ln292_fu_344_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_284_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                DRBG_ctx_V_addr_reg_430 <= zext_ln249_fu_292_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_1_reg_511 <= i_1_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_4_reg_464 <= i_4_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_reg_493 <= i_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                loop_reg_446 <= loop_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    shl_ln_reg_485(5 downto 4) <= shl_ln_fu_355_p3(5 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln270_reg_451(4 downto 0) <= zext_ln270_fu_315_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_364_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    zext_ln307_reg_498(5 downto 0) <= zext_ln307_fu_376_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln270_reg_451(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    shl_ln_reg_485(3 downto 0) <= "0000";
    zext_ln307_reg_498(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_284_p3, ap_CS_fsm_state3, grp_fu_267_p2, ap_CS_fsm_state6, icmp_ln269_fu_303_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_1_fu_336_p3, ap_CS_fsm_state10, ap_CS_fsm_state13, icmp_ln306_fu_364_p2, ap_CS_fsm_state15, icmp_ln308_fu_381_p2, grp_AES256_ECB_fu_240_ap_done, grp_AES256_ECB_1_fu_254_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state12, icmp_ln287_fu_320_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_284_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_AES256_ECB_1_fu_254_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln269_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln287_fu_320_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((tmp_1_fu_336_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((grp_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_AES256_ECB_fu_240_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln306_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln308_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;

    DRBG_ctx_Key_address0_assign_proc : process(zext_ln307_reg_498, grp_AES256_ECB_fu_240_key_address0, grp_AES256_ECB_1_fu_254_key_address0, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            DRBG_ctx_Key_address0 <= zext_ln307_reg_498(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            DRBG_ctx_Key_address0 <= grp_AES256_ECB_1_fu_254_key_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            DRBG_ctx_Key_address0 <= grp_AES256_ECB_fu_240_key_address0;
        else 
            DRBG_ctx_Key_address0 <= "XXXXX";
        end if; 
    end process;


    DRBG_ctx_Key_ce0_assign_proc : process(grp_AES256_ECB_fu_240_key_ce0, grp_AES256_ECB_1_fu_254_key_ce0, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            DRBG_ctx_Key_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            DRBG_ctx_Key_ce0 <= grp_AES256_ECB_1_fu_254_key_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            DRBG_ctx_Key_ce0 <= grp_AES256_ECB_fu_240_key_ce0;
        else 
            DRBG_ctx_Key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DRBG_ctx_Key_d0 <= temp_q0;

    DRBG_ctx_Key_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            DRBG_ctx_Key_we0 <= ap_const_logic_1;
        else 
            DRBG_ctx_Key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_address0_assign_proc : process(DRBG_ctx_V_addr_reg_430, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_fu_267_p2, DRBG_ctx_V_addr_1_reg_472, ap_CS_fsm_state9, ap_CS_fsm_state10, grp_AES256_ECB_fu_240_ctr_address0, grp_AES256_ECB_1_fu_254_ctr_address0, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, zext_ln249_fu_292_p1, zext_ln292_fu_344_p1, zext_ln309_1_fu_422_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            DRBG_ctx_V_address0 <= zext_ln309_1_fu_422_p1(4 - 1 downto 0);
        elsif ((((grp_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            DRBG_ctx_V_address0 <= DRBG_ctx_V_addr_1_reg_472;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            DRBG_ctx_V_address0 <= zext_ln292_fu_344_p1(4 - 1 downto 0);
        elsif ((((grp_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((grp_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            DRBG_ctx_V_address0 <= DRBG_ctx_V_addr_reg_430;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_V_address0 <= zext_ln249_fu_292_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            DRBG_ctx_V_address0 <= grp_AES256_ECB_1_fu_254_ctr_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            DRBG_ctx_V_address0 <= grp_AES256_ECB_fu_240_ctr_address0;
        else 
            DRBG_ctx_V_address0 <= "XXXX";
        end if; 
    end process;


    DRBG_ctx_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, grp_fu_267_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, grp_AES256_ECB_fu_240_ctr_ce0, grp_AES256_ECB_1_fu_254_ctr_ce0, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((grp_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((grp_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            DRBG_ctx_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            DRBG_ctx_V_ce0 <= grp_AES256_ECB_1_fu_254_ctr_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            DRBG_ctx_V_ce0 <= grp_AES256_ECB_fu_240_ctr_ce0;
        else 
            DRBG_ctx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_d0_assign_proc : process(ap_CS_fsm_state3, grp_fu_267_p2, ap_CS_fsm_state10, temp_q0, ap_CS_fsm_state16, grp_fu_273_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            DRBG_ctx_V_d0 <= temp_q0;
        elsif ((((grp_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((grp_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            DRBG_ctx_V_d0 <= grp_fu_273_p2;
        elsif ((((grp_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            DRBG_ctx_V_d0 <= ap_const_lv8_0;
        else 
            DRBG_ctx_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    DRBG_ctx_V_we0_assign_proc : process(ap_CS_fsm_state3, grp_fu_267_p2, ap_CS_fsm_state10, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((grp_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((grp_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((grp_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            DRBG_ctx_V_we0 <= ap_const_logic_1;
        else 
            DRBG_ctx_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_reseed_counter_o_assign_proc : process(DRBG_ctx_reseed_counter_i, ap_CS_fsm_state15, icmp_ln308_fu_381_p2, add_ln310_fu_410_p2)
    begin
        if (((icmp_ln308_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DRBG_ctx_reseed_counter_o <= add_ln310_fu_410_p2;
        else 
            DRBG_ctx_reseed_counter_o <= DRBG_ctx_reseed_counter_i;
        end if; 
    end process;


    DRBG_ctx_reseed_counter_o_ap_vld_assign_proc : process(ap_CS_fsm_state15, icmp_ln308_fu_381_p2)
    begin
        if (((icmp_ln308_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DRBG_ctx_reseed_counter_o_ap_vld <= ap_const_logic_1;
        else 
            DRBG_ctx_reseed_counter_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln310_fu_410_p2 <= std_logic_vector(unsigned(DRBG_ctx_reseed_counter_i) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15, icmp_ln308_fu_381_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln308_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, icmp_ln308_fu_381_p2)
    begin
        if (((icmp_ln308_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_address0_assign_proc : process(ap_CS_fsm_state6, zext_ln270_fu_315_p1, grp_AES256_ECB_1_fu_254_buffer_r_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_address0 <= zext_ln270_fu_315_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_address0 <= grp_AES256_ECB_1_fu_254_buffer_r_address0;
        else 
            block_address0 <= "XXXX";
        end if; 
    end process;


    block_ce0_assign_proc : process(ap_CS_fsm_state6, grp_AES256_ECB_1_fu_254_buffer_r_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_ce0 <= grp_AES256_ECB_1_fu_254_buffer_r_ce0;
        else 
            block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_we0_assign_proc : process(grp_AES256_ECB_1_fu_254_buffer_r_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_we0 <= grp_AES256_ECB_1_fu_254_buffer_r_we0;
        else 
            block_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_AES256_ECB_1_fu_254_ap_start <= grp_AES256_ECB_1_fu_254_ap_start_reg;
    grp_AES256_ECB_fu_240_ap_start <= grp_AES256_ECB_fu_240_ap_start_reg;
    grp_fu_267_p2 <= "1" when (DRBG_ctx_V_q0 = ap_const_lv8_FF) else "0";
    grp_fu_273_p2 <= std_logic_vector(unsigned(DRBG_ctx_V_q0) + unsigned(ap_const_lv8_1));
    i_1_fu_387_p2 <= std_logic_vector(unsigned(i_3_reg_228) + unsigned(ap_const_lv5_1));
    i_4_fu_326_p2 <= std_logic_vector(unsigned(i_0_reg_193) + unsigned(ap_const_lv2_1));
    i_fu_370_p2 <= std_logic_vector(unsigned(i_2_reg_217) + unsigned(ap_const_lv6_1));
    icmp_ln269_fu_303_p2 <= "1" when (loop_0_reg_182 = ap_const_lv5_10) else "0";
    icmp_ln287_fu_320_p2 <= "1" when (i_0_reg_193 = ap_const_lv2_3) else "0";
    icmp_ln306_fu_364_p2 <= "1" when (i_2_reg_217 = ap_const_lv6_20) else "0";
    icmp_ln308_fu_381_p2 <= "1" when (i_3_reg_228 = ap_const_lv5_10) else "0";
    j_1_fu_349_p2 <= std_logic_vector(signed(j1_0_reg_205) + signed(ap_const_lv5_1F));
    j_fu_297_p2 <= std_logic_vector(signed(j_0_reg_170) + signed(ap_const_lv5_1F));
    loop_fu_309_p2 <= std_logic_vector(unsigned(loop_0_reg_182) + unsigned(ap_const_lv5_1));
    or_ln_fu_393_p3 <= (ap_const_lv1_1 & i_3_reg_228);
        sext_ln246_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_0_reg_170),32));

        sext_ln290_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j1_0_reg_205),32));

    shl_ln_fu_355_p3 <= (i_0_reg_193 & ap_const_lv4_0);

    temp_address0_assign_proc : process(ap_CS_fsm_state13, zext_ln307_fu_376_p1, ap_CS_fsm_state15, grp_AES256_ECB_fu_240_buffer_r_address0, ap_CS_fsm_state12, zext_ln309_fu_401_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_address0 <= zext_ln309_fu_401_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_address0 <= zext_ln307_fu_376_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_address0 <= grp_AES256_ECB_fu_240_buffer_r_address0;
        else 
            temp_address0 <= "XXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15, grp_AES256_ECB_fu_240_buffer_r_ce0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            temp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_ce0 <= grp_AES256_ECB_fu_240_buffer_r_ce0;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(grp_AES256_ECB_fu_240_buffer_r_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_we0 <= grp_AES256_ECB_fu_240_buffer_r_we0;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_336_p3 <= j1_0_reg_205(4 downto 4);
    tmp_fu_284_p3 <= j_0_reg_170(4 downto 4);
    x_address0 <= zext_ln270_reg_451(5 - 1 downto 0);

    x_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_d0 <= block_q0;

    x_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln249_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln246_fu_280_p1),64));
    zext_ln270_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_182),64));
    zext_ln292_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln290_fu_332_p1),64));
    zext_ln307_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_217),64));
    zext_ln309_1_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_228),64));
    zext_ln309_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_393_p3),64));
end behav;
