// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_mul_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        state_address0,
        state_ce0,
        state_q0,
        matrix_offset
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [2:0] state_address0;
output   state_ce0;
input  [31:0] state_q0;
input  [13:0] matrix_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg state_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] temp_matrix_address0;
reg    temp_matrix_ce0;
wire   [31:0] temp_matrix_q0;
wire   [6:0] i_fu_276_p2;
reg   [6:0] i_reg_899;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln134_fu_304_p1;
reg   [63:0] zext_ln134_reg_904;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln130_fu_319_p2;
reg   [0:0] icmp_ln130_reg_919;
wire   [1:0] j_fu_332_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [31:0] prod_q0;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln87_fu_343_p2;
wire   [2:0] i_5_fu_349_p2;
reg   [2:0] i_5_reg_946;
reg   [1:0] tmp_8_reg_951;
reg   [5:0] temp_addr_4_reg_957;
wire   [2:0] trunc_ln128_fu_380_p1;
reg   [2:0] trunc_ln128_reg_962;
wire   [0:0] icmp_ln128_fu_384_p2;
reg   [0:0] icmp_ln128_reg_967;
wire   [31:0] x_1_fu_390_p2;
wire    ap_CS_fsm_state8;
wire   [4:0] zext_ln68_cast_fu_602_p3;
reg   [4:0] zext_ln68_cast_reg_976;
wire    ap_CS_fsm_state9;
wire   [5:0] add_ln68_fu_617_p2;
reg   [5:0] add_ln68_reg_981;
wire   [7:0] or_ln68_fu_758_p2;
reg   [7:0] or_ln68_reg_987;
wire   [0:0] icmp_ln68_1_fu_764_p2;
reg   [0:0] icmp_ln68_1_reg_992;
wire   [2:0] loop_fu_883_p2;
reg   [2:0] loop_reg_1003;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln141_fu_889_p1;
reg   [63:0] zext_ln141_reg_1008;
wire   [0:0] icmp_ln140_fu_877_p2;
reg   [5:0] prod_address0;
reg    prod_ce0;
reg    prod_we0;
wire   [31:0] prod_d0;
reg   [5:0] temp_address0;
reg    temp_ce0;
reg   [3:0] temp_we0;
wire   [31:0] temp_d0;
wire   [31:0] temp_q0;
reg   [6:0] bitNumber_assign105_reg_220;
wire    ap_CS_fsm_state10;
reg   [1:0] j_0104_reg_232;
reg   [31:0] x_0_i_reg_244;
reg   [2:0] i_0_i_reg_254;
reg   [2:0] loop_0_reg_265;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln134_1_fu_314_p1;
wire   [63:0] zext_ln87_fu_338_p1;
wire   [63:0] zext_ln68_3_fu_375_p1;
wire   [3:0] shl_ln68_4_fu_870_p2;
wire   [8:0] shl_ln_fu_286_p3;
wire   [8:0] zext_ln130_fu_282_p1;
wire   [8:0] add_ln133_fu_294_p2;
wire   [13:0] zext_ln133_fu_300_p1;
wire   [13:0] add_ln134_fu_309_p2;
wire   [1:0] tmp_9_fu_365_p4;
wire   [30:0] lshr_ln_fu_396_p4;
wire   [31:0] zext_ln96_fu_406_p1;
wire   [31:0] y_fu_436_p2;
wire   [29:0] lshr_ln2_fu_442_p4;
wire   [23:0] trunc_ln96_3_fu_426_p4;
wire   [23:0] trunc_ln96_1_fu_422_p1;
wire   [31:0] zext_ln97_fu_452_p1;
wire   [31:0] y_1_fu_480_p2;
wire   [27:0] lshr_ln3_fu_486_p4;
wire   [23:0] trunc_ln97_1_fu_470_p4;
wire   [23:0] xor_ln97_fu_464_p2;
wire   [31:0] zext_ln98_fu_496_p1;
wire   [23:0] trunc_ln98_1_fu_514_p4;
wire   [23:0] xor_ln98_fu_508_p2;
wire   [31:0] y_2_fu_524_p2;
wire   [23:0] trunc_ln5_fu_536_p4;
wire   [23:0] xor_ln98_2_fu_530_p2;
wire   [23:0] y_3_fu_554_p2;
wire   [0:0] trunc_ln96_fu_410_p1;
wire   [0:0] tmp_4_fu_456_p3;
wire   [0:0] xor_ln101_fu_568_p2;
wire   [0:0] tmp_3_fu_414_p3;
wire   [0:0] tmp_6_fu_546_p3;
wire   [0:0] tmp_7_fu_560_p3;
wire   [0:0] xor_ln101_2_fu_580_p2;
wire   [0:0] tmp_5_fu_500_p3;
wire   [0:0] xor_ln101_3_fu_586_p2;
wire   [0:0] xor_ln101_1_fu_574_p2;
wire   [0:0] xor_ln101_4_fu_592_p2;
wire   [5:0] zext_ln68_fu_609_p1;
wire   [63:0] zext_ln68_2_fu_613_p1;
wire   [63:0] zext_ln68_4_fu_623_p1;
wire   [5:0] zext_ln68_5_fu_633_p1;
wire   [0:0] icmp_ln68_fu_627_p2;
wire   [5:0] sub_ln68_fu_647_p2;
wire   [5:0] sub_ln68_1_fu_659_p2;
reg   [31:0] tmp_10_fu_637_p4;
wire   [5:0] xor_ln68_2_fu_653_p2;
wire   [5:0] select_ln68_fu_665_p3;
wire   [5:0] select_ln68_2_fu_681_p3;
wire   [5:0] sub_ln68_2_fu_689_p2;
wire   [31:0] select_ln68_1_fu_673_p3;
wire   [31:0] zext_ln68_6_fu_695_p1;
wire   [31:0] zext_ln68_7_fu_699_p1;
wire   [31:0] lshr_ln68_fu_703_p2;
wire   [31:0] lshr_ln68_1_fu_709_p2;
wire   [31:0] and_ln68_1_fu_715_p2;
wire   [2:0] xor_ln68_fu_725_p2;
wire   [7:0] zext_ln68_1_fu_730_p1;
wire   [7:0] shl_ln68_fu_734_p2;
wire   [7:0] zext_ln101_fu_598_p1;
wire   [7:0] trunc_ln68_fu_721_p1;
wire   [7:0] xor_ln68_1_fu_740_p2;
wire   [7:0] and_ln68_fu_752_p2;
wire   [7:0] shl_ln68_1_fu_746_p2;
wire   [5:0] zext_ln68_8_fu_770_p1;
wire   [5:0] xor_ln68_3_fu_776_p2;
wire   [5:0] select_ln68_3_fu_782_p3;
wire   [5:0] select_ln68_5_fu_794_p3;
wire   [5:0] select_ln68_4_fu_788_p3;
wire   [5:0] sub_ln68_3_fu_801_p2;
wire   [31:0] zext_ln68_9_fu_773_p1;
wire   [31:0] zext_ln68_10_fu_807_p1;
wire   [31:0] shl_ln68_2_fu_819_p2;
reg   [31:0] tmp_11_fu_825_p4;
wire   [31:0] zext_ln68_11_fu_811_p1;
wire   [31:0] zext_ln68_12_fu_815_p1;
wire   [31:0] shl_ln68_3_fu_842_p2;
wire   [31:0] lshr_ln68_2_fu_848_p2;
wire   [31:0] select_ln68_6_fu_835_p3;
wire   [31:0] and_ln68_2_fu_854_p2;
wire   [3:0] zext_ln68_13_fu_867_p1;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

matrix_mul_1_tempeOg #(
    .DataWidth( 32 ),
    .AddressRange( 10752 ),
    .AddressWidth( 14 ))
temp_matrix_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_matrix_address0),
    .ce0(temp_matrix_ce0),
    .q0(temp_matrix_q0)
);

matrix_mul_1_prod #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
prod_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(prod_address0),
    .ce0(prod_ce0),
    .we0(prod_we0),
    .d0(prod_d0),
    .q0(prod_q0)
);

matrix_mul_1_temp #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln128_reg_967 == 1'd0))) begin
        bitNumber_assign105_reg_220 <= i_reg_899;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bitNumber_assign105_reg_220 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_i_reg_254 <= i_5_reg_946;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_254 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_reg_919 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0104_reg_232 <= j_fu_332_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_0104_reg_232 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln128_reg_967 == 1'd1))) begin
        loop_0_reg_265 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        loop_0_reg_265 <= loop_reg_1003;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_0_i_reg_244 <= x_1_fu_390_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_0_i_reg_244 <= prod_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln68_reg_981[5 : 3] <= add_ln68_fu_617_p2[5 : 3];
        icmp_ln68_1_reg_992 <= icmp_ln68_1_fu_764_p2;
        or_ln68_reg_987 <= or_ln68_fu_758_p2;
        zext_ln68_cast_reg_976[4 : 3] <= zext_ln68_cast_fu_602_p3[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln87_fu_343_p2 == 1'd0))) begin
        i_5_reg_946 <= i_5_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_899 <= i_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln87_fu_343_p2 == 1'd1))) begin
        icmp_ln128_reg_967 <= icmp_ln128_fu_384_p2;
        temp_addr_4_reg_957[1 : 0] <= zext_ln68_3_fu_375_p1[1 : 0];
        tmp_8_reg_951 <= {{bitNumber_assign105_reg_220[4:3]}};
        trunc_ln128_reg_962 <= trunc_ln128_fu_380_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln130_reg_919 <= icmp_ln130_fu_319_p2;
        zext_ln134_reg_904[1 : 0] <= zext_ln134_fu_304_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        loop_reg_1003 <= loop_fu_883_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln140_fu_877_p2 == 1'd0))) begin
        zext_ln141_reg_1008[2 : 0] <= zext_ln141_fu_889_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln140_fu_877_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln140_fu_877_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        prod_address0 = zext_ln87_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        prod_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        prod_address0 = zext_ln134_reg_904;
    end else begin
        prod_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_address0 = zext_ln141_fu_889_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_address0 = temp_addr_4_reg_957;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_address0 = zext_ln68_3_fu_375_p1;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        temp_matrix_ce0 = 1'b1;
    end else begin
        temp_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_we0 = shl_ln68_4_fu_870_p2;
    end else begin
        temp_we0 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln130_reg_919 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln87_fu_343_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln128_reg_967 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln140_fu_877_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln133_fu_294_p2 = (shl_ln_fu_286_p3 + zext_ln130_fu_282_p1);

assign add_ln134_fu_309_p2 = (zext_ln133_fu_300_p1 + matrix_offset);

assign add_ln68_fu_617_p2 = (6'd7 + zext_ln68_fu_609_p1);

assign and_ln68_1_fu_715_p2 = (lshr_ln68_fu_703_p2 & lshr_ln68_1_fu_709_p2);

assign and_ln68_2_fu_854_p2 = (shl_ln68_3_fu_842_p2 & lshr_ln68_2_fu_848_p2);

assign and_ln68_fu_752_p2 = (xor_ln68_1_fu_740_p2 & trunc_ln68_fu_721_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_5_fu_349_p2 = (i_0_i_reg_254 + 3'd1);

assign i_fu_276_p2 = (bitNumber_assign105_reg_220 + 7'd1);

assign icmp_ln128_fu_384_p2 = ((bitNumber_assign105_reg_220 == 7'd127) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_319_p2 = ((j_0104_reg_232 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln140_fu_877_p2 = ((loop_0_reg_265 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln68_1_fu_764_p2 = ((zext_ln68_2_fu_613_p1 > zext_ln68_4_fu_623_p1) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_627_p2 = ((zext_ln68_2_fu_613_p1 > zext_ln68_4_fu_623_p1) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_343_p2 = ((i_0_i_reg_254 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_332_p2 = (j_0104_reg_232 + 2'd1);

assign loop_fu_883_p2 = (loop_0_reg_265 + 3'd1);

assign lshr_ln2_fu_442_p4 = {{y_fu_436_p2[31:2]}};

assign lshr_ln3_fu_486_p4 = {{y_1_fu_480_p2[31:4]}};

assign lshr_ln68_1_fu_709_p2 = 32'd4294967295 >> zext_ln68_7_fu_699_p1;

assign lshr_ln68_2_fu_848_p2 = 32'd4294967295 >> zext_ln68_12_fu_815_p1;

assign lshr_ln68_fu_703_p2 = select_ln68_1_fu_673_p3 >> zext_ln68_6_fu_695_p1;

assign lshr_ln_fu_396_p4 = {{x_0_i_reg_244[31:1]}};

assign or_ln68_fu_758_p2 = (shl_ln68_1_fu_746_p2 | and_ln68_fu_752_p2);

assign output_r_address0 = zext_ln141_reg_1008;

assign output_r_d0 = temp_q0;

assign prod_d0 = (temp_matrix_q0 & state_q0);

assign select_ln68_1_fu_673_p3 = ((icmp_ln68_fu_627_p2[0:0] === 1'b1) ? tmp_10_fu_637_p4 : temp_q0);

assign select_ln68_2_fu_681_p3 = ((icmp_ln68_fu_627_p2[0:0] === 1'b1) ? xor_ln68_2_fu_653_p2 : zext_ln68_5_fu_633_p1);

assign select_ln68_3_fu_782_p3 = ((icmp_ln68_1_reg_992[0:0] === 1'b1) ? zext_ln68_8_fu_770_p1 : add_ln68_reg_981);

assign select_ln68_4_fu_788_p3 = ((icmp_ln68_1_reg_992[0:0] === 1'b1) ? add_ln68_reg_981 : zext_ln68_8_fu_770_p1);

assign select_ln68_5_fu_794_p3 = ((icmp_ln68_1_reg_992[0:0] === 1'b1) ? xor_ln68_3_fu_776_p2 : zext_ln68_8_fu_770_p1);

assign select_ln68_6_fu_835_p3 = ((icmp_ln68_1_reg_992[0:0] === 1'b1) ? tmp_11_fu_825_p4 : shl_ln68_2_fu_819_p2);

assign select_ln68_fu_665_p3 = ((icmp_ln68_fu_627_p2[0:0] === 1'b1) ? sub_ln68_fu_647_p2 : sub_ln68_1_fu_659_p2);

assign shl_ln68_1_fu_746_p2 = zext_ln101_fu_598_p1 << zext_ln68_1_fu_730_p1;

assign shl_ln68_2_fu_819_p2 = zext_ln68_9_fu_773_p1 << zext_ln68_10_fu_807_p1;

assign shl_ln68_3_fu_842_p2 = 32'd4294967295 << zext_ln68_11_fu_811_p1;

assign shl_ln68_4_fu_870_p2 = 4'd1 << zext_ln68_13_fu_867_p1;

assign shl_ln68_fu_734_p2 = 8'd1 << zext_ln68_1_fu_730_p1;

assign shl_ln_fu_286_p3 = {{bitNumber_assign105_reg_220}, {2'd0}};

assign state_address0 = zext_ln134_fu_304_p1;

assign sub_ln68_1_fu_659_p2 = (add_ln68_fu_617_p2 - zext_ln68_5_fu_633_p1);

assign sub_ln68_2_fu_689_p2 = (6'd31 - select_ln68_fu_665_p3);

assign sub_ln68_3_fu_801_p2 = (6'd31 - select_ln68_3_fu_782_p3);

assign sub_ln68_fu_647_p2 = (zext_ln68_5_fu_633_p1 - add_ln68_fu_617_p2);

assign temp_d0 = (select_ln68_6_fu_835_p3 & and_ln68_2_fu_854_p2);

assign temp_matrix_address0 = zext_ln134_1_fu_314_p1;

integer ap_tvar_int_0;

always @ (temp_q0) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_10_fu_637_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_10_fu_637_p4[ap_tvar_int_0] = temp_q0[31 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln68_2_fu_819_p2) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_11_fu_825_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_11_fu_825_p4[ap_tvar_int_1] = shl_ln68_2_fu_819_p2[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_3_fu_414_p3 = x_0_i_reg_244[32'd1];

assign tmp_4_fu_456_p3 = y_fu_436_p2[32'd2];

assign tmp_5_fu_500_p3 = y_1_fu_480_p2[32'd4];

assign tmp_6_fu_546_p3 = y_2_fu_524_p2[32'd8];

assign tmp_7_fu_560_p3 = y_3_fu_554_p2[32'd16];

assign tmp_9_fu_365_p4 = {{bitNumber_assign105_reg_220[6:5]}};

assign trunc_ln128_fu_380_p1 = bitNumber_assign105_reg_220[2:0];

assign trunc_ln5_fu_536_p4 = {{y_2_fu_524_p2[31:8]}};

assign trunc_ln68_fu_721_p1 = and_ln68_1_fu_715_p2[7:0];

assign trunc_ln96_1_fu_422_p1 = x_0_i_reg_244[23:0];

assign trunc_ln96_3_fu_426_p4 = {{x_0_i_reg_244[24:1]}};

assign trunc_ln96_fu_410_p1 = x_0_i_reg_244[0:0];

assign trunc_ln97_1_fu_470_p4 = {{y_fu_436_p2[25:2]}};

assign trunc_ln98_1_fu_514_p4 = {{y_1_fu_480_p2[27:4]}};

assign x_1_fu_390_p2 = (x_0_i_reg_244 ^ prod_q0);

assign xor_ln101_1_fu_574_p2 = (xor_ln101_fu_568_p2 ^ tmp_3_fu_414_p3);

assign xor_ln101_2_fu_580_p2 = (tmp_7_fu_560_p3 ^ tmp_6_fu_546_p3);

assign xor_ln101_3_fu_586_p2 = (xor_ln101_2_fu_580_p2 ^ tmp_5_fu_500_p3);

assign xor_ln101_4_fu_592_p2 = (xor_ln101_3_fu_586_p2 ^ xor_ln101_1_fu_574_p2);

assign xor_ln101_fu_568_p2 = (trunc_ln96_fu_410_p1 ^ tmp_4_fu_456_p3);

assign xor_ln68_1_fu_740_p2 = (shl_ln68_fu_734_p2 ^ 8'd255);

assign xor_ln68_2_fu_653_p2 = (zext_ln68_5_fu_633_p1 ^ 6'd31);

assign xor_ln68_3_fu_776_p2 = (zext_ln68_8_fu_770_p1 ^ 6'd31);

assign xor_ln68_fu_725_p2 = (trunc_ln128_reg_962 ^ 3'd7);

assign xor_ln97_fu_464_p2 = (trunc_ln96_3_fu_426_p4 ^ trunc_ln96_1_fu_422_p1);

assign xor_ln98_2_fu_530_p2 = (xor_ln98_fu_508_p2 ^ trunc_ln98_1_fu_514_p4);

assign xor_ln98_fu_508_p2 = (xor_ln97_fu_464_p2 ^ trunc_ln97_1_fu_470_p4);

assign y_1_fu_480_p2 = (zext_ln97_fu_452_p1 ^ y_fu_436_p2);

assign y_2_fu_524_p2 = (zext_ln98_fu_496_p1 ^ y_1_fu_480_p2);

assign y_3_fu_554_p2 = (xor_ln98_2_fu_530_p2 ^ trunc_ln5_fu_536_p4);

assign y_fu_436_p2 = (zext_ln96_fu_406_p1 ^ x_0_i_reg_244);

assign zext_ln101_fu_598_p1 = xor_ln101_4_fu_592_p2;

assign zext_ln130_fu_282_p1 = j_0104_reg_232;

assign zext_ln133_fu_300_p1 = add_ln133_fu_294_p2;

assign zext_ln134_1_fu_314_p1 = add_ln134_fu_309_p2;

assign zext_ln134_fu_304_p1 = j_0104_reg_232;

assign zext_ln141_fu_889_p1 = loop_0_reg_265;

assign zext_ln68_10_fu_807_p1 = select_ln68_5_fu_794_p3;

assign zext_ln68_11_fu_811_p1 = select_ln68_4_fu_788_p3;

assign zext_ln68_12_fu_815_p1 = sub_ln68_3_fu_801_p2;

assign zext_ln68_13_fu_867_p1 = tmp_8_reg_951;

assign zext_ln68_1_fu_730_p1 = xor_ln68_fu_725_p2;

assign zext_ln68_2_fu_613_p1 = zext_ln68_cast_fu_602_p3;

assign zext_ln68_3_fu_375_p1 = tmp_9_fu_365_p4;

assign zext_ln68_4_fu_623_p1 = add_ln68_fu_617_p2;

assign zext_ln68_5_fu_633_p1 = zext_ln68_cast_fu_602_p3;

assign zext_ln68_6_fu_695_p1 = select_ln68_2_fu_681_p3;

assign zext_ln68_7_fu_699_p1 = sub_ln68_2_fu_689_p2;

assign zext_ln68_8_fu_770_p1 = zext_ln68_cast_reg_976;

assign zext_ln68_9_fu_773_p1 = or_ln68_reg_987;

assign zext_ln68_cast_fu_602_p3 = {{tmp_8_reg_951}, {3'd0}};

assign zext_ln68_fu_609_p1 = zext_ln68_cast_fu_602_p3;

assign zext_ln87_fu_338_p1 = i_0_i_reg_254;

assign zext_ln96_fu_406_p1 = lshr_ln_fu_396_p4;

assign zext_ln97_fu_452_p1 = lshr_ln2_fu_442_p4;

assign zext_ln98_fu_496_p1 = lshr_ln3_fu_486_p4;

always @ (posedge ap_clk) begin
    zext_ln134_reg_904[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    temp_addr_4_reg_957[5:2] <= 4'b0000;
    zext_ln68_cast_reg_976[2:0] <= 3'b000;
    add_ln68_reg_981[2:0] <= 3'b111;
    zext_ln141_reg_1008[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrix_mul_1
