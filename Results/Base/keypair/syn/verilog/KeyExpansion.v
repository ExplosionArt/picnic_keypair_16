// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module KeyExpansion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_we0,
        RoundKey_d0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_we1,
        RoundKey_d1,
        RoundKey_q1,
        Key_address0,
        Key_ce0,
        Key_q0,
        Key_address1,
        Key_ce1,
        Key_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
output   RoundKey_we0;
output  [7:0] RoundKey_d0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
output   RoundKey_we1;
output  [7:0] RoundKey_d1;
input  [7:0] RoundKey_q1;
output  [4:0] Key_address0;
output   Key_ce0;
input  [7:0] Key_q0;
output  [4:0] Key_address1;
output   Key_ce1;
input  [7:0] Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;
reg RoundKey_we0;
reg[7:0] RoundKey_d0;
reg[7:0] RoundKey_address1;
reg RoundKey_ce1;
reg RoundKey_we1;
reg[7:0] RoundKey_d1;
reg[4:0] Key_address0;
reg Key_ce0;
reg[4:0] Key_address1;
reg Key_ce1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
reg   [7:0] sbox_address2;
reg    sbox_ce2;
wire   [7:0] sbox_q2;
wire   [7:0] sbox_address3;
reg    sbox_ce3;
wire   [7:0] sbox_q3;
wire   [3:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
reg   [7:0] reg_374;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [3:0] i_fu_385_p2;
reg   [3:0] i_reg_729;
wire    ap_CS_fsm_state2;
wire   [4:0] shl_ln_fu_395_p3;
reg   [4:0] shl_ln_reg_734;
wire   [0:0] icmp_ln158_fu_379_p2;
wire   [63:0] zext_ln160_fu_403_p1;
reg   [63:0] zext_ln160_reg_740;
wire   [63:0] zext_ln161_fu_414_p1;
reg   [63:0] zext_ln161_reg_750;
wire   [63:0] zext_ln162_fu_424_p1;
reg   [63:0] zext_ln162_reg_760;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln163_fu_434_p1;
reg   [63:0] zext_ln163_reg_770;
wire   [7:0] j_fu_445_p3;
reg   [7:0] j_reg_783;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln167_fu_439_p2;
wire   [0:0] icmp_ln178_fu_479_p2;
reg   [0:0] icmp_ln178_reg_807;
reg   [2:0] lshr_ln_reg_815;
wire   [0:0] icmp_ln206_fu_495_p2;
reg   [0:0] icmp_ln206_reg_820;
wire   [5:0] i_7_fu_501_p2;
reg   [5:0] i_7_reg_828;
reg   [7:0] tempa_1_reg_833;
reg   [7:0] tempa_3_reg_858;
wire   [7:0] tempa_0_2_fu_557_p3;
reg   [7:0] tempa_0_2_reg_878;
wire   [7:0] tempa_3_2_fu_589_p3;
reg   [7:0] tempa_3_2_reg_898;
wire   [7:0] tempa_2_2_fu_595_p3;
reg   [7:0] tempa_2_2_reg_903;
wire   [7:0] tempa_1_2_fu_602_p3;
reg   [7:0] tempa_1_2_reg_908;
wire   [7:0] xor_ln218_fu_629_p2;
reg   [7:0] xor_ln218_reg_928;
wire   [7:0] xor_ln220_fu_694_p2;
reg   [7:0] xor_ln220_reg_943;
wire    ap_CS_fsm_state9;
wire   [7:0] xor_ln221_fu_700_p2;
reg   [7:0] xor_ln221_reg_948;
reg   [3:0] i_0_reg_352;
wire    ap_CS_fsm_state4;
reg   [5:0] i_1_reg_363;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln171_fu_459_p1;
wire   [63:0] zext_ln172_fu_470_p1;
wire   [63:0] zext_ln173_fu_512_p1;
wire   [63:0] zext_ln174_fu_522_p1;
wire   [63:0] zext_ln197_fu_527_p1;
wire   [63:0] zext_ln203_fu_532_p1;
wire   [63:0] zext_ln198_fu_536_p1;
wire   [63:0] zext_ln199_fu_541_p1;
wire   [63:0] zext_ln200_fu_546_p1;
wire   [63:0] zext_ln210_fu_564_p1;
wire   [63:0] zext_ln218_fu_574_p1;
wire   [63:0] zext_ln219_fu_584_p1;
wire   [63:0] zext_ln211_fu_608_p1;
wire   [63:0] zext_ln212_fu_613_p1;
wire   [63:0] zext_ln213_fu_618_p1;
wire   [63:0] zext_ln220_fu_640_p1;
wire   [63:0] zext_ln221_fu_650_p1;
wire   [63:0] zext_ln218_1_fu_673_p1;
wire   [63:0] zext_ln219_1_fu_689_p1;
wire   [63:0] zext_ln220_1_fu_711_p1;
wire   [63:0] zext_ln221_1_fu_721_p1;
wire   [7:0] xor_ln219_fu_677_p2;
wire   [2:0] trunc_ln160_fu_391_p1;
wire   [4:0] or_ln161_fu_408_p2;
wire   [4:0] or_ln162_fu_419_p2;
wire   [4:0] or_ln163_fu_429_p2;
wire   [7:0] add_ln171_fu_453_p2;
wire   [7:0] add_ln172_fu_464_p2;
wire   [2:0] trunc_ln167_fu_475_p1;
wire   [7:0] add_ln173_fu_507_p2;
wire   [7:0] add_ln174_fu_517_p2;
wire   [7:0] tempa_0_fu_551_p2;
wire   [7:0] add_ln218_fu_569_p2;
wire   [7:0] add_ln219_fu_579_p2;
wire   [7:0] tempa_0_4_fu_623_p3;
wire   [7:0] add_ln220_fu_635_p2;
wire   [7:0] add_ln221_fu_645_p2;
wire   [7:0] tempa_1_4_fu_667_p3;
wire   [7:0] or_ln219_fu_684_p2;
wire   [7:0] tempa_2_4_fu_661_p3;
wire   [7:0] tempa_3_4_fu_655_p3;
wire   [7:0] or_ln220_fu_706_p2;
wire   [7:0] or_ln221_fu_716_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

KeyExpansion_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1),
    .address2(sbox_address2),
    .ce2(sbox_ce2),
    .q2(sbox_q2),
    .address3(sbox_address3),
    .ce3(sbox_ce3),
    .q3(sbox_q3)
);

KeyExpansion_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_352 <= i_reg_729;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_352 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln158_fu_379_p2 == 1'd1))) begin
        i_1_reg_363 <= 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_363 <= i_7_reg_828;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_374 <= RoundKey_q1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_374 <= RoundKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln167_fu_439_p2 == 1'd0))) begin
        i_7_reg_828 <= i_7_fu_501_p2;
        icmp_ln178_reg_807 <= icmp_ln178_fu_479_p2;
        icmp_ln206_reg_820 <= icmp_ln206_fu_495_p2;
        j_reg_783[7 : 2] <= j_fu_445_p3[7 : 2];
        lshr_ln_reg_815 <= {{i_1_reg_363[5:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_729 <= i_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln158_fu_379_p2 == 1'd0))) begin
        shl_ln_reg_734[4 : 2] <= shl_ln_fu_395_p3[4 : 2];
        zext_ln160_reg_740[4 : 2] <= zext_ln160_fu_403_p1[4 : 2];
        zext_ln161_reg_750[4 : 2] <= zext_ln161_fu_414_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tempa_0_2_reg_878 <= tempa_0_2_fu_557_p3;
        tempa_3_reg_858 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tempa_1_2_reg_908 <= tempa_1_2_fu_602_p3;
        tempa_2_2_reg_903 <= tempa_2_2_fu_595_p3;
        tempa_3_2_reg_898 <= tempa_3_2_fu_589_p3;
        xor_ln218_reg_928 <= xor_ln218_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tempa_1_reg_833 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        xor_ln220_reg_943 <= xor_ln220_fu_694_p2;
        xor_ln221_reg_948 <= xor_ln221_fu_700_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln162_reg_760[4 : 2] <= zext_ln162_fu_424_p1[4 : 2];
        zext_ln163_reg_770[4 : 2] <= zext_ln163_fu_434_p1[4 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address0 = zext_ln162_fu_424_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_address0 = zext_ln160_fu_403_p1;
    end else begin
        Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address1 = zext_ln163_fu_434_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_address1 = zext_ln161_fu_414_p1;
    end else begin
        Key_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        Key_ce0 = 1'b1;
    end else begin
        Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        Key_ce1 = 1'b1;
    end else begin
        Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address0 = zext_ln220_1_fu_711_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address0 = zext_ln218_1_fu_673_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address0 = zext_ln220_fu_640_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_address0 = zext_ln218_fu_574_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address0 = zext_ln173_fu_512_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_address0 = zext_ln171_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = zext_ln162_reg_760;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address0 = zext_ln160_reg_740;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address1 = zext_ln221_1_fu_721_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address1 = zext_ln219_1_fu_689_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address1 = zext_ln221_fu_650_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_address1 = zext_ln219_fu_584_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address1 = zext_ln174_fu_522_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_address1 = zext_ln172_fu_470_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address1 = zext_ln163_reg_770;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address1 = zext_ln161_reg_750;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        RoundKey_ce1 = 1'b1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_d0 = xor_ln220_reg_943;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_d0 = xor_ln218_reg_928;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        RoundKey_d0 = Key_q0;
    end else begin
        RoundKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_d1 = xor_ln221_reg_948;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_d1 = xor_ln219_fu_677_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        RoundKey_d1 = Key_q1;
    end else begin
        RoundKey_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        RoundKey_we0 = 1'b1;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        RoundKey_we1 = 1'b1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln167_fu_439_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln167_fu_439_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address0 = zext_ln211_fu_608_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address0 = zext_ln198_fu_536_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_address0 = zext_ln197_fu_527_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address1 = zext_ln212_fu_613_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address1 = zext_ln199_fu_541_p1;
    end else begin
        sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address2 = zext_ln213_fu_618_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address2 = zext_ln200_fu_546_p1;
    end else begin
        sbox_address2 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        sbox_ce2 = 1'b1;
    end else begin
        sbox_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_ce3 = 1'b1;
    end else begin
        sbox_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln158_fu_379_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln167_fu_439_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = zext_ln203_fu_532_p1;

assign add_ln171_fu_453_p2 = ($signed(8'd252) + $signed(j_fu_445_p3));

assign add_ln172_fu_464_p2 = ($signed(8'd253) + $signed(j_fu_445_p3));

assign add_ln173_fu_507_p2 = ($signed(8'd254) + $signed(j_reg_783));

assign add_ln174_fu_517_p2 = ($signed(8'd255) + $signed(j_reg_783));

assign add_ln218_fu_569_p2 = ($signed(8'd224) + $signed(j_reg_783));

assign add_ln219_fu_579_p2 = ($signed(8'd225) + $signed(j_reg_783));

assign add_ln220_fu_635_p2 = ($signed(8'd226) + $signed(j_reg_783));

assign add_ln221_fu_645_p2 = ($signed(8'd227) + $signed(j_reg_783));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_7_fu_501_p2 = (6'd1 + i_1_reg_363);

assign i_fu_385_p2 = (i_0_reg_352 + 4'd1);

assign icmp_ln158_fu_379_p2 = ((i_0_reg_352 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_439_p2 = ((i_1_reg_363 == 6'd60) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_479_p2 = ((trunc_ln167_fu_475_p1 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln206_fu_495_p2 = ((trunc_ln167_fu_475_p1 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_445_p3 = {{i_1_reg_363}, {2'd0}};

assign or_ln161_fu_408_p2 = (shl_ln_fu_395_p3 | 5'd1);

assign or_ln162_fu_419_p2 = (shl_ln_reg_734 | 5'd2);

assign or_ln163_fu_429_p2 = (shl_ln_reg_734 | 5'd3);

assign or_ln219_fu_684_p2 = (j_reg_783 | 8'd1);

assign or_ln220_fu_706_p2 = (j_reg_783 | 8'd2);

assign or_ln221_fu_716_p2 = (j_reg_783 | 8'd3);

assign sbox_address3 = zext_ln210_fu_564_p1;

assign shl_ln_fu_395_p3 = {{trunc_ln160_fu_391_p1}, {2'd0}};

assign tempa_0_2_fu_557_p3 = ((icmp_ln178_reg_807[0:0] === 1'b1) ? tempa_0_fu_551_p2 : reg_374);

assign tempa_0_4_fu_623_p3 = ((icmp_ln206_reg_820[0:0] === 1'b1) ? sbox_q3 : tempa_0_2_reg_878);

assign tempa_0_fu_551_p2 = (sbox_q0 ^ Rcon_q0);

assign tempa_1_2_fu_602_p3 = ((icmp_ln178_reg_807[0:0] === 1'b1) ? sbox_q0 : tempa_1_reg_833);

assign tempa_1_4_fu_667_p3 = ((icmp_ln206_reg_820[0:0] === 1'b1) ? sbox_q0 : tempa_1_2_reg_908);

assign tempa_2_2_fu_595_p3 = ((icmp_ln178_reg_807[0:0] === 1'b1) ? sbox_q1 : reg_374);

assign tempa_2_4_fu_661_p3 = ((icmp_ln206_reg_820[0:0] === 1'b1) ? sbox_q1 : tempa_2_2_reg_903);

assign tempa_3_2_fu_589_p3 = ((icmp_ln178_reg_807[0:0] === 1'b1) ? sbox_q2 : tempa_3_reg_858);

assign tempa_3_4_fu_655_p3 = ((icmp_ln206_reg_820[0:0] === 1'b1) ? sbox_q2 : tempa_3_2_reg_898);

assign trunc_ln160_fu_391_p1 = i_0_reg_352[2:0];

assign trunc_ln167_fu_475_p1 = i_1_reg_363[2:0];

assign xor_ln218_fu_629_p2 = (tempa_0_4_fu_623_p3 ^ RoundKey_q0);

assign xor_ln219_fu_677_p2 = (tempa_1_4_fu_667_p3 ^ reg_374);

assign xor_ln220_fu_694_p2 = (tempa_2_4_fu_661_p3 ^ RoundKey_q0);

assign xor_ln221_fu_700_p2 = (tempa_3_4_fu_655_p3 ^ RoundKey_q1);

assign zext_ln160_fu_403_p1 = shl_ln_fu_395_p3;

assign zext_ln161_fu_414_p1 = or_ln161_fu_408_p2;

assign zext_ln162_fu_424_p1 = or_ln162_fu_419_p2;

assign zext_ln163_fu_434_p1 = or_ln163_fu_429_p2;

assign zext_ln171_fu_459_p1 = add_ln171_fu_453_p2;

assign zext_ln172_fu_470_p1 = add_ln172_fu_464_p2;

assign zext_ln173_fu_512_p1 = add_ln173_fu_507_p2;

assign zext_ln174_fu_522_p1 = add_ln174_fu_517_p2;

assign zext_ln197_fu_527_p1 = RoundKey_q1;

assign zext_ln198_fu_536_p1 = RoundKey_q0;

assign zext_ln199_fu_541_p1 = RoundKey_q1;

assign zext_ln200_fu_546_p1 = reg_374;

assign zext_ln203_fu_532_p1 = lshr_ln_reg_815;

assign zext_ln210_fu_564_p1 = tempa_0_2_fu_557_p3;

assign zext_ln211_fu_608_p1 = tempa_1_2_fu_602_p3;

assign zext_ln212_fu_613_p1 = tempa_2_2_fu_595_p3;

assign zext_ln213_fu_618_p1 = tempa_3_2_fu_589_p3;

assign zext_ln218_1_fu_673_p1 = j_reg_783;

assign zext_ln218_fu_574_p1 = add_ln218_fu_569_p2;

assign zext_ln219_1_fu_689_p1 = or_ln219_fu_684_p2;

assign zext_ln219_fu_584_p1 = add_ln219_fu_579_p2;

assign zext_ln220_1_fu_711_p1 = or_ln220_fu_706_p2;

assign zext_ln220_fu_640_p1 = add_ln220_fu_635_p2;

assign zext_ln221_1_fu_721_p1 = or_ln221_fu_716_p2;

assign zext_ln221_fu_650_p1 = add_ln221_fu_645_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_734[1:0] <= 2'b00;
    zext_ln160_reg_740[1:0] <= 2'b00;
    zext_ln160_reg_740[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln161_reg_750[1:0] <= 2'b01;
    zext_ln161_reg_750[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln162_reg_760[1:0] <= 2'b10;
    zext_ln162_reg_760[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln163_reg_770[1:0] <= 2'b11;
    zext_ln163_reg_770[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_reg_783[1:0] <= 2'b00;
end

endmodule //KeyExpansion
