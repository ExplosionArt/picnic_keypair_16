// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LowMCEnc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        plaintext_address0,
        plaintext_ce0,
        plaintext_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        key_address0,
        key_ce0,
        key_q0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] plaintext_address0;
output   plaintext_ce0;
input  [31:0] plaintext_q0;
output  [2:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [2:0] key_address0;
output   key_ce0;
input  [31:0] key_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg plaintext_ce0;
reg[2:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;
reg key_ce0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] temp_matrix3_address0;
reg    temp_matrix3_ce0;
wire   [31:0] temp_matrix3_q0;
wire   [7:0] temp_q0;
reg   [7:0] reg_363;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire   [2:0] loop_fu_373_p2;
reg   [2:0] loop_reg_827;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln163_fu_379_p1;
reg   [63:0] zext_ln163_reg_832;
wire   [0:0] icmp_ln162_fu_367_p2;
wire   [2:0] i_5_fu_390_p2;
reg   [2:0] i_5_reg_845;
wire    ap_CS_fsm_state5;
reg   [2:0] output_addr_2_reg_850;
wire   [0:0] icmp_ln108_fu_384_p2;
wire   [13:0] shl_ln_fu_408_p3;
reg   [13:0] shl_ln_reg_883;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln177_fu_402_p2;
wire   [2:0] loop_7_fu_423_p2;
reg   [2:0] loop_7_reg_892;
wire    ap_CS_fsm_state9;
reg   [6:0] temp_addr_7_reg_900;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln185_fu_454_p2;
wire   [2:0] trunc_ln185_fu_481_p1;
reg   [2:0] trunc_ln185_reg_906;
reg   [6:0] temp_addr_8_reg_913;
reg   [6:0] temp_addr_9_reg_919;
wire   [4:0] add_ln185_fu_521_p2;
reg   [4:0] add_ln185_reg_925;
wire   [0:0] a_fu_542_p1;
reg   [0:0] a_reg_930;
wire    ap_CS_fsm_state13;
wire   [7:0] zext_ln54_3_fu_551_p1;
reg   [7:0] zext_ln54_3_reg_937;
wire   [0:0] b_fu_561_p1;
reg   [0:0] b_reg_943;
wire   [7:0] zext_ln54_5_fu_570_p1;
reg   [7:0] zext_ln54_5_reg_949;
wire   [0:0] c_fu_580_p1;
reg   [0:0] c_reg_955;
wire   [0:0] xor_ln195_fu_635_p2;
reg   [0:0] xor_ln195_reg_961;
wire    ap_CS_fsm_state15;
wire   [7:0] temp_q1;
reg   [7:0] temp_load_1_reg_966;
wire   [13:0] add_ln214_fu_737_p2;
reg   [13:0] add_ln214_reg_971;
wire    ap_CS_fsm_state20;
wire   [6:0] add_ln215_fu_751_p2;
reg   [6:0] add_ln215_reg_976;
wire    ap_CS_fsm_state21;
wire    grp_matrix_mul_fu_336_ap_ready;
wire    grp_matrix_mul_fu_336_ap_done;
wire   [2:0] i_fu_763_p2;
reg   [2:0] i_reg_984;
wire    ap_CS_fsm_state22;
reg   [2:0] output_addr_3_reg_989;
wire   [0:0] icmp_ln108_1_fu_757_p2;
wire   [2:0] i_6_fu_801_p2;
reg   [2:0] i_6_reg_1002;
wire    ap_CS_fsm_state24;
reg   [2:0] output_addr_4_reg_1007;
wire   [0:0] icmp_ln108_2_fu_795_p2;
wire   [4:0] r_fu_813_p2;
reg   [3:0] roundKey_address0;
reg    roundKey_ce0;
reg    roundKey_we0;
wire   [31:0] roundKey_q0;
reg   [6:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
reg   [7:0] temp_d0;
reg   [6:0] temp_address1;
reg    temp_ce1;
reg    temp_we1;
wire   [7:0] temp_d1;
wire    grp_matrix_mul_fu_336_ap_start;
wire    grp_matrix_mul_fu_336_ap_idle;
wire   [2:0] grp_matrix_mul_fu_336_output_r_address0;
wire    grp_matrix_mul_fu_336_output_r_ce0;
wire    grp_matrix_mul_fu_336_output_r_we0;
wire   [31:0] grp_matrix_mul_fu_336_output_r_d0;
wire    grp_matrix_mul_1_fu_345_ap_start;
wire    grp_matrix_mul_1_fu_345_ap_done;
wire    grp_matrix_mul_1_fu_345_ap_idle;
wire    grp_matrix_mul_1_fu_345_ap_ready;
wire   [3:0] grp_matrix_mul_1_fu_345_output_r_address0;
wire    grp_matrix_mul_1_fu_345_output_r_ce0;
wire    grp_matrix_mul_1_fu_345_output_r_we0;
wire   [31:0] grp_matrix_mul_1_fu_345_output_r_d0;
wire   [2:0] grp_matrix_mul_1_fu_345_state_address0;
wire    grp_matrix_mul_1_fu_345_state_ce0;
reg   [13:0] grp_matrix_mul_1_fu_345_matrix_offset;
reg   [2:0] loop_0_reg_256;
wire    ap_CS_fsm_state3;
reg   [2:0] i_0_i_reg_267;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg   [4:0] r_0_reg_278;
reg   [2:0] loop_1_reg_290;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
reg   [4:0] bitNumber_assign_2_reg_302;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln181_fu_417_p2;
reg   [2:0] i_0_i49_reg_314;
wire    ap_CS_fsm_state23;
reg   [2:0] i_0_i56_reg_325;
wire    ap_CS_fsm_state25;
reg    grp_matrix_mul_fu_336_ap_start_reg;
reg    grp_matrix_mul_1_fu_345_ap_start_reg;
wire   [63:0] zext_ln109_fu_396_p1;
wire   [63:0] zext_ln182_fu_434_p1;
wire   [63:0] zext_ln54_fu_476_p1;
wire   [63:0] zext_ln54_2_fu_501_p1;
wire   [63:0] zext_ln54_4_fu_516_p1;
wire   [63:0] zext_ln109_1_fu_769_p1;
wire   [63:0] zext_ln109_4_fu_783_p1;
wire   [63:0] zext_ln109_2_fu_807_p1;
wire   [31:0] grp_fu_356_p2;
wire   [31:0] zext_ln183_fu_449_p1;
wire    ap_CS_fsm_state19;
wire   [31:0] or_ln210_2_fu_725_p5;
wire   [31:0] xor_ln109_1_fu_788_p2;
wire   [7:0] trunc_ln182_fu_429_p1;
wire    ap_CS_fsm_state14;
wire   [7:0] or_ln66_1_fu_671_p2;
wire    ap_CS_fsm_state16;
wire   [7:0] or_ln66_2_fu_718_p2;
wire   [23:0] lshr_ln_fu_439_p4;
wire   [4:0] add_ln190_fu_460_p2;
wire   [1:0] lshr_ln7_fu_466_p4;
wire   [4:0] add_ln191_fu_485_p2;
wire   [1:0] lshr_ln54_2_fu_491_p4;
wire   [1:0] lshr_ln54_4_fu_506_p4;
wire   [2:0] sub_ln54_fu_527_p2;
wire   [7:0] zext_ln54_1_fu_532_p1;
wire   [7:0] lshr_ln54_fu_536_p2;
wire   [2:0] sub_ln54_1_fu_546_p2;
wire   [7:0] lshr_ln54_1_fu_555_p2;
wire   [2:0] xor_ln54_fu_565_p2;
wire   [7:0] lshr_ln54_3_fu_574_p2;
wire   [0:0] and_ln194_fu_584_p2;
wire   [0:0] xor_ln194_fu_590_p2;
wire   [7:0] shl_ln66_fu_600_p2;
wire   [7:0] zext_ln194_fu_596_p1;
wire   [7:0] xor_ln66_fu_606_p2;
wire   [7:0] and_ln66_fu_618_p2;
wire   [7:0] shl_ln66_3_fu_612_p2;
wire   [0:0] and_ln195_fu_631_p2;
wire   [0:0] xor_ln195_1_fu_639_p2;
wire   [7:0] shl_ln66_4_fu_649_p2;
wire   [7:0] zext_ln195_fu_645_p1;
wire   [7:0] xor_ln66_3_fu_654_p2;
wire   [7:0] and_ln66_1_fu_665_p2;
wire   [7:0] shl_ln66_5_fu_660_p2;
wire   [0:0] xor_ln196_fu_682_p2;
wire   [0:0] and_ln196_fu_678_p2;
wire   [0:0] xor_ln196_1_fu_686_p2;
wire   [7:0] shl_ln66_6_fu_696_p2;
wire   [7:0] zext_ln196_fu_692_p1;
wire   [7:0] xor_ln66_4_fu_701_p2;
wire   [7:0] and_ln66_2_fu_712_p2;
wire   [7:0] shl_ln66_7_fu_707_p2;
wire   [6:0] shl_ln1_fu_743_p3;
wire   [6:0] zext_ln109_3_fu_774_p1;
wire   [6:0] add_ln109_fu_778_p2;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 grp_matrix_mul_fu_336_ap_start_reg = 1'b0;
#0 grp_matrix_mul_1_fu_345_ap_start_reg = 1'b0;
end

LowMCEnc_temp_matg8j #(
    .DataWidth( 32 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
temp_matrix3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_matrix3_address0),
    .ce0(temp_matrix3_ce0),
    .q0(temp_matrix3_q0)
);

LowMCEnc_roundKey #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
roundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(roundKey_address0),
    .ce0(roundKey_ce0),
    .we0(roundKey_we0),
    .d0(grp_matrix_mul_1_fu_345_output_r_d0),
    .q0(roundKey_q0)
);

LowMCEnc_temp #(
    .DataWidth( 8 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0),
    .address1(temp_address1),
    .ce1(temp_ce1),
    .we1(temp_we1),
    .d1(temp_d1),
    .q1(temp_q1)
);

matrix_mul grp_matrix_mul_fu_336(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrix_mul_fu_336_ap_start),
    .ap_done(grp_matrix_mul_fu_336_ap_done),
    .ap_idle(grp_matrix_mul_fu_336_ap_idle),
    .ap_ready(grp_matrix_mul_fu_336_ap_ready),
    .output_r_address0(grp_matrix_mul_fu_336_output_r_address0),
    .output_r_ce0(grp_matrix_mul_fu_336_output_r_ce0),
    .output_r_we0(grp_matrix_mul_fu_336_output_r_we0),
    .output_r_d0(grp_matrix_mul_fu_336_output_r_d0),
    .output_r_q0(output_r_q0),
    .matrix_offset(add_ln214_reg_971)
);

matrix_mul_1 grp_matrix_mul_1_fu_345(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrix_mul_1_fu_345_ap_start),
    .ap_done(grp_matrix_mul_1_fu_345_ap_done),
    .ap_idle(grp_matrix_mul_1_fu_345_ap_idle),
    .ap_ready(grp_matrix_mul_1_fu_345_ap_ready),
    .output_r_address0(grp_matrix_mul_1_fu_345_output_r_address0),
    .output_r_ce0(grp_matrix_mul_1_fu_345_output_r_ce0),
    .output_r_we0(grp_matrix_mul_1_fu_345_output_r_we0),
    .output_r_d0(grp_matrix_mul_1_fu_345_output_r_d0),
    .state_address0(grp_matrix_mul_1_fu_345_state_address0),
    .state_ce0(grp_matrix_mul_1_fu_345_state_ce0),
    .state_q0(key_q0),
    .matrix_offset(grp_matrix_mul_1_fu_345_matrix_offset)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrix_mul_1_fu_345_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln162_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln177_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
            grp_matrix_mul_1_fu_345_ap_start_reg <= 1'b1;
        end else if ((grp_matrix_mul_1_fu_345_ap_ready == 1'b1)) begin
            grp_matrix_mul_1_fu_345_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrix_mul_fu_336_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            grp_matrix_mul_fu_336_ap_start_reg <= 1'b1;
        end else if ((grp_matrix_mul_fu_336_ap_ready == 1'b1)) begin
            grp_matrix_mul_fu_336_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln181_fu_417_p2 == 1'd1))) begin
        bitNumber_assign_2_reg_302 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        bitNumber_assign_2_reg_302 <= add_ln185_reg_925;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_0_i49_reg_314 <= i_reg_984;
    end else if (((grp_matrix_mul_fu_336_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        i_0_i49_reg_314 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln108_1_fu_757_p2 == 1'd1))) begin
        i_0_i56_reg_325 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i_0_i56_reg_325 <= i_6_reg_1002;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_267 <= i_5_reg_845;
    end else if (((grp_matrix_mul_1_fu_345_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_i_reg_267 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        loop_0_reg_256 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        loop_0_reg_256 <= loop_reg_827;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        loop_1_reg_290 <= loop_7_reg_892;
    end else if (((grp_matrix_mul_1_fu_345_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        loop_1_reg_290 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln108_2_fu_795_p2 == 1'd1))) begin
        r_0_reg_278 <= r_fu_813_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln108_fu_384_p2 == 1'd1))) begin
        r_0_reg_278 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        a_reg_930 <= a_fu_542_p1;
        b_reg_943 <= b_fu_561_p1;
        c_reg_955 <= c_fu_580_p1;
        zext_ln54_3_reg_937[2 : 0] <= zext_ln54_3_fu_551_p1[2 : 0];
        zext_ln54_5_reg_949[2 : 0] <= zext_ln54_5_fu_570_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln185_reg_925 <= add_ln185_fu_521_p2;
        temp_addr_8_reg_913[1 : 0] <= zext_ln54_2_fu_501_p1[1 : 0];
        temp_addr_9_reg_919[1 : 0] <= zext_ln54_4_fu_516_p1[1 : 0];
        trunc_ln185_reg_906 <= trunc_ln185_fu_481_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln214_reg_971[13 : 9] <= add_ln214_fu_737_p2[13 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_matrix_mul_fu_336_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        add_ln215_reg_976[6 : 2] <= add_ln215_fu_751_p2[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_5_reg_845 <= i_5_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_6_reg_1002 <= i_6_fu_801_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_reg_984 <= i_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        loop_7_reg_892 <= loop_7_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        loop_reg_827 <= loop_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_384_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_addr_2_reg_850 <= zext_ln109_fu_396_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_1_fu_757_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        output_addr_3_reg_989 <= zext_ln109_1_fu_769_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_2_fu_795_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        output_addr_4_reg_1007 <= zext_ln109_2_fu_807_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_363 <= temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        shl_ln_reg_883[13 : 9] <= shl_ln_fu_408_p3[13 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln185_fu_454_p2 == 1'd1))) begin
        temp_addr_7_reg_900[1 : 0] <= zext_ln54_fu_476_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_load_1_reg_966 <= temp_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        xor_ln195_reg_961 <= xor_ln195_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln162_fu_367_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln163_reg_832[2 : 0] <= zext_ln163_fu_379_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln177_fu_402_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln177_fu_402_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_matrix_mul_1_fu_345_matrix_offset = shl_ln_reg_883;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_matrix_mul_1_fu_345_matrix_offset = 14'd0;
    end else begin
        grp_matrix_mul_1_fu_345_matrix_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        key_ce0 = grp_matrix_mul_1_fu_345_state_ce0;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_address0 = output_addr_4_reg_1007;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_address0 = zext_ln109_2_fu_807_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_address0 = output_addr_3_reg_989;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_address0 = zext_ln109_1_fu_769_p1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        output_r_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = output_addr_2_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = zext_ln109_fu_396_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = zext_ln163_reg_832;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_address0 = grp_matrix_mul_fu_336_output_r_address0;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        output_r_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_ce0 = grp_matrix_mul_fu_336_output_r_ce0;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_d0 = xor_ln109_1_fu_788_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_r_d0 = or_ln210_2_fu_725_p5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_d0 = zext_ln183_fu_449_p1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_d0 = grp_fu_356_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_d0 = plaintext_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_d0 = grp_matrix_mul_fu_336_output_r_d0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_r_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_we0 = grp_matrix_mul_fu_336_output_r_we0;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        plaintext_ce0 = 1'b1;
    end else begin
        plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        roundKey_address0 = zext_ln109_2_fu_807_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        roundKey_address0 = zext_ln109_fu_396_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        roundKey_address0 = grp_matrix_mul_1_fu_345_output_r_address0;
    end else begin
        roundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state5))) begin
        roundKey_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        roundKey_ce0 = grp_matrix_mul_1_fu_345_output_r_ce0;
    end else begin
        roundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        roundKey_we0 = grp_matrix_mul_1_fu_345_output_r_we0;
    end else begin
        roundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_address0 = temp_addr_9_reg_919;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        temp_address0 = temp_addr_8_reg_913;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_address0 = zext_ln54_4_fu_516_p1;
    end else if (((icmp_ln185_fu_454_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        temp_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln185_fu_454_p2 == 1'd1))) begin
        temp_address0 = zext_ln54_fu_476_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_address0 = zext_ln182_fu_434_p1;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_address1 = temp_addr_9_reg_919;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        temp_address1 = temp_addr_8_reg_913;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        temp_address1 = temp_addr_7_reg_900;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_address1 = zext_ln54_2_fu_501_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_address1 = 64'd1;
    end else begin
        temp_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state15) | ((icmp_ln185_fu_454_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln185_fu_454_p2 == 1'd1)))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11))) begin
        temp_ce1 = 1'b1;
    end else begin
        temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_d0 = or_ln66_2_fu_718_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        temp_d0 = or_ln66_1_fu_671_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_d0 = trunc_ln182_fu_429_p1;
    end else begin
        temp_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_matrix3_ce0 = 1'b1;
    end else begin
        temp_matrix3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state15))) begin
        temp_we0 = 1'b1;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temp_we1 = 1'b1;
    end else begin
        temp_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln162_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_matrix_mul_1_fu_345_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln108_fu_384_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln177_fu_402_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((grp_matrix_mul_1_fu_345_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln181_fu_417_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln185_fu_454_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_matrix_mul_fu_336_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln108_1_fu_757_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln108_2_fu_795_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_542_p1 = lshr_ln54_fu_536_p2[0:0];

assign add_ln109_fu_778_p2 = (zext_ln109_3_fu_774_p1 + add_ln215_reg_976);

assign add_ln185_fu_521_p2 = (5'd3 + bitNumber_assign_2_reg_302);

assign add_ln190_fu_460_p2 = (5'd2 + bitNumber_assign_2_reg_302);

assign add_ln191_fu_485_p2 = (5'd1 + bitNumber_assign_2_reg_302);

assign add_ln214_fu_737_p2 = ($signed(shl_ln_reg_883) + $signed(14'd15872));

assign add_ln215_fu_751_p2 = ($signed(shl_ln1_fu_743_p3) + $signed(7'd124));

assign and_ln194_fu_584_p2 = (c_fu_580_p1 & b_fu_561_p1);

assign and_ln195_fu_631_p2 = (c_reg_955 & a_reg_930);

assign and_ln196_fu_678_p2 = (b_reg_943 & a_reg_930);

assign and_ln66_1_fu_665_p2 = (xor_ln66_3_fu_654_p2 & temp_q1);

assign and_ln66_2_fu_712_p2 = (xor_ln66_4_fu_701_p2 & temp_q1);

assign and_ln66_fu_618_p2 = (xor_ln66_fu_606_p2 & reg_363);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_fu_561_p1 = lshr_ln54_1_fu_555_p2[0:0];

assign c_fu_580_p1 = lshr_ln54_3_fu_574_p2[0:0];

assign grp_fu_356_p2 = (roundKey_q0 ^ output_r_q0);

assign grp_matrix_mul_1_fu_345_ap_start = grp_matrix_mul_1_fu_345_ap_start_reg;

assign grp_matrix_mul_fu_336_ap_start = grp_matrix_mul_fu_336_ap_start_reg;

assign i_5_fu_390_p2 = (i_0_i_reg_267 + 3'd1);

assign i_6_fu_801_p2 = (i_0_i56_reg_325 + 3'd1);

assign i_fu_763_p2 = (i_0_i49_reg_314 + 3'd1);

assign icmp_ln108_1_fu_757_p2 = ((i_0_i49_reg_314 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln108_2_fu_795_p2 = ((i_0_i56_reg_325 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_384_p2 = ((i_0_i_reg_267 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln162_fu_367_p2 = ((loop_0_reg_256 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_402_p2 = ((r_0_reg_278 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln181_fu_417_p2 = ((loop_1_reg_290 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_454_p2 = ((bitNumber_assign_2_reg_302 < 5'd30) ? 1'b1 : 1'b0);

assign key_address0 = grp_matrix_mul_1_fu_345_state_address0;

assign loop_7_fu_423_p2 = (loop_1_reg_290 + 3'd1);

assign loop_fu_373_p2 = (loop_0_reg_256 + 3'd1);

assign lshr_ln54_1_fu_555_p2 = temp_q1 >> zext_ln54_3_fu_551_p1;

assign lshr_ln54_2_fu_491_p4 = {{add_ln191_fu_485_p2[4:3]}};

assign lshr_ln54_3_fu_574_p2 = temp_q0 >> zext_ln54_5_fu_570_p1;

assign lshr_ln54_4_fu_506_p4 = {{bitNumber_assign_2_reg_302[4:3]}};

assign lshr_ln54_fu_536_p2 = reg_363 >> zext_ln54_1_fu_532_p1;

assign lshr_ln7_fu_466_p4 = {{add_ln190_fu_460_p2[4:3]}};

assign lshr_ln_fu_439_p4 = {{output_r_q0[31:8]}};

assign or_ln210_2_fu_725_p5 = {{{{temp_q0}, {temp_q1}}, {temp_load_1_reg_966}}, {reg_363}};

assign or_ln66_1_fu_671_p2 = (shl_ln66_5_fu_660_p2 | and_ln66_1_fu_665_p2);

assign or_ln66_2_fu_718_p2 = (shl_ln66_7_fu_707_p2 | and_ln66_2_fu_712_p2);

assign plaintext_address0 = zext_ln163_fu_379_p1;

assign r_fu_813_p2 = (r_0_reg_278 + 5'd1);

assign shl_ln1_fu_743_p3 = {{r_0_reg_278}, {2'd0}};

assign shl_ln66_3_fu_612_p2 = zext_ln194_fu_596_p1 << zext_ln54_1_fu_532_p1;

assign shl_ln66_4_fu_649_p2 = 8'd1 << zext_ln54_3_reg_937;

assign shl_ln66_5_fu_660_p2 = zext_ln195_fu_645_p1 << zext_ln54_3_reg_937;

assign shl_ln66_6_fu_696_p2 = 8'd1 << zext_ln54_5_reg_949;

assign shl_ln66_7_fu_707_p2 = zext_ln196_fu_692_p1 << zext_ln54_5_reg_949;

assign shl_ln66_fu_600_p2 = 8'd1 << zext_ln54_1_fu_532_p1;

assign shl_ln_fu_408_p3 = {{r_0_reg_278}, {9'd0}};

assign sub_ln54_1_fu_546_p2 = ($signed(3'd6) - $signed(trunc_ln185_reg_906));

assign sub_ln54_fu_527_p2 = ($signed(3'd5) - $signed(trunc_ln185_reg_906));

assign temp_d1 = (shl_ln66_3_fu_612_p2 | and_ln66_fu_618_p2);

assign temp_matrix3_address0 = zext_ln109_4_fu_783_p1;

assign trunc_ln182_fu_429_p1 = output_r_q0[7:0];

assign trunc_ln185_fu_481_p1 = bitNumber_assign_2_reg_302[2:0];

assign xor_ln109_1_fu_788_p2 = (temp_matrix3_q0 ^ output_r_q0);

assign xor_ln194_fu_590_p2 = (and_ln194_fu_584_p2 ^ a_fu_542_p1);

assign xor_ln195_1_fu_639_p2 = (xor_ln195_fu_635_p2 ^ and_ln195_fu_631_p2);

assign xor_ln195_fu_635_p2 = (b_reg_943 ^ a_reg_930);

assign xor_ln196_1_fu_686_p2 = (xor_ln196_fu_682_p2 ^ and_ln196_fu_678_p2);

assign xor_ln196_fu_682_p2 = (xor_ln195_reg_961 ^ c_reg_955);

assign xor_ln54_fu_565_p2 = (trunc_ln185_reg_906 ^ 3'd7);

assign xor_ln66_3_fu_654_p2 = (shl_ln66_4_fu_649_p2 ^ 8'd255);

assign xor_ln66_4_fu_701_p2 = (shl_ln66_6_fu_696_p2 ^ 8'd255);

assign xor_ln66_fu_606_p2 = (shl_ln66_fu_600_p2 ^ 8'd255);

assign zext_ln109_1_fu_769_p1 = i_0_i49_reg_314;

assign zext_ln109_2_fu_807_p1 = i_0_i56_reg_325;

assign zext_ln109_3_fu_774_p1 = i_0_i49_reg_314;

assign zext_ln109_4_fu_783_p1 = add_ln109_fu_778_p2;

assign zext_ln109_fu_396_p1 = i_0_i_reg_267;

assign zext_ln163_fu_379_p1 = loop_0_reg_256;

assign zext_ln182_fu_434_p1 = loop_1_reg_290;

assign zext_ln183_fu_449_p1 = lshr_ln_fu_439_p4;

assign zext_ln194_fu_596_p1 = xor_ln194_fu_590_p2;

assign zext_ln195_fu_645_p1 = xor_ln195_1_fu_639_p2;

assign zext_ln196_fu_692_p1 = xor_ln196_1_fu_686_p2;

assign zext_ln54_1_fu_532_p1 = sub_ln54_fu_527_p2;

assign zext_ln54_2_fu_501_p1 = lshr_ln54_2_fu_491_p4;

assign zext_ln54_3_fu_551_p1 = sub_ln54_1_fu_546_p2;

assign zext_ln54_4_fu_516_p1 = lshr_ln54_4_fu_506_p4;

assign zext_ln54_5_fu_570_p1 = xor_ln54_fu_565_p2;

assign zext_ln54_fu_476_p1 = lshr_ln7_fu_466_p4;

always @ (posedge ap_clk) begin
    zext_ln163_reg_832[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_883[8:0] <= 9'b000000000;
    temp_addr_7_reg_900[6:2] <= 5'b00000;
    temp_addr_8_reg_913[6:2] <= 5'b00000;
    temp_addr_9_reg_919[6:2] <= 5'b00000;
    zext_ln54_3_reg_937[7:3] <= 5'b00000;
    zext_ln54_5_reg_949[7:3] <= 5'b00000;
    add_ln214_reg_971[8:0] <= 9'b000000000;
    add_ln215_reg_976[1:0] <= 2'b00;
end

endmodule //LowMCEnc
