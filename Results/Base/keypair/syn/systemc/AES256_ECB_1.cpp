// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AES256_ECB_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AES256_ECB_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AES256_ECB_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state1 = "1";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state2 = "10";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state3 = "100";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state4 = "1000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state5 = "10000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state6 = "100000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state7 = "1000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state8 = "10000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state9 = "100000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state10 = "1000000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state11 = "10000000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state12 = "100000000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<20> AES256_ECB_1::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_1 = "1";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_2 = "10";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_3 = "11";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_4 = "100";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_5 = "101";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_6 = "110";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_7 = "111";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_8 = "1000";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_9 = "1001";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_A = "1010";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_1 = "1";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_2 = "10";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_3 = "11";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_4 = "100";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_5 = "101";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_6 = "110";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_7 = "111";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_8 = "1000";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_9 = "1001";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_A = "1010";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_B = "1011";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_C = "1100";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_D = "1101";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_E = "1110";
const sc_lv<64> AES256_ECB_1::ap_const_lv64_F = "1111";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_C = "1100";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_D = "1101";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_E = "1110";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_F = "1111";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_10 = "10000";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_11 = "10001";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_12 = "10010";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_13 = "10011";
const sc_lv<32> AES256_ECB_1::ap_const_lv32_B = "1011";
const bool AES256_ECB_1::ap_const_boolean_1 = true;

AES256_ECB_1::AES256_ECB_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ctx_RoundKey_U = new AES256_ECB_1_ctx_bkb("ctx_RoundKey_U");
    ctx_RoundKey_U->clk(ap_clk);
    ctx_RoundKey_U->reset(ap_rst);
    ctx_RoundKey_U->address0(ctx_RoundKey_address0);
    ctx_RoundKey_U->ce0(ctx_RoundKey_ce0);
    ctx_RoundKey_U->we0(ctx_RoundKey_we0);
    ctx_RoundKey_U->d0(grp_KeyExpansion_fu_501_RoundKey_d0);
    ctx_RoundKey_U->q0(ctx_RoundKey_q0);
    ctx_RoundKey_U->address1(grp_KeyExpansion_fu_501_RoundKey_address1);
    ctx_RoundKey_U->ce1(ctx_RoundKey_ce1);
    ctx_RoundKey_U->we1(ctx_RoundKey_we1);
    ctx_RoundKey_U->d1(grp_KeyExpansion_fu_501_RoundKey_d1);
    ctx_RoundKey_U->q1(ctx_RoundKey_q1);
    test_U = new AES256_ECB_1_test("test_U");
    test_U->clk(ap_clk);
    test_U->reset(ap_rst);
    test_U->address0(test_address0);
    test_U->ce0(test_ce0);
    test_U->we0(test_we0);
    test_U->d0(test_d0);
    test_U->q0(test_q0);
    test_U->address1(test_address1);
    test_U->ce1(test_ce1);
    test_U->we1(test_we1);
    test_U->d1(test_d1);
    test_U->q1(test_q1);
    grp_KeyExpansion_fu_501 = new KeyExpansion("grp_KeyExpansion_fu_501");
    grp_KeyExpansion_fu_501->ap_clk(ap_clk);
    grp_KeyExpansion_fu_501->ap_rst(ap_rst);
    grp_KeyExpansion_fu_501->ap_start(grp_KeyExpansion_fu_501_ap_start);
    grp_KeyExpansion_fu_501->ap_done(grp_KeyExpansion_fu_501_ap_done);
    grp_KeyExpansion_fu_501->ap_idle(grp_KeyExpansion_fu_501_ap_idle);
    grp_KeyExpansion_fu_501->ap_ready(grp_KeyExpansion_fu_501_ap_ready);
    grp_KeyExpansion_fu_501->RoundKey_address0(grp_KeyExpansion_fu_501_RoundKey_address0);
    grp_KeyExpansion_fu_501->RoundKey_ce0(grp_KeyExpansion_fu_501_RoundKey_ce0);
    grp_KeyExpansion_fu_501->RoundKey_we0(grp_KeyExpansion_fu_501_RoundKey_we0);
    grp_KeyExpansion_fu_501->RoundKey_d0(grp_KeyExpansion_fu_501_RoundKey_d0);
    grp_KeyExpansion_fu_501->RoundKey_q0(ctx_RoundKey_q0);
    grp_KeyExpansion_fu_501->RoundKey_address1(grp_KeyExpansion_fu_501_RoundKey_address1);
    grp_KeyExpansion_fu_501->RoundKey_ce1(grp_KeyExpansion_fu_501_RoundKey_ce1);
    grp_KeyExpansion_fu_501->RoundKey_we1(grp_KeyExpansion_fu_501_RoundKey_we1);
    grp_KeyExpansion_fu_501->RoundKey_d1(grp_KeyExpansion_fu_501_RoundKey_d1);
    grp_KeyExpansion_fu_501->RoundKey_q1(ctx_RoundKey_q1);
    grp_KeyExpansion_fu_501->Key_address0(grp_KeyExpansion_fu_501_Key_address0);
    grp_KeyExpansion_fu_501->Key_ce0(grp_KeyExpansion_fu_501_Key_ce0);
    grp_KeyExpansion_fu_501->Key_q0(key_q0);
    grp_KeyExpansion_fu_501->Key_address1(grp_KeyExpansion_fu_501_Key_address1);
    grp_KeyExpansion_fu_501->Key_ce1(grp_KeyExpansion_fu_501_Key_ce1);
    grp_KeyExpansion_fu_501->Key_q1(key_q1);
    grp_Cipher_fu_512 = new Cipher("grp_Cipher_fu_512");
    grp_Cipher_fu_512->ap_clk(ap_clk);
    grp_Cipher_fu_512->ap_rst(ap_rst);
    grp_Cipher_fu_512->ap_start(grp_Cipher_fu_512_ap_start);
    grp_Cipher_fu_512->ap_done(grp_Cipher_fu_512_ap_done);
    grp_Cipher_fu_512->ap_idle(grp_Cipher_fu_512_ap_idle);
    grp_Cipher_fu_512->ap_ready(grp_Cipher_fu_512_ap_ready);
    grp_Cipher_fu_512->state_address0(grp_Cipher_fu_512_state_address0);
    grp_Cipher_fu_512->state_ce0(grp_Cipher_fu_512_state_ce0);
    grp_Cipher_fu_512->state_we0(grp_Cipher_fu_512_state_we0);
    grp_Cipher_fu_512->state_d0(grp_Cipher_fu_512_state_d0);
    grp_Cipher_fu_512->state_q0(test_q0);
    grp_Cipher_fu_512->state_address1(grp_Cipher_fu_512_state_address1);
    grp_Cipher_fu_512->state_ce1(grp_Cipher_fu_512_state_ce1);
    grp_Cipher_fu_512->state_we1(grp_Cipher_fu_512_state_we1);
    grp_Cipher_fu_512->state_d1(grp_Cipher_fu_512_state_d1);
    grp_Cipher_fu_512->state_q1(test_q1);
    grp_Cipher_fu_512->RoundKey_address0(grp_Cipher_fu_512_RoundKey_address0);
    grp_Cipher_fu_512->RoundKey_ce0(grp_Cipher_fu_512_RoundKey_ce0);
    grp_Cipher_fu_512->RoundKey_q0(ctx_RoundKey_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_buffer_r_address0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_buffer_r_address1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_buffer_r_ce0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_buffer_r_ce1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_buffer_r_d0);
    sensitive << ( test_q0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_buffer_r_d1);
    sensitive << ( test_q1 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_buffer_r_we0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_buffer_r_we1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_ctr_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctr_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctr_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctr_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ctx_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_RoundKey_address0 );
    sensitive << ( grp_Cipher_fu_512_RoundKey_address0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ctx_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_RoundKey_ce0 );
    sensitive << ( grp_Cipher_fu_512_RoundKey_ce0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ctx_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_RoundKey_ce1 );

    SC_METHOD(thread_ctx_RoundKey_we0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_RoundKey_we0 );

    SC_METHOD(thread_ctx_RoundKey_we1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_RoundKey_we1 );

    SC_METHOD(thread_grp_Cipher_fu_512_ap_start);
    sensitive << ( grp_Cipher_fu_512_ap_start_reg );

    SC_METHOD(thread_grp_KeyExpansion_fu_501_ap_start);
    sensitive << ( grp_KeyExpansion_fu_501_ap_start_reg );

    SC_METHOD(thread_key_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_Key_address0 );

    SC_METHOD(thread_key_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_Key_address1 );

    SC_METHOD(thread_key_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_Key_ce0 );

    SC_METHOD(thread_key_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_Key_ce1 );

    SC_METHOD(thread_test_addr_10_reg_630);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_test_addr_11_reg_635);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_test_addr_12_reg_650);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_test_addr_13_reg_655);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_test_addr_14_reg_670);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_ap_done );

    SC_METHOD(thread_test_addr_15_reg_675);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_ap_done );

    SC_METHOD(thread_test_addr_1_reg_535);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_test_addr_2_reg_550);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_test_addr_3_reg_555);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_test_addr_4_reg_570);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_test_addr_5_reg_575);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_test_addr_6_reg_590);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_test_addr_7_reg_595);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_test_addr_8_reg_610);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_test_addr_9_reg_615);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_test_addr_reg_530);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_test_address0);
    sensitive << ( test_addr_reg_530 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( test_addr_2_reg_550 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( test_addr_4_reg_570 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( test_addr_6_reg_590 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( test_addr_8_reg_610 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( test_addr_10_reg_630 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( test_addr_12_reg_650 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( test_addr_14_reg_670 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_Cipher_fu_512_state_address0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_test_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( test_addr_1_reg_535 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( test_addr_3_reg_555 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( test_addr_5_reg_575 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( test_addr_7_reg_595 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( test_addr_9_reg_615 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( test_addr_11_reg_635 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( test_addr_13_reg_655 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( test_addr_15_reg_675 );
    sensitive << ( grp_Cipher_fu_512_state_address1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_test_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_ap_done );
    sensitive << ( grp_Cipher_fu_512_state_ce0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_test_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_ap_done );
    sensitive << ( grp_Cipher_fu_512_state_ce1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_test_d0);
    sensitive << ( ctr_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_Cipher_fu_512_state_d0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_test_d1);
    sensitive << ( ctr_q1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_Cipher_fu_512_state_d1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_test_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_ap_done );
    sensitive << ( grp_Cipher_fu_512_state_we0 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_test_we1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_ap_done );
    sensitive << ( grp_Cipher_fu_512_state_we1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_KeyExpansion_fu_501_ap_done );
    sensitive << ( grp_Cipher_fu_512_ap_done );
    sensitive << ( ap_CS_fsm_state11 );

    ap_CS_fsm = "00000000000000000001";
    grp_KeyExpansion_fu_501_ap_start_reg = SC_LOGIC_0;
    grp_Cipher_fu_512_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AES256_ECB_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, key_address0, "(port)key_address0");
    sc_trace(mVcdFile, key_ce0, "(port)key_ce0");
    sc_trace(mVcdFile, key_q0, "(port)key_q0");
    sc_trace(mVcdFile, key_address1, "(port)key_address1");
    sc_trace(mVcdFile, key_ce1, "(port)key_ce1");
    sc_trace(mVcdFile, key_q1, "(port)key_q1");
    sc_trace(mVcdFile, ctr_address0, "(port)ctr_address0");
    sc_trace(mVcdFile, ctr_ce0, "(port)ctr_ce0");
    sc_trace(mVcdFile, ctr_q0, "(port)ctr_q0");
    sc_trace(mVcdFile, ctr_address1, "(port)ctr_address1");
    sc_trace(mVcdFile, ctr_ce1, "(port)ctr_ce1");
    sc_trace(mVcdFile, ctr_q1, "(port)ctr_q1");
    sc_trace(mVcdFile, buffer_r_address0, "(port)buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "(port)buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_we0, "(port)buffer_r_we0");
    sc_trace(mVcdFile, buffer_r_d0, "(port)buffer_r_d0");
    sc_trace(mVcdFile, buffer_r_address1, "(port)buffer_r_address1");
    sc_trace(mVcdFile, buffer_r_ce1, "(port)buffer_r_ce1");
    sc_trace(mVcdFile, buffer_r_we1, "(port)buffer_r_we1");
    sc_trace(mVcdFile, buffer_r_d1, "(port)buffer_r_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, test_addr_reg_530, "test_addr_reg_530");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, test_addr_1_reg_535, "test_addr_1_reg_535");
    sc_trace(mVcdFile, test_addr_2_reg_550, "test_addr_2_reg_550");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, test_addr_3_reg_555, "test_addr_3_reg_555");
    sc_trace(mVcdFile, test_addr_4_reg_570, "test_addr_4_reg_570");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, test_addr_5_reg_575, "test_addr_5_reg_575");
    sc_trace(mVcdFile, test_addr_6_reg_590, "test_addr_6_reg_590");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, test_addr_7_reg_595, "test_addr_7_reg_595");
    sc_trace(mVcdFile, test_addr_8_reg_610, "test_addr_8_reg_610");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, test_addr_9_reg_615, "test_addr_9_reg_615");
    sc_trace(mVcdFile, test_addr_10_reg_630, "test_addr_10_reg_630");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, test_addr_11_reg_635, "test_addr_11_reg_635");
    sc_trace(mVcdFile, test_addr_12_reg_650, "test_addr_12_reg_650");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, test_addr_13_reg_655, "test_addr_13_reg_655");
    sc_trace(mVcdFile, test_addr_14_reg_670, "test_addr_14_reg_670");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_ap_ready, "grp_KeyExpansion_fu_501_ap_ready");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_ap_done, "grp_KeyExpansion_fu_501_ap_done");
    sc_trace(mVcdFile, test_addr_15_reg_675, "test_addr_15_reg_675");
    sc_trace(mVcdFile, ctx_RoundKey_address0, "ctx_RoundKey_address0");
    sc_trace(mVcdFile, ctx_RoundKey_ce0, "ctx_RoundKey_ce0");
    sc_trace(mVcdFile, ctx_RoundKey_we0, "ctx_RoundKey_we0");
    sc_trace(mVcdFile, ctx_RoundKey_q0, "ctx_RoundKey_q0");
    sc_trace(mVcdFile, ctx_RoundKey_ce1, "ctx_RoundKey_ce1");
    sc_trace(mVcdFile, ctx_RoundKey_we1, "ctx_RoundKey_we1");
    sc_trace(mVcdFile, ctx_RoundKey_q1, "ctx_RoundKey_q1");
    sc_trace(mVcdFile, test_address0, "test_address0");
    sc_trace(mVcdFile, test_ce0, "test_ce0");
    sc_trace(mVcdFile, test_we0, "test_we0");
    sc_trace(mVcdFile, test_d0, "test_d0");
    sc_trace(mVcdFile, test_q0, "test_q0");
    sc_trace(mVcdFile, test_address1, "test_address1");
    sc_trace(mVcdFile, test_ce1, "test_ce1");
    sc_trace(mVcdFile, test_we1, "test_we1");
    sc_trace(mVcdFile, test_d1, "test_d1");
    sc_trace(mVcdFile, test_q1, "test_q1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_ap_start, "grp_KeyExpansion_fu_501_ap_start");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_ap_idle, "grp_KeyExpansion_fu_501_ap_idle");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_RoundKey_address0, "grp_KeyExpansion_fu_501_RoundKey_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_RoundKey_ce0, "grp_KeyExpansion_fu_501_RoundKey_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_RoundKey_we0, "grp_KeyExpansion_fu_501_RoundKey_we0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_RoundKey_d0, "grp_KeyExpansion_fu_501_RoundKey_d0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_RoundKey_address1, "grp_KeyExpansion_fu_501_RoundKey_address1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_RoundKey_ce1, "grp_KeyExpansion_fu_501_RoundKey_ce1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_RoundKey_we1, "grp_KeyExpansion_fu_501_RoundKey_we1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_RoundKey_d1, "grp_KeyExpansion_fu_501_RoundKey_d1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_Key_address0, "grp_KeyExpansion_fu_501_Key_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_Key_ce0, "grp_KeyExpansion_fu_501_Key_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_Key_address1, "grp_KeyExpansion_fu_501_Key_address1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_Key_ce1, "grp_KeyExpansion_fu_501_Key_ce1");
    sc_trace(mVcdFile, grp_Cipher_fu_512_ap_start, "grp_Cipher_fu_512_ap_start");
    sc_trace(mVcdFile, grp_Cipher_fu_512_ap_done, "grp_Cipher_fu_512_ap_done");
    sc_trace(mVcdFile, grp_Cipher_fu_512_ap_idle, "grp_Cipher_fu_512_ap_idle");
    sc_trace(mVcdFile, grp_Cipher_fu_512_ap_ready, "grp_Cipher_fu_512_ap_ready");
    sc_trace(mVcdFile, grp_Cipher_fu_512_state_address0, "grp_Cipher_fu_512_state_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_512_state_ce0, "grp_Cipher_fu_512_state_ce0");
    sc_trace(mVcdFile, grp_Cipher_fu_512_state_we0, "grp_Cipher_fu_512_state_we0");
    sc_trace(mVcdFile, grp_Cipher_fu_512_state_d0, "grp_Cipher_fu_512_state_d0");
    sc_trace(mVcdFile, grp_Cipher_fu_512_state_address1, "grp_Cipher_fu_512_state_address1");
    sc_trace(mVcdFile, grp_Cipher_fu_512_state_ce1, "grp_Cipher_fu_512_state_ce1");
    sc_trace(mVcdFile, grp_Cipher_fu_512_state_we1, "grp_Cipher_fu_512_state_we1");
    sc_trace(mVcdFile, grp_Cipher_fu_512_state_d1, "grp_Cipher_fu_512_state_d1");
    sc_trace(mVcdFile, grp_Cipher_fu_512_RoundKey_address0, "grp_Cipher_fu_512_RoundKey_address0");
    sc_trace(mVcdFile, grp_Cipher_fu_512_RoundKey_ce0, "grp_Cipher_fu_512_RoundKey_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_501_ap_start_reg, "grp_KeyExpansion_fu_501_ap_start_reg");
    sc_trace(mVcdFile, grp_Cipher_fu_512_ap_start_reg, "grp_Cipher_fu_512_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AES256_ECB_1::~AES256_ECB_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete ctx_RoundKey_U;
    delete test_U;
    delete grp_KeyExpansion_fu_501;
    delete grp_Cipher_fu_512;
}

void AES256_ECB_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_Cipher_fu_512_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
            grp_Cipher_fu_512_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Cipher_fu_512_ap_ready.read())) {
            grp_Cipher_fu_512_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_KeyExpansion_fu_501_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            grp_KeyExpansion_fu_501_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_KeyExpansion_fu_501_ap_ready.read())) {
            grp_KeyExpansion_fu_501_ap_start_reg = ap_const_logic_0;
        }
    }
}

void AES256_ECB_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AES256_ECB_1::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void AES256_ECB_1::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void AES256_ECB_1::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void AES256_ECB_1::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void AES256_ECB_1::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void AES256_ECB_1::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void AES256_ECB_1::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void AES256_ECB_1::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void AES256_ECB_1::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void AES256_ECB_1::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void AES256_ECB_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AES256_ECB_1::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void AES256_ECB_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AES256_ECB_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AES256_ECB_1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AES256_ECB_1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AES256_ECB_1::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AES256_ECB_1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AES256_ECB_1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AES256_ECB_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_buffer_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        buffer_r_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        buffer_r_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        buffer_r_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        buffer_r_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        buffer_r_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        buffer_r_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        buffer_r_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        buffer_r_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        buffer_r_address0 = "XXXX";
    }
}

void AES256_ECB_1::thread_buffer_r_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        buffer_r_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        buffer_r_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        buffer_r_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        buffer_r_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        buffer_r_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        buffer_r_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        buffer_r_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        buffer_r_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        buffer_r_address1 = "XXXX";
    }
}

void AES256_ECB_1::thread_buffer_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        buffer_r_ce0 = ap_const_logic_1;
    } else {
        buffer_r_ce0 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_buffer_r_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        buffer_r_ce1 = ap_const_logic_1;
    } else {
        buffer_r_ce1 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_buffer_r_d0() {
    buffer_r_d0 = test_q0.read();
}

void AES256_ECB_1::thread_buffer_r_d1() {
    buffer_r_d1 = test_q1.read();
}

void AES256_ECB_1::thread_buffer_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        buffer_r_we0 = ap_const_logic_1;
    } else {
        buffer_r_we0 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_buffer_r_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        buffer_r_we1 = ap_const_logic_1;
    } else {
        buffer_r_we1 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_ctr_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ctr_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctr_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctr_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ctr_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctr_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctr_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctr_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ctr_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        ctr_address0 = "XXXX";
    }
}

void AES256_ECB_1::thread_ctr_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ctr_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctr_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctr_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ctr_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctr_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctr_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctr_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        ctr_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        ctr_address1 = "XXXX";
    }
}

void AES256_ECB_1::thread_ctr_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ctr_ce0 = ap_const_logic_1;
    } else {
        ctr_ce0 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_ctr_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ctr_ce1 = ap_const_logic_1;
    } else {
        ctr_ce1 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_ctx_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ctx_RoundKey_address0 = grp_Cipher_fu_512_RoundKey_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_RoundKey_address0 = grp_KeyExpansion_fu_501_RoundKey_address0.read();
    } else {
        ctx_RoundKey_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES256_ECB_1::thread_ctx_RoundKey_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ctx_RoundKey_ce0 = grp_Cipher_fu_512_RoundKey_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_RoundKey_ce0 = grp_KeyExpansion_fu_501_RoundKey_ce0.read();
    } else {
        ctx_RoundKey_ce0 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_ctx_RoundKey_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_RoundKey_ce1 = grp_KeyExpansion_fu_501_RoundKey_ce1.read();
    } else {
        ctx_RoundKey_ce1 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_ctx_RoundKey_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_RoundKey_we0 = grp_KeyExpansion_fu_501_RoundKey_we0.read();
    } else {
        ctx_RoundKey_we0 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_ctx_RoundKey_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_RoundKey_we1 = grp_KeyExpansion_fu_501_RoundKey_we1.read();
    } else {
        ctx_RoundKey_we1 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_grp_Cipher_fu_512_ap_start() {
    grp_Cipher_fu_512_ap_start = grp_Cipher_fu_512_ap_start_reg.read();
}

void AES256_ECB_1::thread_grp_KeyExpansion_fu_501_ap_start() {
    grp_KeyExpansion_fu_501_ap_start = grp_KeyExpansion_fu_501_ap_start_reg.read();
}

void AES256_ECB_1::thread_key_address0() {
    key_address0 = grp_KeyExpansion_fu_501_Key_address0.read();
}

void AES256_ECB_1::thread_key_address1() {
    key_address1 = grp_KeyExpansion_fu_501_Key_address1.read();
}

void AES256_ECB_1::thread_key_ce0() {
    key_ce0 = grp_KeyExpansion_fu_501_Key_ce0.read();
}

void AES256_ECB_1::thread_key_ce1() {
    key_ce1 = grp_KeyExpansion_fu_501_Key_ce1.read();
}

void AES256_ECB_1::thread_test_addr_10_reg_630() {
    test_addr_10_reg_630 =  (sc_lv<4>) (ap_const_lv64_A);
}

void AES256_ECB_1::thread_test_addr_11_reg_635() {
    test_addr_11_reg_635 =  (sc_lv<4>) (ap_const_lv64_B);
}

void AES256_ECB_1::thread_test_addr_12_reg_650() {
    test_addr_12_reg_650 =  (sc_lv<4>) (ap_const_lv64_C);
}

void AES256_ECB_1::thread_test_addr_13_reg_655() {
    test_addr_13_reg_655 =  (sc_lv<4>) (ap_const_lv64_D);
}

void AES256_ECB_1::thread_test_addr_14_reg_670() {
    test_addr_14_reg_670 =  (sc_lv<4>) (ap_const_lv64_E);
}

void AES256_ECB_1::thread_test_addr_15_reg_675() {
    test_addr_15_reg_675 =  (sc_lv<4>) (ap_const_lv64_F);
}

void AES256_ECB_1::thread_test_addr_1_reg_535() {
    test_addr_1_reg_535 =  (sc_lv<4>) (ap_const_lv64_1);
}

void AES256_ECB_1::thread_test_addr_2_reg_550() {
    test_addr_2_reg_550 =  (sc_lv<4>) (ap_const_lv64_2);
}

void AES256_ECB_1::thread_test_addr_3_reg_555() {
    test_addr_3_reg_555 =  (sc_lv<4>) (ap_const_lv64_3);
}

void AES256_ECB_1::thread_test_addr_4_reg_570() {
    test_addr_4_reg_570 =  (sc_lv<4>) (ap_const_lv64_4);
}

void AES256_ECB_1::thread_test_addr_5_reg_575() {
    test_addr_5_reg_575 =  (sc_lv<4>) (ap_const_lv64_5);
}

void AES256_ECB_1::thread_test_addr_6_reg_590() {
    test_addr_6_reg_590 =  (sc_lv<4>) (ap_const_lv64_6);
}

void AES256_ECB_1::thread_test_addr_7_reg_595() {
    test_addr_7_reg_595 =  (sc_lv<4>) (ap_const_lv64_7);
}

void AES256_ECB_1::thread_test_addr_8_reg_610() {
    test_addr_8_reg_610 =  (sc_lv<4>) (ap_const_lv64_8);
}

void AES256_ECB_1::thread_test_addr_9_reg_615() {
    test_addr_9_reg_615 =  (sc_lv<4>) (ap_const_lv64_9);
}

void AES256_ECB_1::thread_test_addr_reg_530() {
    test_addr_reg_530 =  (sc_lv<4>) (ap_const_lv64_0);
}

void AES256_ECB_1::thread_test_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        test_address0 = test_addr_14_reg_670.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        test_address0 = test_addr_12_reg_650.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        test_address0 = test_addr_10_reg_630.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        test_address0 = test_addr_8_reg_610.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        test_address0 = test_addr_6_reg_590.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        test_address0 = test_addr_4_reg_570.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        test_address0 = test_addr_2_reg_550.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        test_address0 = test_addr_reg_530.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        test_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        test_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        test_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        test_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        test_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        test_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        test_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        test_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        test_address0 = grp_Cipher_fu_512_state_address0.read();
    } else {
        test_address0 = "XXXX";
    }
}

void AES256_ECB_1::thread_test_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        test_address1 = test_addr_15_reg_675.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        test_address1 = test_addr_13_reg_655.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        test_address1 = test_addr_11_reg_635.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        test_address1 = test_addr_9_reg_615.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        test_address1 = test_addr_7_reg_595.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        test_address1 = test_addr_5_reg_575.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        test_address1 = test_addr_3_reg_555.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        test_address1 = test_addr_1_reg_535.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        test_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        test_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        test_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        test_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        test_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        test_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        test_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        test_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        test_address1 = grp_Cipher_fu_512_state_address1.read();
    } else {
        test_address1 = "XXXX";
    }
}

void AES256_ECB_1::thread_test_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(grp_KeyExpansion_fu_501_ap_done.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        test_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        test_ce0 = grp_Cipher_fu_512_state_ce0.read();
    } else {
        test_ce0 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_test_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(grp_KeyExpansion_fu_501_ap_done.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        test_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        test_ce1 = grp_Cipher_fu_512_state_ce1.read();
    } else {
        test_ce1 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_test_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        test_d0 = ctr_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        test_d0 = grp_Cipher_fu_512_state_d0.read();
    } else {
        test_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES256_ECB_1::thread_test_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        test_d1 = ctr_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        test_d1 = grp_Cipher_fu_512_state_d1.read();
    } else {
        test_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES256_ECB_1::thread_test_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(grp_KeyExpansion_fu_501_ap_done.read(), ap_const_logic_1)))) {
        test_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        test_we0 = grp_Cipher_fu_512_state_we0.read();
    } else {
        test_we0 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_test_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(grp_KeyExpansion_fu_501_ap_done.read(), ap_const_logic_1)))) {
        test_we1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        test_we1 = grp_Cipher_fu_512_state_we1.read();
    } else {
        test_we1 = ap_const_logic_0;
    }
}

void AES256_ECB_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(grp_KeyExpansion_fu_501_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(grp_Cipher_fu_512_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<20>) ("XXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

