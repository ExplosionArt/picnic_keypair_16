// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "crypto_sign_keypair.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic crypto_sign_keypair::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic crypto_sign_keypair::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> crypto_sign_keypair::ap_ST_fsm_state1 = "1";
const sc_lv<10> crypto_sign_keypair::ap_ST_fsm_state2 = "10";
const sc_lv<10> crypto_sign_keypair::ap_ST_fsm_state3 = "100";
const sc_lv<10> crypto_sign_keypair::ap_ST_fsm_state4 = "1000";
const sc_lv<10> crypto_sign_keypair::ap_ST_fsm_state5 = "10000";
const sc_lv<10> crypto_sign_keypair::ap_ST_fsm_state6 = "100000";
const sc_lv<10> crypto_sign_keypair::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> crypto_sign_keypair::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> crypto_sign_keypair::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> crypto_sign_keypair::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> crypto_sign_keypair::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> crypto_sign_keypair::ap_const_lv32_1 = "1";
const sc_lv<32> crypto_sign_keypair::ap_const_lv32_2 = "10";
const sc_lv<1> crypto_sign_keypair::ap_const_lv1_0 = "0";
const sc_lv<32> crypto_sign_keypair::ap_const_lv32_4 = "100";
const sc_lv<32> crypto_sign_keypair::ap_const_lv32_6 = "110";
const sc_lv<32> crypto_sign_keypair::ap_const_lv32_7 = "111";
const sc_lv<5> crypto_sign_keypair::ap_const_lv5_0 = "00000";
const sc_lv<1> crypto_sign_keypair::ap_const_lv1_1 = "1";
const sc_lv<32> crypto_sign_keypair::ap_const_lv32_3 = "11";
const sc_lv<32> crypto_sign_keypair::ap_const_lv32_5 = "101";
const sc_lv<32> crypto_sign_keypair::ap_const_lv32_8 = "1000";
const sc_lv<64> crypto_sign_keypair::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<5> crypto_sign_keypair::ap_const_lv5_10 = "10000";
const sc_lv<5> crypto_sign_keypair::ap_const_lv5_1 = "1";
const sc_lv<6> crypto_sign_keypair::ap_const_lv6_11 = "10001";
const sc_lv<6> crypto_sign_keypair::ap_const_lv6_21 = "100001";
const sc_lv<32> crypto_sign_keypair::ap_const_lv32_9 = "1001";
const bool crypto_sign_keypair::ap_const_boolean_1 = true;

crypto_sign_keypair::crypto_sign_keypair(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pubkey_plaintext_U = new crypto_sign_keypahbi("pubkey_plaintext_U");
    pubkey_plaintext_U->clk(ap_clk);
    pubkey_plaintext_U->reset(ap_rst);
    pubkey_plaintext_U->address0(pubkey_plaintext_address0);
    pubkey_plaintext_U->ce0(pubkey_plaintext_ce0);
    pubkey_plaintext_U->we0(pubkey_plaintext_we0);
    pubkey_plaintext_U->d0(grp_picnic_keygen_fu_250_pk_plaintext_d0);
    pubkey_plaintext_U->q0(pubkey_plaintext_q0);
    pubkey_plaintext_U->address1(grp_picnic_keygen_fu_250_pk_plaintext_address1);
    pubkey_plaintext_U->ce1(pubkey_plaintext_ce1);
    pubkey_plaintext_U->q1(pubkey_plaintext_q1);
    pubkey_ciphertext_U = new crypto_sign_keypahbi("pubkey_ciphertext_U");
    pubkey_ciphertext_U->clk(ap_clk);
    pubkey_ciphertext_U->reset(ap_rst);
    pubkey_ciphertext_U->address0(pubkey_ciphertext_address0);
    pubkey_ciphertext_U->ce0(pubkey_ciphertext_ce0);
    pubkey_ciphertext_U->we0(pubkey_ciphertext_we0);
    pubkey_ciphertext_U->d0(grp_picnic_keygen_fu_250_pk_ciphertext_d0);
    pubkey_ciphertext_U->q0(pubkey_ciphertext_q0);
    pubkey_ciphertext_U->address1(grp_picnic_keygen_fu_250_pk_ciphertext_address1);
    pubkey_ciphertext_U->ce1(pubkey_ciphertext_ce1);
    pubkey_ciphertext_U->q1(pubkey_ciphertext_q1);
    secret_data_U = new crypto_sign_keypahbi("secret_data_U");
    secret_data_U->clk(ap_clk);
    secret_data_U->reset(ap_rst);
    secret_data_U->address0(secret_data_address0);
    secret_data_U->ce0(secret_data_ce0);
    secret_data_U->we0(secret_data_we0);
    secret_data_U->d0(grp_picnic_keygen_fu_250_sk_data_d0);
    secret_data_U->q0(secret_data_q0);
    secret_data_U->address1(grp_picnic_keygen_fu_250_sk_data_address1);
    secret_data_U->ce1(secret_data_ce1);
    secret_data_U->q1(secret_data_q1);
    secret_pk_plaintext_U = new crypto_sign_keypakbM("secret_pk_plaintext_U");
    secret_pk_plaintext_U->clk(ap_clk);
    secret_pk_plaintext_U->reset(ap_rst);
    secret_pk_plaintext_U->address0(secret_pk_plaintext_address0);
    secret_pk_plaintext_U->ce0(secret_pk_plaintext_ce0);
    secret_pk_plaintext_U->we0(secret_pk_plaintext_we0);
    secret_pk_plaintext_U->d0(grp_picnic_keygen_fu_250_sk_pk_plaintext_d0);
    secret_pk_plaintext_U->q0(secret_pk_plaintext_q0);
    secret_pk_ciphertext_U = new crypto_sign_keypakbM("secret_pk_ciphertext_U");
    secret_pk_ciphertext_U->clk(ap_clk);
    secret_pk_ciphertext_U->reset(ap_rst);
    secret_pk_ciphertext_U->address0(secret_pk_ciphertext_address0);
    secret_pk_ciphertext_U->ce0(secret_pk_ciphertext_ce0);
    secret_pk_ciphertext_U->we0(secret_pk_ciphertext_we0);
    secret_pk_ciphertext_U->d0(grp_picnic_keygen_fu_250_sk_pk_ciphertext_d0);
    secret_pk_ciphertext_U->q0(secret_pk_ciphertext_q0);
    grp_picnic_keygen_fu_250 = new picnic_keygen("grp_picnic_keygen_fu_250");
    grp_picnic_keygen_fu_250->ap_clk(ap_clk);
    grp_picnic_keygen_fu_250->ap_rst(ap_rst);
    grp_picnic_keygen_fu_250->ap_start(grp_picnic_keygen_fu_250_ap_start);
    grp_picnic_keygen_fu_250->ap_done(grp_picnic_keygen_fu_250_ap_done);
    grp_picnic_keygen_fu_250->ap_idle(grp_picnic_keygen_fu_250_ap_idle);
    grp_picnic_keygen_fu_250->ap_ready(grp_picnic_keygen_fu_250_ap_ready);
    grp_picnic_keygen_fu_250->parameters(params);
    grp_picnic_keygen_fu_250->pk_plaintext_address0(grp_picnic_keygen_fu_250_pk_plaintext_address0);
    grp_picnic_keygen_fu_250->pk_plaintext_ce0(grp_picnic_keygen_fu_250_pk_plaintext_ce0);
    grp_picnic_keygen_fu_250->pk_plaintext_we0(grp_picnic_keygen_fu_250_pk_plaintext_we0);
    grp_picnic_keygen_fu_250->pk_plaintext_d0(grp_picnic_keygen_fu_250_pk_plaintext_d0);
    grp_picnic_keygen_fu_250->pk_plaintext_q0(pubkey_plaintext_q0);
    grp_picnic_keygen_fu_250->pk_plaintext_address1(grp_picnic_keygen_fu_250_pk_plaintext_address1);
    grp_picnic_keygen_fu_250->pk_plaintext_ce1(grp_picnic_keygen_fu_250_pk_plaintext_ce1);
    grp_picnic_keygen_fu_250->pk_plaintext_q1(pubkey_plaintext_q1);
    grp_picnic_keygen_fu_250->pk_ciphertext_address0(grp_picnic_keygen_fu_250_pk_ciphertext_address0);
    grp_picnic_keygen_fu_250->pk_ciphertext_ce0(grp_picnic_keygen_fu_250_pk_ciphertext_ce0);
    grp_picnic_keygen_fu_250->pk_ciphertext_we0(grp_picnic_keygen_fu_250_pk_ciphertext_we0);
    grp_picnic_keygen_fu_250->pk_ciphertext_d0(grp_picnic_keygen_fu_250_pk_ciphertext_d0);
    grp_picnic_keygen_fu_250->pk_ciphertext_q0(pubkey_ciphertext_q0);
    grp_picnic_keygen_fu_250->pk_ciphertext_address1(grp_picnic_keygen_fu_250_pk_ciphertext_address1);
    grp_picnic_keygen_fu_250->pk_ciphertext_ce1(grp_picnic_keygen_fu_250_pk_ciphertext_ce1);
    grp_picnic_keygen_fu_250->pk_ciphertext_q1(pubkey_ciphertext_q1);
    grp_picnic_keygen_fu_250->sk_data_address0(grp_picnic_keygen_fu_250_sk_data_address0);
    grp_picnic_keygen_fu_250->sk_data_ce0(grp_picnic_keygen_fu_250_sk_data_ce0);
    grp_picnic_keygen_fu_250->sk_data_we0(grp_picnic_keygen_fu_250_sk_data_we0);
    grp_picnic_keygen_fu_250->sk_data_d0(grp_picnic_keygen_fu_250_sk_data_d0);
    grp_picnic_keygen_fu_250->sk_data_q0(secret_data_q0);
    grp_picnic_keygen_fu_250->sk_data_address1(grp_picnic_keygen_fu_250_sk_data_address1);
    grp_picnic_keygen_fu_250->sk_data_ce1(grp_picnic_keygen_fu_250_sk_data_ce1);
    grp_picnic_keygen_fu_250->sk_data_q1(secret_data_q1);
    grp_picnic_keygen_fu_250->sk_pk_plaintext_address0(grp_picnic_keygen_fu_250_sk_pk_plaintext_address0);
    grp_picnic_keygen_fu_250->sk_pk_plaintext_ce0(grp_picnic_keygen_fu_250_sk_pk_plaintext_ce0);
    grp_picnic_keygen_fu_250->sk_pk_plaintext_we0(grp_picnic_keygen_fu_250_sk_pk_plaintext_we0);
    grp_picnic_keygen_fu_250->sk_pk_plaintext_d0(grp_picnic_keygen_fu_250_sk_pk_plaintext_d0);
    grp_picnic_keygen_fu_250->sk_pk_ciphertext_address0(grp_picnic_keygen_fu_250_sk_pk_ciphertext_address0);
    grp_picnic_keygen_fu_250->sk_pk_ciphertext_ce0(grp_picnic_keygen_fu_250_sk_pk_ciphertext_ce0);
    grp_picnic_keygen_fu_250->sk_pk_ciphertext_we0(grp_picnic_keygen_fu_250_sk_pk_ciphertext_we0);
    grp_picnic_keygen_fu_250->sk_pk_ciphertext_d0(grp_picnic_keygen_fu_250_sk_pk_ciphertext_d0);
    grp_picnic_keygen_fu_250->DRBG_ctx_V_address0(grp_picnic_keygen_fu_250_DRBG_ctx_V_address0);
    grp_picnic_keygen_fu_250->DRBG_ctx_V_ce0(grp_picnic_keygen_fu_250_DRBG_ctx_V_ce0);
    grp_picnic_keygen_fu_250->DRBG_ctx_V_we0(grp_picnic_keygen_fu_250_DRBG_ctx_V_we0);
    grp_picnic_keygen_fu_250->DRBG_ctx_V_d0(grp_picnic_keygen_fu_250_DRBG_ctx_V_d0);
    grp_picnic_keygen_fu_250->DRBG_ctx_V_q0(DRBG_ctx_V_q0);
    grp_picnic_keygen_fu_250->DRBG_ctx_V_address1(grp_picnic_keygen_fu_250_DRBG_ctx_V_address1);
    grp_picnic_keygen_fu_250->DRBG_ctx_V_ce1(grp_picnic_keygen_fu_250_DRBG_ctx_V_ce1);
    grp_picnic_keygen_fu_250->DRBG_ctx_V_q1(DRBG_ctx_V_q1);
    grp_picnic_keygen_fu_250->DRBG_ctx_Key_address0(grp_picnic_keygen_fu_250_DRBG_ctx_Key_address0);
    grp_picnic_keygen_fu_250->DRBG_ctx_Key_ce0(grp_picnic_keygen_fu_250_DRBG_ctx_Key_ce0);
    grp_picnic_keygen_fu_250->DRBG_ctx_Key_we0(grp_picnic_keygen_fu_250_DRBG_ctx_Key_we0);
    grp_picnic_keygen_fu_250->DRBG_ctx_Key_d0(grp_picnic_keygen_fu_250_DRBG_ctx_Key_d0);
    grp_picnic_keygen_fu_250->DRBG_ctx_Key_q0(DRBG_ctx_Key_q0);
    grp_picnic_keygen_fu_250->DRBG_ctx_Key_address1(grp_picnic_keygen_fu_250_DRBG_ctx_Key_address1);
    grp_picnic_keygen_fu_250->DRBG_ctx_Key_ce1(grp_picnic_keygen_fu_250_DRBG_ctx_Key_ce1);
    grp_picnic_keygen_fu_250->DRBG_ctx_Key_q1(DRBG_ctx_Key_q1);
    grp_picnic_keygen_fu_250->DRBG_ctx_reseed_counter_i(DRBG_ctx_reseed_counter_i);
    grp_picnic_keygen_fu_250->DRBG_ctx_reseed_counter_o(grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o);
    grp_picnic_keygen_fu_250->DRBG_ctx_reseed_counter_o_ap_vld(grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o_ap_vld);
    grp_picnic_keygen_fu_250->ap_return_0(grp_picnic_keygen_fu_250_ap_return_0);
    grp_picnic_keygen_fu_250->ap_return_1(grp_picnic_keygen_fu_250_ap_return_1);
    grp_picnic_keygen_fu_250->ap_return_2(grp_picnic_keygen_fu_250_ap_return_2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_DRBG_ctx_Key_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_Key_address0 );

    SC_METHOD(thread_DRBG_ctx_Key_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_Key_address1 );

    SC_METHOD(thread_DRBG_ctx_Key_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_Key_ce0 );

    SC_METHOD(thread_DRBG_ctx_Key_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_Key_ce1 );

    SC_METHOD(thread_DRBG_ctx_Key_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_Key_d0 );

    SC_METHOD(thread_DRBG_ctx_Key_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_Key_we0 );

    SC_METHOD(thread_DRBG_ctx_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_V_address0 );

    SC_METHOD(thread_DRBG_ctx_V_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_V_address1 );

    SC_METHOD(thread_DRBG_ctx_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_V_ce0 );

    SC_METHOD(thread_DRBG_ctx_V_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_V_ce1 );

    SC_METHOD(thread_DRBG_ctx_V_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_V_d0 );

    SC_METHOD(thread_DRBG_ctx_V_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_V_we0 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o);
    sensitive << ( DRBG_ctx_reseed_counter_i );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o_ap_vld );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o_ap_vld );

    SC_METHOD(thread_add_ln543_1_fu_355_p2);
    sensitive << ( zext_ln542_reg_444 );

    SC_METHOD(thread_add_ln616_fu_392_p2);
    sensitive << ( sext_ln614_i_cast_reg_462 );

    SC_METHOD(thread_add_ln617_fu_402_p2);
    sensitive << ( sext_ln614_i_cast_reg_462 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_return);
    sensitive << ( UnifiedRetVal_reg_239 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_picnic_keygen_fu_250_ap_start);
    sensitive << ( grp_picnic_keygen_fu_250_ap_start_reg );

    SC_METHOD(thread_icmp_ln539_fu_309_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( loop_0_i_reg_206 );

    SC_METHOD(thread_icmp_ln542_fu_334_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( loop_1_i_reg_217 );

    SC_METHOD(thread_icmp_ln614_fu_376_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( loop_0_i2_reg_228 );

    SC_METHOD(thread_icmp_ln66_fu_298_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_ap_done );
    sensitive << ( grp_picnic_keygen_fu_250_ap_return_0 );

    SC_METHOD(thread_loop_5_fu_340_p2);
    sensitive << ( loop_1_i_reg_217 );

    SC_METHOD(thread_loop_6_fu_382_p2);
    sensitive << ( loop_0_i2_reg_228 );

    SC_METHOD(thread_loop_fu_315_p2);
    sensitive << ( loop_0_i_reg_206 );

    SC_METHOD(thread_pk_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln540_1_fu_326_p1 );
    sensitive << ( zext_ln543_1_fu_360_p1 );

    SC_METHOD(thread_pk_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_pk_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( pubkey_plaintext_q0 );
    sensitive << ( pubkey_ciphertext_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln536_fu_304_p1 );

    SC_METHOD(thread_pk_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_ap_done );
    sensitive << ( icmp_ln66_fu_298_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_pubkey_ciphertext_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_picnic_keygen_fu_250_pk_ciphertext_address0 );
    sensitive << ( zext_ln540_fu_321_p1 );

    SC_METHOD(thread_pubkey_ciphertext_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_picnic_keygen_fu_250_pk_ciphertext_ce0 );

    SC_METHOD(thread_pubkey_ciphertext_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_pk_ciphertext_ce1 );

    SC_METHOD(thread_pubkey_ciphertext_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_pk_ciphertext_we0 );

    SC_METHOD(thread_pubkey_plaintext_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_picnic_keygen_fu_250_pk_plaintext_address0 );
    sensitive << ( zext_ln543_fu_346_p1 );

    SC_METHOD(thread_pubkey_plaintext_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_picnic_keygen_fu_250_pk_plaintext_ce0 );

    SC_METHOD(thread_pubkey_plaintext_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_pk_plaintext_ce1 );

    SC_METHOD(thread_pubkey_plaintext_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_pk_plaintext_we0 );

    SC_METHOD(thread_secret_data_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_picnic_keygen_fu_250_sk_data_address0 );
    sensitive << ( zext_ln614_fu_365_p1 );

    SC_METHOD(thread_secret_data_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_picnic_keygen_fu_250_sk_data_ce0 );

    SC_METHOD(thread_secret_data_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_sk_data_ce1 );

    SC_METHOD(thread_secret_data_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_sk_data_we0 );

    SC_METHOD(thread_secret_pk_ciphertext_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_picnic_keygen_fu_250_sk_pk_ciphertext_address0 );
    sensitive << ( zext_ln614_fu_365_p1 );

    SC_METHOD(thread_secret_pk_ciphertext_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_picnic_keygen_fu_250_sk_pk_ciphertext_ce0 );

    SC_METHOD(thread_secret_pk_ciphertext_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_sk_pk_ciphertext_we0 );

    SC_METHOD(thread_secret_pk_plaintext_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_picnic_keygen_fu_250_sk_pk_plaintext_address0 );
    sensitive << ( zext_ln614_fu_365_p1 );

    SC_METHOD(thread_secret_pk_plaintext_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_picnic_keygen_fu_250_sk_pk_plaintext_ce0 );

    SC_METHOD(thread_secret_pk_plaintext_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_sk_pk_plaintext_we0 );

    SC_METHOD(thread_sext_ln614_i_cast_fu_372_p1);
    sensitive << ( loop_0_i2_reg_228 );

    SC_METHOD(thread_sk_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln615_fu_388_p1 );

    SC_METHOD(thread_sk_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( zext_ln616_fu_397_p1 );
    sensitive << ( zext_ln617_fu_407_p1 );

    SC_METHOD(thread_sk_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sk_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_sk_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( secret_data_q0 );
    sensitive << ( zext_ln609_fu_351_p1 );

    SC_METHOD(thread_sk_d1);
    sensitive << ( secret_pk_plaintext_1_reg_492 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( secret_pk_ciphertext_q0 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_sk_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln542_fu_334_p2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sk_we1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_zext_ln536_fu_304_p1);
    sensitive << ( grp_picnic_keygen_fu_250_ap_return_1 );

    SC_METHOD(thread_zext_ln540_1_fu_326_p1);
    sensitive << ( loop_reg_433 );

    SC_METHOD(thread_zext_ln540_fu_321_p1);
    sensitive << ( loop_0_i_reg_206 );

    SC_METHOD(thread_zext_ln542_fu_330_p1);
    sensitive << ( loop_1_i_reg_217 );

    SC_METHOD(thread_zext_ln543_1_fu_360_p1);
    sensitive << ( add_ln543_1_fu_355_p2 );

    SC_METHOD(thread_zext_ln543_fu_346_p1);
    sensitive << ( loop_1_i_reg_217 );

    SC_METHOD(thread_zext_ln609_fu_351_p1);
    sensitive << ( secret_params_reg_422 );

    SC_METHOD(thread_zext_ln614_fu_365_p1);
    sensitive << ( loop_0_i2_reg_228 );

    SC_METHOD(thread_zext_ln615_fu_388_p1);
    sensitive << ( loop_6_reg_471 );

    SC_METHOD(thread_zext_ln616_fu_397_p1);
    sensitive << ( add_ln616_fu_392_p2 );

    SC_METHOD(thread_zext_ln617_fu_407_p1);
    sensitive << ( add_ln617_fu_402_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_picnic_keygen_fu_250_ap_done );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln539_fu_309_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln542_fu_334_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln614_fu_376_p2 );
    sensitive << ( icmp_ln66_fu_298_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000001";
    grp_picnic_keygen_fu_250_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "crypto_sign_keypair_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, pk_address0, "(port)pk_address0");
    sc_trace(mVcdFile, pk_ce0, "(port)pk_ce0");
    sc_trace(mVcdFile, pk_we0, "(port)pk_we0");
    sc_trace(mVcdFile, pk_d0, "(port)pk_d0");
    sc_trace(mVcdFile, sk_address0, "(port)sk_address0");
    sc_trace(mVcdFile, sk_ce0, "(port)sk_ce0");
    sc_trace(mVcdFile, sk_we0, "(port)sk_we0");
    sc_trace(mVcdFile, sk_d0, "(port)sk_d0");
    sc_trace(mVcdFile, sk_address1, "(port)sk_address1");
    sc_trace(mVcdFile, sk_ce1, "(port)sk_ce1");
    sc_trace(mVcdFile, sk_we1, "(port)sk_we1");
    sc_trace(mVcdFile, sk_d1, "(port)sk_d1");
    sc_trace(mVcdFile, params, "(port)params");
    sc_trace(mVcdFile, DRBG_ctx_V_address0, "(port)DRBG_ctx_V_address0");
    sc_trace(mVcdFile, DRBG_ctx_V_ce0, "(port)DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, DRBG_ctx_V_we0, "(port)DRBG_ctx_V_we0");
    sc_trace(mVcdFile, DRBG_ctx_V_d0, "(port)DRBG_ctx_V_d0");
    sc_trace(mVcdFile, DRBG_ctx_V_q0, "(port)DRBG_ctx_V_q0");
    sc_trace(mVcdFile, DRBG_ctx_V_address1, "(port)DRBG_ctx_V_address1");
    sc_trace(mVcdFile, DRBG_ctx_V_ce1, "(port)DRBG_ctx_V_ce1");
    sc_trace(mVcdFile, DRBG_ctx_V_q1, "(port)DRBG_ctx_V_q1");
    sc_trace(mVcdFile, DRBG_ctx_Key_address0, "(port)DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce0, "(port)DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, DRBG_ctx_Key_we0, "(port)DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, DRBG_ctx_Key_d0, "(port)DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, DRBG_ctx_Key_q0, "(port)DRBG_ctx_Key_q0");
    sc_trace(mVcdFile, DRBG_ctx_Key_address1, "(port)DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce1, "(port)DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, DRBG_ctx_Key_q1, "(port)DRBG_ctx_Key_q1");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_i, "(port)DRBG_ctx_reseed_counter_i");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o, "(port)DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o_ap_vld, "(port)DRBG_ctx_reseed_counter_o_ap_vld");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_ap_ready, "grp_picnic_keygen_fu_250_ap_ready");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_ap_done, "grp_picnic_keygen_fu_250_ap_done");
    sc_trace(mVcdFile, secret_params_reg_422, "secret_params_reg_422");
    sc_trace(mVcdFile, loop_fu_315_p2, "loop_fu_315_p2");
    sc_trace(mVcdFile, loop_reg_433, "loop_reg_433");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln539_fu_309_p2, "icmp_ln539_fu_309_p2");
    sc_trace(mVcdFile, zext_ln542_fu_330_p1, "zext_ln542_fu_330_p1");
    sc_trace(mVcdFile, zext_ln542_reg_444, "zext_ln542_reg_444");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, loop_5_fu_340_p2, "loop_5_fu_340_p2");
    sc_trace(mVcdFile, loop_5_reg_452, "loop_5_reg_452");
    sc_trace(mVcdFile, icmp_ln542_fu_334_p2, "icmp_ln542_fu_334_p2");
    sc_trace(mVcdFile, sext_ln614_i_cast_fu_372_p1, "sext_ln614_i_cast_fu_372_p1");
    sc_trace(mVcdFile, sext_ln614_i_cast_reg_462, "sext_ln614_i_cast_reg_462");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, loop_6_fu_382_p2, "loop_6_fu_382_p2");
    sc_trace(mVcdFile, loop_6_reg_471, "loop_6_reg_471");
    sc_trace(mVcdFile, icmp_ln614_fu_376_p2, "icmp_ln614_fu_376_p2");
    sc_trace(mVcdFile, secret_pk_plaintext_q0, "secret_pk_plaintext_q0");
    sc_trace(mVcdFile, secret_pk_plaintext_1_reg_492, "secret_pk_plaintext_1_reg_492");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, pubkey_plaintext_address0, "pubkey_plaintext_address0");
    sc_trace(mVcdFile, pubkey_plaintext_ce0, "pubkey_plaintext_ce0");
    sc_trace(mVcdFile, pubkey_plaintext_we0, "pubkey_plaintext_we0");
    sc_trace(mVcdFile, pubkey_plaintext_q0, "pubkey_plaintext_q0");
    sc_trace(mVcdFile, pubkey_plaintext_ce1, "pubkey_plaintext_ce1");
    sc_trace(mVcdFile, pubkey_plaintext_q1, "pubkey_plaintext_q1");
    sc_trace(mVcdFile, pubkey_ciphertext_address0, "pubkey_ciphertext_address0");
    sc_trace(mVcdFile, pubkey_ciphertext_ce0, "pubkey_ciphertext_ce0");
    sc_trace(mVcdFile, pubkey_ciphertext_we0, "pubkey_ciphertext_we0");
    sc_trace(mVcdFile, pubkey_ciphertext_q0, "pubkey_ciphertext_q0");
    sc_trace(mVcdFile, pubkey_ciphertext_ce1, "pubkey_ciphertext_ce1");
    sc_trace(mVcdFile, pubkey_ciphertext_q1, "pubkey_ciphertext_q1");
    sc_trace(mVcdFile, secret_data_address0, "secret_data_address0");
    sc_trace(mVcdFile, secret_data_ce0, "secret_data_ce0");
    sc_trace(mVcdFile, secret_data_we0, "secret_data_we0");
    sc_trace(mVcdFile, secret_data_q0, "secret_data_q0");
    sc_trace(mVcdFile, secret_data_ce1, "secret_data_ce1");
    sc_trace(mVcdFile, secret_data_q1, "secret_data_q1");
    sc_trace(mVcdFile, secret_pk_plaintext_address0, "secret_pk_plaintext_address0");
    sc_trace(mVcdFile, secret_pk_plaintext_ce0, "secret_pk_plaintext_ce0");
    sc_trace(mVcdFile, secret_pk_plaintext_we0, "secret_pk_plaintext_we0");
    sc_trace(mVcdFile, secret_pk_ciphertext_address0, "secret_pk_ciphertext_address0");
    sc_trace(mVcdFile, secret_pk_ciphertext_ce0, "secret_pk_ciphertext_ce0");
    sc_trace(mVcdFile, secret_pk_ciphertext_we0, "secret_pk_ciphertext_we0");
    sc_trace(mVcdFile, secret_pk_ciphertext_q0, "secret_pk_ciphertext_q0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_ap_start, "grp_picnic_keygen_fu_250_ap_start");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_ap_idle, "grp_picnic_keygen_fu_250_ap_idle");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_plaintext_address0, "grp_picnic_keygen_fu_250_pk_plaintext_address0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_plaintext_ce0, "grp_picnic_keygen_fu_250_pk_plaintext_ce0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_plaintext_we0, "grp_picnic_keygen_fu_250_pk_plaintext_we0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_plaintext_d0, "grp_picnic_keygen_fu_250_pk_plaintext_d0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_plaintext_address1, "grp_picnic_keygen_fu_250_pk_plaintext_address1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_plaintext_ce1, "grp_picnic_keygen_fu_250_pk_plaintext_ce1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_ciphertext_address0, "grp_picnic_keygen_fu_250_pk_ciphertext_address0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_ciphertext_ce0, "grp_picnic_keygen_fu_250_pk_ciphertext_ce0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_ciphertext_we0, "grp_picnic_keygen_fu_250_pk_ciphertext_we0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_ciphertext_d0, "grp_picnic_keygen_fu_250_pk_ciphertext_d0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_ciphertext_address1, "grp_picnic_keygen_fu_250_pk_ciphertext_address1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_pk_ciphertext_ce1, "grp_picnic_keygen_fu_250_pk_ciphertext_ce1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_data_address0, "grp_picnic_keygen_fu_250_sk_data_address0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_data_ce0, "grp_picnic_keygen_fu_250_sk_data_ce0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_data_we0, "grp_picnic_keygen_fu_250_sk_data_we0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_data_d0, "grp_picnic_keygen_fu_250_sk_data_d0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_data_address1, "grp_picnic_keygen_fu_250_sk_data_address1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_data_ce1, "grp_picnic_keygen_fu_250_sk_data_ce1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_pk_plaintext_address0, "grp_picnic_keygen_fu_250_sk_pk_plaintext_address0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_pk_plaintext_ce0, "grp_picnic_keygen_fu_250_sk_pk_plaintext_ce0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_pk_plaintext_we0, "grp_picnic_keygen_fu_250_sk_pk_plaintext_we0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_pk_plaintext_d0, "grp_picnic_keygen_fu_250_sk_pk_plaintext_d0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_pk_ciphertext_address0, "grp_picnic_keygen_fu_250_sk_pk_ciphertext_address0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_pk_ciphertext_ce0, "grp_picnic_keygen_fu_250_sk_pk_ciphertext_ce0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_pk_ciphertext_we0, "grp_picnic_keygen_fu_250_sk_pk_ciphertext_we0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_sk_pk_ciphertext_d0, "grp_picnic_keygen_fu_250_sk_pk_ciphertext_d0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_V_address0, "grp_picnic_keygen_fu_250_DRBG_ctx_V_address0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_V_ce0, "grp_picnic_keygen_fu_250_DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_V_we0, "grp_picnic_keygen_fu_250_DRBG_ctx_V_we0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_V_d0, "grp_picnic_keygen_fu_250_DRBG_ctx_V_d0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_V_address1, "grp_picnic_keygen_fu_250_DRBG_ctx_V_address1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_V_ce1, "grp_picnic_keygen_fu_250_DRBG_ctx_V_ce1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_Key_address0, "grp_picnic_keygen_fu_250_DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_Key_ce0, "grp_picnic_keygen_fu_250_DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_Key_we0, "grp_picnic_keygen_fu_250_DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_Key_d0, "grp_picnic_keygen_fu_250_DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_Key_address1, "grp_picnic_keygen_fu_250_DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_Key_ce1, "grp_picnic_keygen_fu_250_DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o, "grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o_ap_vld, "grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o_ap_vld");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_ap_return_0, "grp_picnic_keygen_fu_250_ap_return_0");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_ap_return_1, "grp_picnic_keygen_fu_250_ap_return_1");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_ap_return_2, "grp_picnic_keygen_fu_250_ap_return_2");
    sc_trace(mVcdFile, loop_0_i_reg_206, "loop_0_i_reg_206");
    sc_trace(mVcdFile, icmp_ln66_fu_298_p2, "icmp_ln66_fu_298_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, loop_1_i_reg_217, "loop_1_i_reg_217");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, loop_0_i2_reg_228, "loop_0_i2_reg_228");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, UnifiedRetVal_reg_239, "UnifiedRetVal_reg_239");
    sc_trace(mVcdFile, grp_picnic_keygen_fu_250_ap_start_reg, "grp_picnic_keygen_fu_250_ap_start_reg");
    sc_trace(mVcdFile, zext_ln540_fu_321_p1, "zext_ln540_fu_321_p1");
    sc_trace(mVcdFile, zext_ln540_1_fu_326_p1, "zext_ln540_1_fu_326_p1");
    sc_trace(mVcdFile, zext_ln543_fu_346_p1, "zext_ln543_fu_346_p1");
    sc_trace(mVcdFile, zext_ln543_1_fu_360_p1, "zext_ln543_1_fu_360_p1");
    sc_trace(mVcdFile, zext_ln614_fu_365_p1, "zext_ln614_fu_365_p1");
    sc_trace(mVcdFile, zext_ln615_fu_388_p1, "zext_ln615_fu_388_p1");
    sc_trace(mVcdFile, zext_ln616_fu_397_p1, "zext_ln616_fu_397_p1");
    sc_trace(mVcdFile, zext_ln617_fu_407_p1, "zext_ln617_fu_407_p1");
    sc_trace(mVcdFile, zext_ln536_fu_304_p1, "zext_ln536_fu_304_p1");
    sc_trace(mVcdFile, zext_ln609_fu_351_p1, "zext_ln609_fu_351_p1");
    sc_trace(mVcdFile, add_ln543_1_fu_355_p2, "add_ln543_1_fu_355_p2");
    sc_trace(mVcdFile, add_ln616_fu_392_p2, "add_ln616_fu_392_p2");
    sc_trace(mVcdFile, add_ln617_fu_402_p2, "add_ln617_fu_402_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("crypto_sign_keypair.hdltvin.dat");
    mHdltvoutHandle.open("crypto_sign_keypair.hdltvout.dat");
}

crypto_sign_keypair::~crypto_sign_keypair() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete pubkey_plaintext_U;
    delete pubkey_ciphertext_U;
    delete secret_data_U;
    delete secret_pk_plaintext_U;
    delete secret_pk_ciphertext_U;
    delete grp_picnic_keygen_fu_250;
}

void crypto_sign_keypair::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(icmp_ln614_fu_376_p2.read(), ap_const_lv1_1))) {
        UnifiedRetVal_reg_239 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(grp_picnic_keygen_fu_250_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln66_fu_298_p2.read()))) {
        UnifiedRetVal_reg_239 = grp_picnic_keygen_fu_250_ap_return_0.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_picnic_keygen_fu_250_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_picnic_keygen_fu_250_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_picnic_keygen_fu_250_ap_ready.read())) {
            grp_picnic_keygen_fu_250_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        loop_0_i2_reg_228 = loop_6_reg_471.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln542_fu_334_p2.read(), ap_const_lv1_1))) {
        loop_0_i2_reg_228 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        loop_0_i_reg_206 = loop_reg_433.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(grp_picnic_keygen_fu_250_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(icmp_ln66_fu_298_p2.read(), ap_const_lv1_1))) {
        loop_0_i_reg_206 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln539_fu_309_p2.read(), ap_const_lv1_1))) {
        loop_1_i_reg_217 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        loop_1_i_reg_217 = loop_5_reg_452.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        loop_5_reg_452 = loop_5_fu_340_p2.read();
        zext_ln542_reg_444 = zext_ln542_fu_330_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        loop_6_reg_471 = loop_6_fu_382_p2.read();
        sext_ln614_i_cast_reg_462 = sext_ln614_i_cast_fu_372_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        loop_reg_433 = loop_fu_315_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_picnic_keygen_fu_250_ap_done.read(), ap_const_logic_1))) {
        secret_params_reg_422 = grp_picnic_keygen_fu_250_ap_return_2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        secret_pk_plaintext_1_reg_492 = secret_pk_plaintext_q0.read();
    }
}

void crypto_sign_keypair::thread_DRBG_ctx_Key_address0() {
    DRBG_ctx_Key_address0 = grp_picnic_keygen_fu_250_DRBG_ctx_Key_address0.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_Key_address1() {
    DRBG_ctx_Key_address1 = grp_picnic_keygen_fu_250_DRBG_ctx_Key_address1.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_Key_ce0() {
    DRBG_ctx_Key_ce0 = grp_picnic_keygen_fu_250_DRBG_ctx_Key_ce0.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_Key_ce1() {
    DRBG_ctx_Key_ce1 = grp_picnic_keygen_fu_250_DRBG_ctx_Key_ce1.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_Key_d0() {
    DRBG_ctx_Key_d0 = grp_picnic_keygen_fu_250_DRBG_ctx_Key_d0.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_Key_we0() {
    DRBG_ctx_Key_we0 = grp_picnic_keygen_fu_250_DRBG_ctx_Key_we0.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_V_address0() {
    DRBG_ctx_V_address0 = grp_picnic_keygen_fu_250_DRBG_ctx_V_address0.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_V_address1() {
    DRBG_ctx_V_address1 = grp_picnic_keygen_fu_250_DRBG_ctx_V_address1.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_V_ce0() {
    DRBG_ctx_V_ce0 = grp_picnic_keygen_fu_250_DRBG_ctx_V_ce0.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_V_ce1() {
    DRBG_ctx_V_ce1 = grp_picnic_keygen_fu_250_DRBG_ctx_V_ce1.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_V_d0() {
    DRBG_ctx_V_d0 = grp_picnic_keygen_fu_250_DRBG_ctx_V_d0.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_V_we0() {
    DRBG_ctx_V_we0 = grp_picnic_keygen_fu_250_DRBG_ctx_V_we0.read();
}

void crypto_sign_keypair::thread_DRBG_ctx_reseed_counter_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o_ap_vld.read()))) {
        DRBG_ctx_reseed_counter_o = grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o.read();
    } else {
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i.read();
    }
}

void crypto_sign_keypair::thread_DRBG_ctx_reseed_counter_o_ap_vld() {
    DRBG_ctx_reseed_counter_o_ap_vld = grp_picnic_keygen_fu_250_DRBG_ctx_reseed_counter_o_ap_vld.read();
}

void crypto_sign_keypair::thread_add_ln543_1_fu_355_p2() {
    add_ln543_1_fu_355_p2 = (!zext_ln542_reg_444.read().is_01() || !ap_const_lv6_11.is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln542_reg_444.read()) + sc_biguint<6>(ap_const_lv6_11));
}

void crypto_sign_keypair::thread_add_ln616_fu_392_p2() {
    add_ln616_fu_392_p2 = (!sext_ln614_i_cast_reg_462.read().is_01() || !ap_const_lv6_11.is_01())? sc_lv<6>(): (sc_biguint<6>(sext_ln614_i_cast_reg_462.read()) + sc_biguint<6>(ap_const_lv6_11));
}

void crypto_sign_keypair::thread_add_ln617_fu_402_p2() {
    add_ln617_fu_402_p2 = (!sext_ln614_i_cast_reg_462.read().is_01() || !ap_const_lv6_21.is_01())? sc_lv<6>(): (sc_biguint<6>(sext_ln614_i_cast_reg_462.read()) + sc_bigint<6>(ap_const_lv6_21));
}

void crypto_sign_keypair::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void crypto_sign_keypair::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void crypto_sign_keypair::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void crypto_sign_keypair::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void crypto_sign_keypair::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void crypto_sign_keypair::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void crypto_sign_keypair::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void crypto_sign_keypair::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void crypto_sign_keypair::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void crypto_sign_keypair::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void crypto_sign_keypair::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_ap_return() {
    ap_return = UnifiedRetVal_reg_239.read();
}

void crypto_sign_keypair::thread_grp_picnic_keygen_fu_250_ap_start() {
    grp_picnic_keygen_fu_250_ap_start = grp_picnic_keygen_fu_250_ap_start_reg.read();
}

void crypto_sign_keypair::thread_icmp_ln539_fu_309_p2() {
    icmp_ln539_fu_309_p2 = (!loop_0_i_reg_206.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(loop_0_i_reg_206.read() == ap_const_lv5_10);
}

void crypto_sign_keypair::thread_icmp_ln542_fu_334_p2() {
    icmp_ln542_fu_334_p2 = (!loop_1_i_reg_217.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(loop_1_i_reg_217.read() == ap_const_lv5_10);
}

void crypto_sign_keypair::thread_icmp_ln614_fu_376_p2() {
    icmp_ln614_fu_376_p2 = (!loop_0_i2_reg_228.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(loop_0_i2_reg_228.read() == ap_const_lv5_10);
}

void crypto_sign_keypair::thread_icmp_ln66_fu_298_p2() {
    icmp_ln66_fu_298_p2 = (!grp_picnic_keygen_fu_250_ap_return_0.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(grp_picnic_keygen_fu_250_ap_return_0.read() == ap_const_lv32_0);
}

void crypto_sign_keypair::thread_loop_5_fu_340_p2() {
    loop_5_fu_340_p2 = (!loop_1_i_reg_217.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(loop_1_i_reg_217.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void crypto_sign_keypair::thread_loop_6_fu_382_p2() {
    loop_6_fu_382_p2 = (!loop_0_i2_reg_228.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(loop_0_i2_reg_228.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void crypto_sign_keypair::thread_loop_fu_315_p2() {
    loop_fu_315_p2 = (!loop_0_i_reg_206.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(loop_0_i_reg_206.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void crypto_sign_keypair::thread_pk_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        pk_address0 =  (sc_lv<6>) (zext_ln543_1_fu_360_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pk_address0 =  (sc_lv<6>) (zext_ln540_1_fu_326_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pk_address0 =  (sc_lv<6>) (ap_const_lv64_0);
    } else {
        pk_address0 = "XXXXXX";
    }
}

void crypto_sign_keypair::thread_pk_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_picnic_keygen_fu_250_ap_done.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        pk_ce0 = ap_const_logic_1;
    } else {
        pk_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_pk_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        pk_d0 = pubkey_plaintext_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pk_d0 = pubkey_ciphertext_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pk_d0 = zext_ln536_fu_304_p1.read();
    } else {
        pk_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_sign_keypair::thread_pk_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_picnic_keygen_fu_250_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(icmp_ln66_fu_298_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        pk_we0 = ap_const_logic_1;
    } else {
        pk_we0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_pubkey_ciphertext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pubkey_ciphertext_address0 =  (sc_lv<5>) (zext_ln540_fu_321_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pubkey_ciphertext_address0 = grp_picnic_keygen_fu_250_pk_ciphertext_address0.read();
    } else {
        pubkey_ciphertext_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void crypto_sign_keypair::thread_pubkey_ciphertext_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pubkey_ciphertext_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pubkey_ciphertext_ce0 = grp_picnic_keygen_fu_250_pk_ciphertext_ce0.read();
    } else {
        pubkey_ciphertext_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_pubkey_ciphertext_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pubkey_ciphertext_ce1 = grp_picnic_keygen_fu_250_pk_ciphertext_ce1.read();
    } else {
        pubkey_ciphertext_ce1 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_pubkey_ciphertext_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pubkey_ciphertext_we0 = grp_picnic_keygen_fu_250_pk_ciphertext_we0.read();
    } else {
        pubkey_ciphertext_we0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_pubkey_plaintext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        pubkey_plaintext_address0 =  (sc_lv<5>) (zext_ln543_fu_346_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pubkey_plaintext_address0 = grp_picnic_keygen_fu_250_pk_plaintext_address0.read();
    } else {
        pubkey_plaintext_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void crypto_sign_keypair::thread_pubkey_plaintext_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        pubkey_plaintext_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pubkey_plaintext_ce0 = grp_picnic_keygen_fu_250_pk_plaintext_ce0.read();
    } else {
        pubkey_plaintext_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_pubkey_plaintext_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pubkey_plaintext_ce1 = grp_picnic_keygen_fu_250_pk_plaintext_ce1.read();
    } else {
        pubkey_plaintext_ce1 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_pubkey_plaintext_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        pubkey_plaintext_we0 = grp_picnic_keygen_fu_250_pk_plaintext_we0.read();
    } else {
        pubkey_plaintext_we0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_secret_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        secret_data_address0 =  (sc_lv<5>) (zext_ln614_fu_365_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        secret_data_address0 = grp_picnic_keygen_fu_250_sk_data_address0.read();
    } else {
        secret_data_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void crypto_sign_keypair::thread_secret_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        secret_data_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        secret_data_ce0 = grp_picnic_keygen_fu_250_sk_data_ce0.read();
    } else {
        secret_data_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_secret_data_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        secret_data_ce1 = grp_picnic_keygen_fu_250_sk_data_ce1.read();
    } else {
        secret_data_ce1 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_secret_data_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        secret_data_we0 = grp_picnic_keygen_fu_250_sk_data_we0.read();
    } else {
        secret_data_we0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_secret_pk_ciphertext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        secret_pk_ciphertext_address0 =  (sc_lv<5>) (zext_ln614_fu_365_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        secret_pk_ciphertext_address0 = grp_picnic_keygen_fu_250_sk_pk_ciphertext_address0.read();
    } else {
        secret_pk_ciphertext_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void crypto_sign_keypair::thread_secret_pk_ciphertext_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        secret_pk_ciphertext_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        secret_pk_ciphertext_ce0 = grp_picnic_keygen_fu_250_sk_pk_ciphertext_ce0.read();
    } else {
        secret_pk_ciphertext_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_secret_pk_ciphertext_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        secret_pk_ciphertext_we0 = grp_picnic_keygen_fu_250_sk_pk_ciphertext_we0.read();
    } else {
        secret_pk_ciphertext_we0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_secret_pk_plaintext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        secret_pk_plaintext_address0 =  (sc_lv<5>) (zext_ln614_fu_365_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        secret_pk_plaintext_address0 = grp_picnic_keygen_fu_250_sk_pk_plaintext_address0.read();
    } else {
        secret_pk_plaintext_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void crypto_sign_keypair::thread_secret_pk_plaintext_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        secret_pk_plaintext_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        secret_pk_plaintext_ce0 = grp_picnic_keygen_fu_250_sk_pk_plaintext_ce0.read();
    } else {
        secret_pk_plaintext_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_secret_pk_plaintext_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        secret_pk_plaintext_we0 = grp_picnic_keygen_fu_250_sk_pk_plaintext_we0.read();
    } else {
        secret_pk_plaintext_we0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_sext_ln614_i_cast_fu_372_p1() {
    sext_ln614_i_cast_fu_372_p1 = esl_zext<6,5>(loop_0_i2_reg_228.read());
}

void crypto_sign_keypair::thread_sk_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sk_address0 =  (sc_lv<6>) (zext_ln615_fu_388_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sk_address0 =  (sc_lv<6>) (ap_const_lv64_0);
    } else {
        sk_address0 = "XXXXXX";
    }
}

void crypto_sign_keypair::thread_sk_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sk_address1 =  (sc_lv<6>) (zext_ln617_fu_407_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sk_address1 =  (sc_lv<6>) (zext_ln616_fu_397_p1.read());
    } else {
        sk_address1 = "XXXXXX";
    }
}

void crypto_sign_keypair::thread_sk_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        sk_ce0 = ap_const_logic_1;
    } else {
        sk_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_sk_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        sk_ce1 = ap_const_logic_1;
    } else {
        sk_ce1 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_sk_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sk_d0 = secret_data_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sk_d0 = zext_ln609_fu_351_p1.read();
    } else {
        sk_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_sign_keypair::thread_sk_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sk_d1 = secret_pk_plaintext_1_reg_492.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sk_d1 = secret_pk_ciphertext_q0.read();
    } else {
        sk_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_sign_keypair::thread_sk_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln542_fu_334_p2.read(), ap_const_lv1_1)))) {
        sk_we0 = ap_const_logic_1;
    } else {
        sk_we0 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_sk_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        sk_we1 = ap_const_logic_1;
    } else {
        sk_we1 = ap_const_logic_0;
    }
}

void crypto_sign_keypair::thread_zext_ln536_fu_304_p1() {
    zext_ln536_fu_304_p1 = esl_zext<8,4>(grp_picnic_keygen_fu_250_ap_return_1.read());
}

void crypto_sign_keypair::thread_zext_ln540_1_fu_326_p1() {
    zext_ln540_1_fu_326_p1 = esl_zext<64,5>(loop_reg_433.read());
}

void crypto_sign_keypair::thread_zext_ln540_fu_321_p1() {
    zext_ln540_fu_321_p1 = esl_zext<64,5>(loop_0_i_reg_206.read());
}

void crypto_sign_keypair::thread_zext_ln542_fu_330_p1() {
    zext_ln542_fu_330_p1 = esl_zext<6,5>(loop_1_i_reg_217.read());
}

void crypto_sign_keypair::thread_zext_ln543_1_fu_360_p1() {
    zext_ln543_1_fu_360_p1 = esl_zext<64,6>(add_ln543_1_fu_355_p2.read());
}

void crypto_sign_keypair::thread_zext_ln543_fu_346_p1() {
    zext_ln543_fu_346_p1 = esl_zext<64,5>(loop_1_i_reg_217.read());
}

void crypto_sign_keypair::thread_zext_ln609_fu_351_p1() {
    zext_ln609_fu_351_p1 = esl_zext<8,4>(secret_params_reg_422.read());
}

void crypto_sign_keypair::thread_zext_ln614_fu_365_p1() {
    zext_ln614_fu_365_p1 = esl_zext<64,5>(loop_0_i2_reg_228.read());
}

void crypto_sign_keypair::thread_zext_ln615_fu_388_p1() {
    zext_ln615_fu_388_p1 = esl_zext<64,5>(loop_6_reg_471.read());
}

void crypto_sign_keypair::thread_zext_ln616_fu_397_p1() {
    zext_ln616_fu_397_p1 = esl_zext<64,6>(add_ln616_fu_392_p2.read());
}

void crypto_sign_keypair::thread_zext_ln617_fu_407_p1() {
    zext_ln617_fu_407_p1 = esl_zext<64,6>(add_ln617_fu_402_p2.read());
}

void crypto_sign_keypair::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_picnic_keygen_fu_250_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(icmp_ln66_fu_298_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_picnic_keygen_fu_250_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln66_fu_298_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln539_fu_309_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln542_fu_334_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln614_fu_376_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

void crypto_sign_keypair::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_address0\" :  \"" << pk_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_ce0\" :  \"" << pk_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_we0\" :  \"" << pk_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_d0\" :  \"" << pk_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_address0\" :  \"" << sk_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_ce0\" :  \"" << sk_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_we0\" :  \"" << sk_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_d0\" :  \"" << sk_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_address1\" :  \"" << sk_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_ce1\" :  \"" << sk_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_we1\" :  \"" << sk_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_d1\" :  \"" << sk_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"params\" :  \"" << params.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_address0\" :  \"" << DRBG_ctx_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_ce0\" :  \"" << DRBG_ctx_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_we0\" :  \"" << DRBG_ctx_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_d0\" :  \"" << DRBG_ctx_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_V_q0\" :  \"" << DRBG_ctx_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_address1\" :  \"" << DRBG_ctx_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_ce1\" :  \"" << DRBG_ctx_V_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_V_q1\" :  \"" << DRBG_ctx_V_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_address0\" :  \"" << DRBG_ctx_Key_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_ce0\" :  \"" << DRBG_ctx_Key_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_we0\" :  \"" << DRBG_ctx_Key_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_d0\" :  \"" << DRBG_ctx_Key_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_Key_q0\" :  \"" << DRBG_ctx_Key_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_address1\" :  \"" << DRBG_ctx_Key_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_ce1\" :  \"" << DRBG_ctx_Key_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_Key_q1\" :  \"" << DRBG_ctx_Key_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_reseed_counter_i\" :  \"" << DRBG_ctx_reseed_counter_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_reseed_counter_o\" :  \"" << DRBG_ctx_reseed_counter_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_reseed_counter_o_ap_vld\" :  \"" << DRBG_ctx_reseed_counter_o_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

