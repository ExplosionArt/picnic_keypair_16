-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES256_ECB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_ce1 : OUT STD_LOGIC;
    key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ctr_ce0 : OUT STD_LOGIC;
    ctr_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctr_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ctr_ce1 : OUT STD_LOGIC;
    ctr_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buffer_r_ce1 : OUT STD_LOGIC;
    buffer_r_we1 : OUT STD_LOGIC;
    buffer_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_offset : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of AES256_ECB is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal test_addr_reg_710 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal test_addr_1_reg_715 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_addr_2_reg_730 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal test_addr_3_reg_735 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_addr_4_reg_750 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal test_addr_5_reg_755 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_addr_6_reg_770 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal test_addr_7_reg_775 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_addr_8_reg_790 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal test_addr_9_reg_795 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_addr_10_reg_810 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal test_addr_11_reg_815 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_addr_12_reg_830 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal test_addr_13_reg_835 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_addr_14_reg_850 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_KeyExpansion_fu_525_ap_ready : STD_LOGIC;
    signal grp_KeyExpansion_fu_525_ap_done : STD_LOGIC;
    signal test_addr_15_reg_855 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ctx_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_ce0 : STD_LOGIC;
    signal ctx_RoundKey_we0 : STD_LOGIC;
    signal ctx_RoundKey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_ce1 : STD_LOGIC;
    signal ctx_RoundKey_we1 : STD_LOGIC;
    signal ctx_RoundKey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_ce0 : STD_LOGIC;
    signal test_we0 : STD_LOGIC;
    signal test_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal test_ce1 : STD_LOGIC;
    signal test_we1 : STD_LOGIC;
    signal test_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal test_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_525_ap_start : STD_LOGIC;
    signal grp_KeyExpansion_fu_525_ap_idle : STD_LOGIC;
    signal grp_KeyExpansion_fu_525_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_525_RoundKey_ce0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_525_RoundKey_we0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_525_RoundKey_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_525_RoundKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_525_RoundKey_ce1 : STD_LOGIC;
    signal grp_KeyExpansion_fu_525_RoundKey_we1 : STD_LOGIC;
    signal grp_KeyExpansion_fu_525_RoundKey_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_525_Key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeyExpansion_fu_525_Key_ce0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_525_Key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeyExpansion_fu_525_Key_ce1 : STD_LOGIC;
    signal grp_Cipher_fu_536_ap_start : STD_LOGIC;
    signal grp_Cipher_fu_536_ap_done : STD_LOGIC;
    signal grp_Cipher_fu_536_ap_idle : STD_LOGIC;
    signal grp_Cipher_fu_536_ap_ready : STD_LOGIC;
    signal grp_Cipher_fu_536_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_536_state_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_536_state_we0 : STD_LOGIC;
    signal grp_Cipher_fu_536_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_536_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_536_state_ce1 : STD_LOGIC;
    signal grp_Cipher_fu_536_state_we1 : STD_LOGIC;
    signal grp_Cipher_fu_536_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_536_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_536_RoundKey_ce0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_525_ap_start_reg : STD_LOGIC := '0';
    signal grp_Cipher_fu_536_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buffer_offset_cast15_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln188_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln189_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln190_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln191_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln192_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln193_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln195_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln197_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln198_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln199_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln200_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln201_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln187_fu_549_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln188_fu_560_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln189_fu_570_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln190_fu_580_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln191_fu_590_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln192_fu_600_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln193_fu_610_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln194_fu_620_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln195_fu_630_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln196_fu_640_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln197_fu_650_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln198_fu_660_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln199_fu_670_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln200_fu_680_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln201_fu_690_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component KeyExpansion IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_we0 : OUT STD_LOGIC;
        RoundKey_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce1 : OUT STD_LOGIC;
        RoundKey_we1 : OUT STD_LOGIC;
        RoundKey_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Key_ce0 : OUT STD_LOGIC;
        Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Key_ce1 : OUT STD_LOGIC;
        Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Cipher IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES256_ECB_ctx_Rocud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES256_ECB_1_test IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ctx_RoundKey_U : component AES256_ECB_ctx_Rocud
    generic map (
        DataWidth => 8,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ctx_RoundKey_address0,
        ce0 => ctx_RoundKey_ce0,
        we0 => ctx_RoundKey_we0,
        d0 => grp_KeyExpansion_fu_525_RoundKey_d0,
        q0 => ctx_RoundKey_q0,
        address1 => grp_KeyExpansion_fu_525_RoundKey_address1,
        ce1 => ctx_RoundKey_ce1,
        we1 => ctx_RoundKey_we1,
        d1 => grp_KeyExpansion_fu_525_RoundKey_d1,
        q1 => ctx_RoundKey_q1);

    test_U : component AES256_ECB_1_test
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => test_address0,
        ce0 => test_ce0,
        we0 => test_we0,
        d0 => test_d0,
        q0 => test_q0,
        address1 => test_address1,
        ce1 => test_ce1,
        we1 => test_we1,
        d1 => test_d1,
        q1 => test_q1);

    grp_KeyExpansion_fu_525 : component KeyExpansion
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeyExpansion_fu_525_ap_start,
        ap_done => grp_KeyExpansion_fu_525_ap_done,
        ap_idle => grp_KeyExpansion_fu_525_ap_idle,
        ap_ready => grp_KeyExpansion_fu_525_ap_ready,
        RoundKey_address0 => grp_KeyExpansion_fu_525_RoundKey_address0,
        RoundKey_ce0 => grp_KeyExpansion_fu_525_RoundKey_ce0,
        RoundKey_we0 => grp_KeyExpansion_fu_525_RoundKey_we0,
        RoundKey_d0 => grp_KeyExpansion_fu_525_RoundKey_d0,
        RoundKey_q0 => ctx_RoundKey_q0,
        RoundKey_address1 => grp_KeyExpansion_fu_525_RoundKey_address1,
        RoundKey_ce1 => grp_KeyExpansion_fu_525_RoundKey_ce1,
        RoundKey_we1 => grp_KeyExpansion_fu_525_RoundKey_we1,
        RoundKey_d1 => grp_KeyExpansion_fu_525_RoundKey_d1,
        RoundKey_q1 => ctx_RoundKey_q1,
        Key_address0 => grp_KeyExpansion_fu_525_Key_address0,
        Key_ce0 => grp_KeyExpansion_fu_525_Key_ce0,
        Key_q0 => key_q0,
        Key_address1 => grp_KeyExpansion_fu_525_Key_address1,
        Key_ce1 => grp_KeyExpansion_fu_525_Key_ce1,
        Key_q1 => key_q1);

    grp_Cipher_fu_536 : component Cipher
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Cipher_fu_536_ap_start,
        ap_done => grp_Cipher_fu_536_ap_done,
        ap_idle => grp_Cipher_fu_536_ap_idle,
        ap_ready => grp_Cipher_fu_536_ap_ready,
        state_address0 => grp_Cipher_fu_536_state_address0,
        state_ce0 => grp_Cipher_fu_536_state_ce0,
        state_we0 => grp_Cipher_fu_536_state_we0,
        state_d0 => grp_Cipher_fu_536_state_d0,
        state_q0 => test_q0,
        state_address1 => grp_Cipher_fu_536_state_address1,
        state_ce1 => grp_Cipher_fu_536_state_ce1,
        state_we1 => grp_Cipher_fu_536_state_we1,
        state_d1 => grp_Cipher_fu_536_state_d1,
        state_q1 => test_q1,
        RoundKey_address0 => grp_Cipher_fu_536_RoundKey_address0,
        RoundKey_ce0 => grp_Cipher_fu_536_RoundKey_ce0,
        RoundKey_q0 => ctx_RoundKey_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Cipher_fu_536_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Cipher_fu_536_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_Cipher_fu_536_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Cipher_fu_536_ap_ready = ap_const_logic_1)) then 
                    grp_Cipher_fu_536_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeyExpansion_fu_525_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeyExpansion_fu_525_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_KeyExpansion_fu_525_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeyExpansion_fu_525_ap_ready = ap_const_logic_1)) then 
                    grp_KeyExpansion_fu_525_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, grp_KeyExpansion_fu_525_ap_done, grp_Cipher_fu_536_ap_done, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeyExpansion_fu_525_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_Cipher_fu_536_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln187_fu_549_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_1));
    add_ln188_fu_560_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_2));
    add_ln189_fu_570_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_3));
    add_ln190_fu_580_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_4));
    add_ln191_fu_590_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_5));
    add_ln192_fu_600_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_6));
    add_ln193_fu_610_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_7));
    add_ln194_fu_620_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_8));
    add_ln195_fu_630_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_9));
    add_ln196_fu_640_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_A));
    add_ln197_fu_650_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_B));
    add_ln198_fu_660_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_C));
    add_ln199_fu_670_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_D));
    add_ln200_fu_680_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_E));
    add_ln201_fu_690_p2 <= std_logic_vector(unsigned(buffer_offset) + unsigned(ap_const_lv6_F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_offset_cast15_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_offset),64));

    buffer_r_address0_assign_proc : process(ap_CS_fsm_state13, buffer_offset_cast15_fu_544_p1, zext_ln188_fu_565_p1, ap_CS_fsm_state14, zext_ln190_fu_585_p1, ap_CS_fsm_state15, zext_ln192_fu_605_p1, ap_CS_fsm_state16, zext_ln194_fu_625_p1, ap_CS_fsm_state17, zext_ln196_fu_645_p1, ap_CS_fsm_state18, zext_ln198_fu_665_p1, ap_CS_fsm_state19, zext_ln200_fu_685_p1, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_r_address0 <= zext_ln200_fu_685_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buffer_r_address0 <= zext_ln198_fu_665_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_r_address0 <= zext_ln196_fu_645_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buffer_r_address0 <= zext_ln194_fu_625_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_r_address0 <= zext_ln192_fu_605_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buffer_r_address0 <= zext_ln190_fu_585_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_r_address0 <= zext_ln188_fu_565_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buffer_r_address0 <= buffer_offset_cast15_fu_544_p1(6 - 1 downto 0);
        else 
            buffer_r_address0 <= "XXXXXX";
        end if; 
    end process;


    buffer_r_address1_assign_proc : process(ap_CS_fsm_state13, zext_ln187_fu_555_p1, ap_CS_fsm_state14, zext_ln189_fu_575_p1, ap_CS_fsm_state15, zext_ln191_fu_595_p1, ap_CS_fsm_state16, zext_ln193_fu_615_p1, ap_CS_fsm_state17, zext_ln195_fu_635_p1, ap_CS_fsm_state18, zext_ln197_fu_655_p1, ap_CS_fsm_state19, zext_ln199_fu_675_p1, ap_CS_fsm_state20, zext_ln201_fu_695_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buffer_r_address1 <= zext_ln201_fu_695_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buffer_r_address1 <= zext_ln199_fu_675_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buffer_r_address1 <= zext_ln197_fu_655_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buffer_r_address1 <= zext_ln195_fu_635_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buffer_r_address1 <= zext_ln193_fu_615_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buffer_r_address1 <= zext_ln191_fu_595_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer_r_address1 <= zext_ln189_fu_575_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buffer_r_address1 <= zext_ln187_fu_555_p1(6 - 1 downto 0);
        else 
            buffer_r_address1 <= "XXXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buffer_r_ce1 <= ap_const_logic_1;
        else 
            buffer_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_d0 <= test_q0;
    buffer_r_d1 <= test_q1;

    buffer_r_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buffer_r_we0 <= ap_const_logic_1;
        else 
            buffer_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_we1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buffer_r_we1 <= ap_const_logic_1;
        else 
            buffer_r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ctr_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctr_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctr_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctr_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctr_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctr_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctr_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctr_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctr_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            ctr_address0 <= "XXXX";
        end if; 
    end process;


    ctr_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctr_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctr_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctr_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctr_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctr_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctr_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctr_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctr_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            ctr_address1 <= "XXXX";
        end if; 
    end process;


    ctr_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ctr_ce0 <= ap_const_logic_1;
        else 
            ctr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctr_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ctr_ce1 <= ap_const_logic_1;
        else 
            ctr_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_address0_assign_proc : process(ap_CS_fsm_state9, grp_KeyExpansion_fu_525_RoundKey_address0, grp_Cipher_fu_536_RoundKey_address0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ctx_RoundKey_address0 <= grp_Cipher_fu_536_RoundKey_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_RoundKey_address0 <= grp_KeyExpansion_fu_525_RoundKey_address0;
        else 
            ctx_RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_RoundKey_ce0_assign_proc : process(ap_CS_fsm_state9, grp_KeyExpansion_fu_525_RoundKey_ce0, grp_Cipher_fu_536_RoundKey_ce0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ctx_RoundKey_ce0 <= grp_Cipher_fu_536_RoundKey_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_RoundKey_ce0 <= grp_KeyExpansion_fu_525_RoundKey_ce0;
        else 
            ctx_RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_ce1_assign_proc : process(ap_CS_fsm_state9, grp_KeyExpansion_fu_525_RoundKey_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_RoundKey_ce1 <= grp_KeyExpansion_fu_525_RoundKey_ce1;
        else 
            ctx_RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_we0_assign_proc : process(ap_CS_fsm_state9, grp_KeyExpansion_fu_525_RoundKey_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_RoundKey_we0 <= grp_KeyExpansion_fu_525_RoundKey_we0;
        else 
            ctx_RoundKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_we1_assign_proc : process(ap_CS_fsm_state9, grp_KeyExpansion_fu_525_RoundKey_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_RoundKey_we1 <= grp_KeyExpansion_fu_525_RoundKey_we1;
        else 
            ctx_RoundKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Cipher_fu_536_ap_start <= grp_Cipher_fu_536_ap_start_reg;
    grp_KeyExpansion_fu_525_ap_start <= grp_KeyExpansion_fu_525_ap_start_reg;
    key_address0 <= grp_KeyExpansion_fu_525_Key_address0;
    key_address1 <= grp_KeyExpansion_fu_525_Key_address1;
    key_ce0 <= grp_KeyExpansion_fu_525_Key_ce0;
    key_ce1 <= grp_KeyExpansion_fu_525_Key_ce1;
    test_addr_10_reg_810 <= ap_const_lv64_A(4 - 1 downto 0);
    test_addr_11_reg_815 <= ap_const_lv64_B(4 - 1 downto 0);
    test_addr_12_reg_830 <= ap_const_lv64_C(4 - 1 downto 0);
    test_addr_13_reg_835 <= ap_const_lv64_D(4 - 1 downto 0);
    test_addr_14_reg_850 <= ap_const_lv64_E(4 - 1 downto 0);
    test_addr_15_reg_855 <= ap_const_lv64_F(4 - 1 downto 0);
    test_addr_1_reg_715 <= ap_const_lv64_1(4 - 1 downto 0);
    test_addr_2_reg_730 <= ap_const_lv64_2(4 - 1 downto 0);
    test_addr_3_reg_735 <= ap_const_lv64_3(4 - 1 downto 0);
    test_addr_4_reg_750 <= ap_const_lv64_4(4 - 1 downto 0);
    test_addr_5_reg_755 <= ap_const_lv64_5(4 - 1 downto 0);
    test_addr_6_reg_770 <= ap_const_lv64_6(4 - 1 downto 0);
    test_addr_7_reg_775 <= ap_const_lv64_7(4 - 1 downto 0);
    test_addr_8_reg_790 <= ap_const_lv64_8(4 - 1 downto 0);
    test_addr_9_reg_795 <= ap_const_lv64_9(4 - 1 downto 0);
    test_addr_reg_710 <= ap_const_lv64_0(4 - 1 downto 0);

    test_address0_assign_proc : process(test_addr_reg_710, ap_CS_fsm_state2, test_addr_2_reg_730, ap_CS_fsm_state3, test_addr_4_reg_750, ap_CS_fsm_state4, test_addr_6_reg_770, ap_CS_fsm_state5, test_addr_8_reg_790, ap_CS_fsm_state6, test_addr_10_reg_810, ap_CS_fsm_state7, test_addr_12_reg_830, ap_CS_fsm_state8, test_addr_14_reg_850, ap_CS_fsm_state9, ap_CS_fsm_state13, grp_Cipher_fu_536_state_address0, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            test_address0 <= test_addr_14_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            test_address0 <= test_addr_12_reg_830;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            test_address0 <= test_addr_10_reg_810;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            test_address0 <= test_addr_8_reg_790;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            test_address0 <= test_addr_6_reg_770;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            test_address0 <= test_addr_4_reg_750;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            test_address0 <= test_addr_2_reg_730;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            test_address0 <= test_addr_reg_710;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            test_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            test_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            test_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            test_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            test_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            test_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            test_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            test_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_address0 <= grp_Cipher_fu_536_state_address0;
        else 
            test_address0 <= "XXXX";
        end if; 
    end process;


    test_address1_assign_proc : process(ap_CS_fsm_state2, test_addr_1_reg_715, ap_CS_fsm_state3, test_addr_3_reg_735, ap_CS_fsm_state4, test_addr_5_reg_755, ap_CS_fsm_state5, test_addr_7_reg_775, ap_CS_fsm_state6, test_addr_9_reg_795, ap_CS_fsm_state7, test_addr_11_reg_815, ap_CS_fsm_state8, test_addr_13_reg_835, ap_CS_fsm_state9, test_addr_15_reg_855, ap_CS_fsm_state13, grp_Cipher_fu_536_state_address1, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            test_address1 <= test_addr_15_reg_855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            test_address1 <= test_addr_13_reg_835;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            test_address1 <= test_addr_11_reg_815;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            test_address1 <= test_addr_9_reg_795;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            test_address1 <= test_addr_7_reg_775;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            test_address1 <= test_addr_5_reg_755;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            test_address1 <= test_addr_3_reg_735;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            test_address1 <= test_addr_1_reg_715;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            test_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            test_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            test_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            test_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            test_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            test_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            test_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            test_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_address1 <= grp_Cipher_fu_536_state_address1;
        else 
            test_address1 <= "XXXX";
        end if; 
    end process;


    test_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_KeyExpansion_fu_525_ap_done, ap_CS_fsm_state13, grp_Cipher_fu_536_state_ce0, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeyExpansion_fu_525_ap_done = ap_const_logic_1)))) then 
            test_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_ce0 <= grp_Cipher_fu_536_state_ce0;
        else 
            test_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    test_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_KeyExpansion_fu_525_ap_done, ap_CS_fsm_state13, grp_Cipher_fu_536_state_ce1, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeyExpansion_fu_525_ap_done = ap_const_logic_1)))) then 
            test_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_ce1 <= grp_Cipher_fu_536_state_ce1;
        else 
            test_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    test_d0_assign_proc : process(ctr_q0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_Cipher_fu_536_state_d0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            test_d0 <= ctr_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_d0 <= grp_Cipher_fu_536_state_d0;
        else 
            test_d0 <= "XXXXXXXX";
        end if; 
    end process;


    test_d1_assign_proc : process(ctr_q1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_Cipher_fu_536_state_d1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            test_d1 <= ctr_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_d1 <= grp_Cipher_fu_536_state_d1;
        else 
            test_d1 <= "XXXXXXXX";
        end if; 
    end process;


    test_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_KeyExpansion_fu_525_ap_done, grp_Cipher_fu_536_state_we0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeyExpansion_fu_525_ap_done = ap_const_logic_1)))) then 
            test_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_we0 <= grp_Cipher_fu_536_state_we0;
        else 
            test_we0 <= ap_const_logic_0;
        end if; 
    end process;


    test_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_KeyExpansion_fu_525_ap_done, grp_Cipher_fu_536_state_we1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_KeyExpansion_fu_525_ap_done = ap_const_logic_1)))) then 
            test_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            test_we1 <= grp_Cipher_fu_536_state_we1;
        else 
            test_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln187_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln187_fu_549_p2),64));
    zext_ln188_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_fu_560_p2),64));
    zext_ln189_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln189_fu_570_p2),64));
    zext_ln190_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln190_fu_580_p2),64));
    zext_ln191_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln191_fu_590_p2),64));
    zext_ln192_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln192_fu_600_p2),64));
    zext_ln193_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln193_fu_610_p2),64));
    zext_ln194_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln194_fu_620_p2),64));
    zext_ln195_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln195_fu_630_p2),64));
    zext_ln196_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln196_fu_640_p2),64));
    zext_ln197_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln197_fu_650_p2),64));
    zext_ln198_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln198_fu_660_p2),64));
    zext_ln199_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln199_fu_670_p2),64));
    zext_ln200_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln200_fu_680_p2),64));
    zext_ln201_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln201_fu_690_p2),64));
end behav;
