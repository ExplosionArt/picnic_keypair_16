// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_q0
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
input  [7:0] RoundKey_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg RoundKey_ce0;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_264;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state28;
reg   [7:0] reg_270;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state24;
reg   [7:0] reg_276;
reg   [7:0] reg_281;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state25;
reg   [7:0] reg_286;
reg   [7:0] reg_291;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state26;
reg   [7:0] reg_296;
reg   [7:0] reg_301;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state2;
wire    grp_AddRoundKey_fu_245_ap_ready;
wire    grp_AddRoundKey_fu_245_ap_done;
wire   [2:0] i_fu_318_p2;
reg   [2:0] i_reg_656;
wire    ap_CS_fsm_state16;
wire   [4:0] tmp_fu_324_p3;
reg   [4:0] tmp_reg_661;
wire   [0:0] icmp_ln310_fu_312_p2;
reg   [3:0] state_addr_13_reg_667;
reg   [3:0] state_addr_14_reg_672;
wire   [5:0] zext_ln426_fu_352_p1;
reg   [5:0] zext_ln426_reg_677;
wire   [3:0] round_fu_357_p2;
reg   [3:0] round_reg_682;
reg   [3:0] state_addr_15_reg_687;
reg   [3:0] state_addr_16_reg_692;
wire   [7:0] xor_ln316_1_fu_537_p2;
reg   [7:0] xor_ln316_1_reg_697;
wire    ap_CS_fsm_state18;
wire   [7:0] xor_ln317_fu_577_p2;
reg   [7:0] xor_ln317_reg_702;
wire    grp_AddRoundKey_fu_245_ap_start;
wire    grp_AddRoundKey_fu_245_ap_idle;
reg   [5:0] grp_AddRoundKey_fu_245_round;
wire   [3:0] grp_AddRoundKey_fu_245_state_address0;
wire    grp_AddRoundKey_fu_245_state_ce0;
wire    grp_AddRoundKey_fu_245_state_we0;
wire   [7:0] grp_AddRoundKey_fu_245_state_d0;
wire   [7:0] grp_AddRoundKey_fu_245_RoundKey_address0;
wire    grp_AddRoundKey_fu_245_RoundKey_ce0;
wire    grp_SubBytes_fu_256_ap_start;
wire    grp_SubBytes_fu_256_ap_done;
wire    grp_SubBytes_fu_256_ap_idle;
wire    grp_SubBytes_fu_256_ap_ready;
wire   [3:0] grp_SubBytes_fu_256_state_address0;
wire    grp_SubBytes_fu_256_state_ce0;
wire    grp_SubBytes_fu_256_state_we0;
wire   [7:0] grp_SubBytes_fu_256_state_d0;
reg   [3:0] round_0_reg_222;
wire    ap_CS_fsm_state20;
reg   [2:0] i_0_i_reg_234;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state19;
reg    grp_AddRoundKey_fu_245_ap_start_reg;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
reg    grp_SubBytes_fu_256_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln421_fu_306_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state21;
wire   [63:0] zext_ln312_fu_332_p1;
wire   [63:0] tmp_s_fu_343_p3;
wire   [63:0] tmp_1_fu_368_p3;
wire   [63:0] tmp_2_fu_382_p3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [7:0] xor_ln314_1_fu_443_p2;
wire   [7:0] xor_ln315_1_fu_490_p2;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire   [4:0] or_ln313_fu_337_p2;
wire   [4:0] or_ln313_1_fu_363_p2;
wire   [4:0] or_ln313_2_fu_377_p2;
wire   [7:0] Tm_fu_391_p2;
wire   [7:0] xor_ln313_1_fu_397_p2;
wire   [0:0] tmp_21_fu_415_p3;
wire   [7:0] select_ln302_fu_423_p3;
wire   [7:0] shl_ln302_fu_409_p2;
wire   [7:0] Tmp_fu_403_p2;
wire   [7:0] xor_ln314_2_fu_437_p2;
wire   [7:0] xor_ln314_fu_431_p2;
wire   [7:0] Tm_1_fu_450_p2;
wire   [0:0] tmp_22_fu_462_p3;
wire   [7:0] select_ln302_1_fu_470_p3;
wire   [7:0] shl_ln302_1_fu_456_p2;
wire   [7:0] xor_ln315_2_fu_484_p2;
wire   [7:0] xor_ln315_fu_478_p2;
wire   [7:0] Tm_2_fu_497_p2;
wire   [0:0] tmp_23_fu_509_p3;
wire   [7:0] select_ln302_2_fu_517_p3;
wire   [7:0] shl_ln302_2_fu_503_p2;
wire   [7:0] xor_ln316_2_fu_531_p2;
wire   [7:0] xor_ln316_fu_525_p2;
wire   [7:0] Tm_3_fu_543_p2;
wire   [0:0] tmp_24_fu_555_p3;
wire   [7:0] shl_ln302_3_fu_549_p2;
wire   [7:0] xor_ln317_2_fu_571_p2;
wire   [7:0] select_ln302_3_fu_563_p3;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
#0 grp_AddRoundKey_fu_245_ap_start_reg = 1'b0;
#0 grp_SubBytes_fu_256_ap_start_reg = 1'b0;
end

AddRoundKey grp_AddRoundKey_fu_245(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_245_ap_start),
    .ap_done(grp_AddRoundKey_fu_245_ap_done),
    .ap_idle(grp_AddRoundKey_fu_245_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_245_ap_ready),
    .round(grp_AddRoundKey_fu_245_round),
    .state_address0(grp_AddRoundKey_fu_245_state_address0),
    .state_ce0(grp_AddRoundKey_fu_245_state_ce0),
    .state_we0(grp_AddRoundKey_fu_245_state_we0),
    .state_d0(grp_AddRoundKey_fu_245_state_d0),
    .state_q0(state_q0),
    .RoundKey_address0(grp_AddRoundKey_fu_245_RoundKey_address0),
    .RoundKey_ce0(grp_AddRoundKey_fu_245_RoundKey_ce0),
    .RoundKey_q0(RoundKey_q0)
);

SubBytes grp_SubBytes_fu_256(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SubBytes_fu_256_ap_start),
    .ap_done(grp_SubBytes_fu_256_ap_done),
    .ap_idle(grp_SubBytes_fu_256_ap_idle),
    .ap_ready(grp_SubBytes_fu_256_ap_ready),
    .state_address0(grp_SubBytes_fu_256_state_address0),
    .state_ce0(grp_SubBytes_fu_256_state_ce0),
    .state_we0(grp_SubBytes_fu_256_state_we0),
    .state_d0(grp_SubBytes_fu_256_state_d0),
    .state_q0(state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddRoundKey_fu_245_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state33) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln310_fu_312_p2 == 1'd1)))) begin
            grp_AddRoundKey_fu_245_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_fu_245_ap_ready == 1'b1)) begin
            grp_AddRoundKey_fu_245_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_SubBytes_fu_256_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln421_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln421_fu_306_p2 == 1'd0)))) begin
            grp_SubBytes_fu_256_ap_start_reg <= 1'b1;
        end else if ((grp_SubBytes_fu_256_ap_ready == 1'b1)) begin
            grp_SubBytes_fu_256_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_0_i_reg_234 <= i_reg_656;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_0_i_reg_234 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_264 <= state_q0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_264 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_270 <= state_q1;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_270 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_AddRoundKey_fu_245_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            round_0_reg_222 <= round_reg_682;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            round_0_reg_222 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_reg_656 <= i_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_276 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_281 <= state_q0;
        reg_286 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_291 <= state_q0;
        reg_296 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_301 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln310_fu_312_p2 == 1'd1))) begin
        round_reg_682 <= round_fu_357_p2;
        zext_ln426_reg_677[3 : 0] <= zext_ln426_fu_352_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln310_fu_312_p2 == 1'd0))) begin
        state_addr_13_reg_667[3 : 2] <= zext_ln312_fu_332_p1[3 : 2];
        state_addr_14_reg_672[3 : 2] <= tmp_s_fu_343_p3[3 : 2];
        tmp_reg_661[4 : 2] <= tmp_fu_324_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        state_addr_15_reg_687[3 : 2] <= tmp_1_fu_368_p3[3 : 2];
        state_addr_16_reg_692[3 : 2] <= tmp_2_fu_382_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        xor_ln316_1_reg_697 <= xor_ln316_1_fu_537_p2;
        xor_ln317_reg_702 <= xor_ln317_fu_577_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_ce0 = grp_AddRoundKey_fu_245_RoundKey_ce0;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state34) & (grp_AddRoundKey_fu_245_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (grp_AddRoundKey_fu_245_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_AddRoundKey_fu_245_round = 6'd14;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_AddRoundKey_fu_245_round = zext_ln426_reg_677;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_AddRoundKey_fu_245_round = 6'd0;
    end else begin
        grp_AddRoundKey_fu_245_round = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address0 = state_addr_15_reg_687;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address0 = state_addr_13_reg_667;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address0 = tmp_1_fu_368_p3;
    end else if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln310_fu_312_p2 == 1'd0))) begin
        state_address0 = zext_ln312_fu_332_p1;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15))) begin
        state_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14))) begin
        state_address0 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state13))) begin
        state_address0 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10))) begin
        state_address0 = 64'd11;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        state_address0 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        state_address0 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7))) begin
        state_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12))) begin
        state_address0 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state5))) begin
        state_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        state_address0 = grp_SubBytes_fu_256_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state2))) begin
        state_address0 = grp_AddRoundKey_fu_245_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address1 = state_addr_16_reg_692;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address1 = state_addr_14_reg_672;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_address1 = tmp_2_fu_382_p3;
    end else if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln310_fu_312_p2 == 1'd0))) begin
        state_address1 = tmp_s_fu_343_p3;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15))) begin
        state_address1 = 64'd11;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14))) begin
        state_address1 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state13))) begin
        state_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12))) begin
        state_address1 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10))) begin
        state_address1 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        state_address1 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        state_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7))) begin
        state_address1 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state6))) begin
        state_address1 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state5))) begin
        state_address1 = 64'd5;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln310_fu_312_p2 == 1'd0)))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        state_ce0 = grp_SubBytes_fu_256_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state2))) begin
        state_ce0 = grp_AddRoundKey_fu_245_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln310_fu_312_p2 == 1'd0)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        state_d0 = xor_ln316_1_reg_697;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_d0 = xor_ln314_1_fu_443_p2;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14))) begin
        state_d0 = reg_291;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state13))) begin
        state_d0 = reg_281;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12))) begin
        state_d0 = reg_276;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15))) begin
        state_d0 = reg_264;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        state_d0 = grp_SubBytes_fu_256_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state2))) begin
        state_d0 = grp_AddRoundKey_fu_245_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        state_d1 = xor_ln317_reg_702;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_d1 = xor_ln315_1_fu_490_p2;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14))) begin
        state_d1 = reg_301;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state13))) begin
        state_d1 = reg_296;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12))) begin
        state_d1 = reg_286;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15))) begin
        state_d1 = reg_270;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10))) begin
        state_d1 = state_q0;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18))) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        state_we0 = grp_SubBytes_fu_256_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state2))) begin
        state_we0 = grp_AddRoundKey_fu_245_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_AddRoundKey_fu_245_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln421_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_SubBytes_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln310_fu_312_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (grp_AddRoundKey_fu_245_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((grp_SubBytes_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (grp_AddRoundKey_fu_245_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RoundKey_address0 = grp_AddRoundKey_fu_245_RoundKey_address0;

assign Tm_1_fu_450_p2 = (state_q0 ^ reg_270);

assign Tm_2_fu_497_p2 = (state_q1 ^ state_q0);

assign Tm_3_fu_543_p2 = (state_q1 ^ reg_264);

assign Tm_fu_391_p2 = (reg_270 ^ reg_264);

assign Tmp_fu_403_p2 = (xor_ln313_1_fu_397_p2 ^ state_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_AddRoundKey_fu_245_ap_start = grp_AddRoundKey_fu_245_ap_start_reg;

assign grp_SubBytes_fu_256_ap_start = grp_SubBytes_fu_256_ap_start_reg;

assign i_fu_318_p2 = (i_0_i_reg_234 + 3'd1);

assign icmp_ln310_fu_312_p2 = ((i_0_i_reg_234 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln421_fu_306_p2 = ((round_0_reg_222 == 4'd14) ? 1'b1 : 1'b0);

assign or_ln313_1_fu_363_p2 = (tmp_reg_661 | 5'd2);

assign or_ln313_2_fu_377_p2 = (tmp_reg_661 | 5'd3);

assign or_ln313_fu_337_p2 = (tmp_fu_324_p3 | 5'd1);

assign round_fu_357_p2 = (round_0_reg_222 + 4'd1);

assign select_ln302_1_fu_470_p3 = ((tmp_22_fu_462_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_2_fu_517_p3 = ((tmp_23_fu_509_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_3_fu_563_p3 = ((tmp_24_fu_555_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln302_fu_423_p3 = ((tmp_21_fu_415_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign shl_ln302_1_fu_456_p2 = Tm_1_fu_450_p2 << 8'd1;

assign shl_ln302_2_fu_503_p2 = Tm_2_fu_497_p2 << 8'd1;

assign shl_ln302_3_fu_549_p2 = Tm_3_fu_543_p2 << 8'd1;

assign shl_ln302_fu_409_p2 = Tm_fu_391_p2 << 8'd1;

assign tmp_1_fu_368_p3 = {{59'd0}, {or_ln313_1_fu_363_p2}};

assign tmp_21_fu_415_p3 = Tm_fu_391_p2[32'd7];

assign tmp_22_fu_462_p3 = Tm_1_fu_450_p2[32'd7];

assign tmp_23_fu_509_p3 = Tm_2_fu_497_p2[32'd7];

assign tmp_24_fu_555_p3 = Tm_3_fu_543_p2[32'd7];

assign tmp_2_fu_382_p3 = {{59'd0}, {or_ln313_2_fu_377_p2}};

assign tmp_fu_324_p3 = {{i_0_i_reg_234}, {2'd0}};

assign tmp_s_fu_343_p3 = {{59'd0}, {or_ln313_fu_337_p2}};

assign xor_ln313_1_fu_397_p2 = (state_q0 ^ Tm_fu_391_p2);

assign xor_ln314_1_fu_443_p2 = (xor_ln314_fu_431_p2 ^ xor_ln314_2_fu_437_p2);

assign xor_ln314_2_fu_437_p2 = (shl_ln302_fu_409_p2 ^ Tmp_fu_403_p2);

assign xor_ln314_fu_431_p2 = (select_ln302_fu_423_p3 ^ reg_264);

assign xor_ln315_1_fu_490_p2 = (xor_ln315_fu_478_p2 ^ xor_ln315_2_fu_484_p2);

assign xor_ln315_2_fu_484_p2 = (shl_ln302_1_fu_456_p2 ^ Tmp_fu_403_p2);

assign xor_ln315_fu_478_p2 = (select_ln302_1_fu_470_p3 ^ reg_270);

assign xor_ln316_1_fu_537_p2 = (xor_ln316_fu_525_p2 ^ xor_ln316_2_fu_531_p2);

assign xor_ln316_2_fu_531_p2 = (shl_ln302_2_fu_503_p2 ^ Tmp_fu_403_p2);

assign xor_ln316_fu_525_p2 = (state_q0 ^ select_ln302_2_fu_517_p3);

assign xor_ln317_2_fu_571_p2 = (xor_ln313_1_fu_397_p2 ^ shl_ln302_3_fu_549_p2);

assign xor_ln317_fu_577_p2 = (xor_ln317_2_fu_571_p2 ^ select_ln302_3_fu_563_p3);

assign zext_ln312_fu_332_p1 = tmp_fu_324_p3;

assign zext_ln426_fu_352_p1 = round_0_reg_222;

always @ (posedge ap_clk) begin
    tmp_reg_661[1:0] <= 2'b00;
    state_addr_13_reg_667[1:0] <= 2'b00;
    state_addr_14_reg_672[1:0] <= 2'b01;
    zext_ln426_reg_677[5:4] <= 2'b00;
    state_addr_15_reg_687[1:0] <= 2'b10;
    state_addr_16_reg_692[1:0] <= 2'b11;
end

endmodule //Cipher
