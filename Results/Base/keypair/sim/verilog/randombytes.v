// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module randombytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0,
        DRBG_ctx_V_d0,
        DRBG_ctx_V_q0,
        DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1,
        DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] x_address0;
output   x_ce0;
output   x_we0;
output  [7:0] x_d0;
output  [3:0] DRBG_ctx_V_address0;
output   DRBG_ctx_V_ce0;
output   DRBG_ctx_V_we0;
output  [7:0] DRBG_ctx_V_d0;
input  [7:0] DRBG_ctx_V_q0;
output  [3:0] DRBG_ctx_V_address1;
output   DRBG_ctx_V_ce1;
input  [7:0] DRBG_ctx_V_q1;
output  [4:0] DRBG_ctx_Key_address0;
output   DRBG_ctx_Key_ce0;
output   DRBG_ctx_Key_we0;
output  [7:0] DRBG_ctx_Key_d0;
input  [7:0] DRBG_ctx_Key_q0;
output  [4:0] DRBG_ctx_Key_address1;
output   DRBG_ctx_Key_ce1;
input  [7:0] DRBG_ctx_Key_q1;
input  [31:0] DRBG_ctx_reseed_counter_i;
output  [31:0] DRBG_ctx_reseed_counter_o;
output   DRBG_ctx_reseed_counter_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] x_address0;
reg x_ce0;
reg x_we0;
reg[3:0] DRBG_ctx_V_address0;
reg DRBG_ctx_V_ce0;
reg DRBG_ctx_V_we0;
reg[7:0] DRBG_ctx_V_d0;
reg[3:0] DRBG_ctx_V_address1;
reg DRBG_ctx_V_ce1;
reg[4:0] DRBG_ctx_Key_address0;
reg DRBG_ctx_Key_ce0;
reg DRBG_ctx_Key_we0;
reg[4:0] DRBG_ctx_Key_address1;
reg DRBG_ctx_Key_ce1;
reg[31:0] DRBG_ctx_reseed_counter_o;
reg DRBG_ctx_reseed_counter_o_ap_vld;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] p_0_load_reg_391;
wire    ap_CS_fsm_state2;
reg   [3:0] DRBG_ctx_V_addr_reg_404;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_1_fu_226_p3;
wire   [4:0] j_fu_245_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln234_fu_239_p2;
wire   [0:0] icmp_ln251_fu_267_p2;
reg   [0:0] icmp_ln251_reg_417;
wire    ap_CS_fsm_state6;
wire    grp_AES256_ECB_1_fu_187_ap_ready;
wire    grp_AES256_ECB_1_fu_187_ap_done;
wire   [31:0] zext_ln254_fu_273_p1;
reg   [31:0] zext_ln254_reg_421;
wire    ap_CS_fsm_state7;
wire   [4:0] loop_1_fu_283_p2;
reg   [4:0] loop_1_reg_429;
wire   [0:0] icmp_ln254_fu_277_p2;
wire   [31:0] zext_ln261_1_fu_315_p1;
reg   [31:0] zext_ln261_1_reg_439;
wire   [3:0] loop_fu_329_p2;
reg   [3:0] loop_reg_447;
wire   [0:0] icmp_ln261_fu_324_p2;
reg   [3:0] block_address0;
reg    block_ce0;
reg    block_we0;
wire   [7:0] block_q0;
reg    block_ce1;
reg    block_we1;
wire    grp_AES256_CTR_DRBG_Upda_fu_175_ap_start;
wire    grp_AES256_CTR_DRBG_Upda_fu_175_ap_done;
wire    grp_AES256_CTR_DRBG_Upda_fu_175_ap_idle;
wire    grp_AES256_CTR_DRBG_Upda_fu_175_ap_ready;
wire   [3:0] grp_AES256_CTR_DRBG_Upda_fu_175_V_address0;
wire    grp_AES256_CTR_DRBG_Upda_fu_175_V_ce0;
wire    grp_AES256_CTR_DRBG_Upda_fu_175_V_we0;
wire   [7:0] grp_AES256_CTR_DRBG_Upda_fu_175_V_d0;
wire   [3:0] grp_AES256_CTR_DRBG_Upda_fu_175_V_address1;
wire    grp_AES256_CTR_DRBG_Upda_fu_175_V_ce1;
wire   [4:0] grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address0;
wire    grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce0;
wire    grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_we0;
wire   [7:0] grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_d0;
wire   [4:0] grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address1;
wire    grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce1;
wire    grp_AES256_ECB_1_fu_187_ap_start;
wire    grp_AES256_ECB_1_fu_187_ap_idle;
wire   [4:0] grp_AES256_ECB_1_fu_187_key_address0;
wire    grp_AES256_ECB_1_fu_187_key_ce0;
wire   [4:0] grp_AES256_ECB_1_fu_187_key_address1;
wire    grp_AES256_ECB_1_fu_187_key_ce1;
wire   [3:0] grp_AES256_ECB_1_fu_187_ctr_address0;
wire    grp_AES256_ECB_1_fu_187_ctr_ce0;
wire   [3:0] grp_AES256_ECB_1_fu_187_ctr_address1;
wire    grp_AES256_ECB_1_fu_187_ctr_ce1;
wire   [3:0] grp_AES256_ECB_1_fu_187_buffer_r_address0;
wire    grp_AES256_ECB_1_fu_187_buffer_r_ce0;
wire    grp_AES256_ECB_1_fu_187_buffer_r_we0;
wire   [7:0] grp_AES256_ECB_1_fu_187_buffer_r_d0;
wire   [3:0] grp_AES256_ECB_1_fu_187_buffer_r_address1;
wire    grp_AES256_ECB_1_fu_187_buffer_r_ce1;
wire    grp_AES256_ECB_1_fu_187_buffer_r_we1;
wire   [7:0] grp_AES256_ECB_1_fu_187_buffer_r_d1;
reg  signed [4:0] j_0_reg_141;
wire   [0:0] icmp_ln231_fu_216_p2;
reg   [4:0] loop_0_reg_153;
wire    ap_CS_fsm_state8;
reg   [3:0] loop1_0_reg_164;
wire    ap_CS_fsm_state9;
reg    grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg;
wire    ap_CS_fsm_state10;
reg    grp_AES256_ECB_1_fu_187_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln234_fu_234_p1;
wire   [63:0] zext_ln255_fu_289_p1;
wire   [63:0] zext_ln261_fu_319_p1;
wire  signed [63:0] sext_ln255_fu_345_p1;
wire  signed [63:0] sext_ln262_fu_355_p1;
reg   [63:0] p_0_fu_74;
wire   [63:0] add_ln257_fu_300_p2;
reg   [31:0] i_1_fu_78;
wire   [31:0] i_fu_294_p2;
wire   [31:0] add_ln268_fu_364_p2;
wire   [7:0] add_ln237_fu_251_p2;
wire  signed [31:0] sext_ln233_fu_222_p1;
wire   [59:0] tmp_2_fu_258_p4;
wire   [31:0] add_ln255_fu_340_p2;
wire   [31:0] add_ln262_fu_350_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg = 1'b0;
#0 grp_AES256_ECB_1_fu_187_ap_start_reg = 1'b0;
end

randombytes_block #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
block_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(block_address0),
    .ce0(block_ce0),
    .we0(block_we0),
    .d0(grp_AES256_ECB_1_fu_187_buffer_r_d0),
    .q0(block_q0),
    .address1(grp_AES256_ECB_1_fu_187_buffer_r_address1),
    .ce1(block_ce1),
    .we1(block_we1),
    .d1(grp_AES256_ECB_1_fu_187_buffer_r_d1)
);

AES256_CTR_DRBG_Upda grp_AES256_CTR_DRBG_Upda_fu_175(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES256_CTR_DRBG_Upda_fu_175_ap_start),
    .ap_done(grp_AES256_CTR_DRBG_Upda_fu_175_ap_done),
    .ap_idle(grp_AES256_CTR_DRBG_Upda_fu_175_ap_idle),
    .ap_ready(grp_AES256_CTR_DRBG_Upda_fu_175_ap_ready),
    .V_address0(grp_AES256_CTR_DRBG_Upda_fu_175_V_address0),
    .V_ce0(grp_AES256_CTR_DRBG_Upda_fu_175_V_ce0),
    .V_we0(grp_AES256_CTR_DRBG_Upda_fu_175_V_we0),
    .V_d0(grp_AES256_CTR_DRBG_Upda_fu_175_V_d0),
    .V_q0(DRBG_ctx_V_q0),
    .V_address1(grp_AES256_CTR_DRBG_Upda_fu_175_V_address1),
    .V_ce1(grp_AES256_CTR_DRBG_Upda_fu_175_V_ce1),
    .V_q1(DRBG_ctx_V_q1),
    .DRBG_ctx_Key_address0(grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address0),
    .DRBG_ctx_Key_ce0(grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce0),
    .DRBG_ctx_Key_we0(grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_we0),
    .DRBG_ctx_Key_d0(grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_d0),
    .DRBG_ctx_Key_q0(DRBG_ctx_Key_q0),
    .DRBG_ctx_Key_address1(grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address1),
    .DRBG_ctx_Key_ce1(grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce1),
    .DRBG_ctx_Key_q1(DRBG_ctx_Key_q1)
);

AES256_ECB_1 grp_AES256_ECB_1_fu_187(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES256_ECB_1_fu_187_ap_start),
    .ap_done(grp_AES256_ECB_1_fu_187_ap_done),
    .ap_idle(grp_AES256_ECB_1_fu_187_ap_idle),
    .ap_ready(grp_AES256_ECB_1_fu_187_ap_ready),
    .key_address0(grp_AES256_ECB_1_fu_187_key_address0),
    .key_ce0(grp_AES256_ECB_1_fu_187_key_ce0),
    .key_q0(DRBG_ctx_Key_q0),
    .key_address1(grp_AES256_ECB_1_fu_187_key_address1),
    .key_ce1(grp_AES256_ECB_1_fu_187_key_ce1),
    .key_q1(DRBG_ctx_Key_q1),
    .ctr_address0(grp_AES256_ECB_1_fu_187_ctr_address0),
    .ctr_ce0(grp_AES256_ECB_1_fu_187_ctr_ce0),
    .ctr_q0(DRBG_ctx_V_q0),
    .ctr_address1(grp_AES256_ECB_1_fu_187_ctr_address1),
    .ctr_ce1(grp_AES256_ECB_1_fu_187_ctr_ce1),
    .ctr_q1(DRBG_ctx_V_q1),
    .buffer_r_address0(grp_AES256_ECB_1_fu_187_buffer_r_address0),
    .buffer_r_ce0(grp_AES256_ECB_1_fu_187_buffer_r_ce0),
    .buffer_r_we0(grp_AES256_ECB_1_fu_187_buffer_r_we0),
    .buffer_r_d0(grp_AES256_ECB_1_fu_187_buffer_r_d0),
    .buffer_r_address1(grp_AES256_ECB_1_fu_187_buffer_r_address1),
    .buffer_r_ce1(grp_AES256_ECB_1_fu_187_buffer_r_ce1),
    .buffer_r_we1(grp_AES256_ECB_1_fu_187_buffer_r_we1),
    .buffer_r_d1(grp_AES256_ECB_1_fu_187_buffer_r_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln231_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg <= 1'b1;
        end else if ((grp_AES256_CTR_DRBG_Upda_fu_175_ap_ready == 1'b1)) begin
            grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AES256_ECB_1_fu_187_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_AES256_ECB_1_fu_187_ap_start_reg <= 1'b1;
        end else if ((grp_AES256_ECB_1_fu_187_ap_ready == 1'b1)) begin
            grp_AES256_ECB_1_fu_187_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_277_p2 == 1'd1) & (icmp_ln251_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_fu_78 <= i_fu_294_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_1_fu_78 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln234_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_141 <= j_fu_245_p2;
    end else if (((icmp_ln231_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_141 <= 5'd15;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_AES256_ECB_1_fu_187_ap_done == 1'b1) & (icmp_ln251_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        loop1_0_reg_164 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        loop1_0_reg_164 <= loop_reg_447;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_AES256_ECB_1_fu_187_ap_done == 1'b1) & (icmp_ln251_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        loop_0_reg_153 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        loop_0_reg_153 <= loop_1_reg_429;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln251_reg_417 == 1'd1) & (icmp_ln261_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_0_fu_74 <= 64'd0;
    end else if (((icmp_ln254_fu_277_p2 == 1'd1) & (icmp_ln251_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_0_fu_74 <= add_ln257_fu_300_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0_fu_74 <= 64'd16;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_226_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        DRBG_ctx_V_addr_reg_404 <= zext_ln234_fu_234_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_AES256_ECB_1_fu_187_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln251_reg_417 <= icmp_ln251_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln251_reg_417 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        loop_1_reg_429 <= loop_1_fu_283_p2;
        zext_ln254_reg_421[4 : 0] <= zext_ln254_fu_273_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln251_reg_417 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        loop_reg_447 <= loop_fu_329_p2;
        zext_ln261_1_reg_439[3 : 0] <= zext_ln261_1_fu_315_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_0_load_reg_391 <= p_0_fu_74;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_Key_address0 = grp_AES256_ECB_1_fu_187_key_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_Key_address0 = grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address0;
    end else begin
        DRBG_ctx_Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_Key_address1 = grp_AES256_ECB_1_fu_187_key_address1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_Key_address1 = grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address1;
    end else begin
        DRBG_ctx_Key_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_Key_ce0 = grp_AES256_ECB_1_fu_187_key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_Key_ce0 = grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce0;
    end else begin
        DRBG_ctx_Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_Key_ce1 = grp_AES256_ECB_1_fu_187_key_ce1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_Key_ce1 = grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce1;
    end else begin
        DRBG_ctx_Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_Key_we0 = grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_we0;
    end else begin
        DRBG_ctx_Key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln234_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln234_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        DRBG_ctx_V_address0 = DRBG_ctx_V_addr_reg_404;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        DRBG_ctx_V_address0 = zext_ln234_fu_234_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_address0 = grp_AES256_ECB_1_fu_187_ctr_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_V_address0 = grp_AES256_CTR_DRBG_Upda_fu_175_V_address0;
    end else begin
        DRBG_ctx_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_address1 = grp_AES256_ECB_1_fu_187_ctr_address1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_V_address1 = grp_AES256_CTR_DRBG_Upda_fu_175_V_address1;
    end else begin
        DRBG_ctx_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln234_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln234_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        DRBG_ctx_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_ce0 = grp_AES256_ECB_1_fu_187_ctr_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_V_ce0 = grp_AES256_CTR_DRBG_Upda_fu_175_V_ce0;
    end else begin
        DRBG_ctx_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_ce1 = grp_AES256_ECB_1_fu_187_ctr_ce1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_V_ce1 = grp_AES256_CTR_DRBG_Upda_fu_175_V_ce1;
    end else begin
        DRBG_ctx_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln234_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        DRBG_ctx_V_d0 = add_ln237_fu_251_p2;
    end else if (((icmp_ln234_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        DRBG_ctx_V_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_V_d0 = grp_AES256_CTR_DRBG_Upda_fu_175_V_d0;
    end else begin
        DRBG_ctx_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln234_fu_239_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln234_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        DRBG_ctx_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_V_we0 = grp_AES256_CTR_DRBG_Upda_fu_175_V_we0;
    end else begin
        DRBG_ctx_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_AES256_CTR_DRBG_Upda_fu_175_ap_done == 1'b1))) begin
        DRBG_ctx_reseed_counter_o = add_ln268_fu_364_p2;
    end else begin
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_AES256_CTR_DRBG_Upda_fu_175_ap_done == 1'b1))) begin
        DRBG_ctx_reseed_counter_o_ap_vld = 1'b1;
    end else begin
        DRBG_ctx_reseed_counter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (grp_AES256_CTR_DRBG_Upda_fu_175_ap_done == 1'b1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_AES256_CTR_DRBG_Upda_fu_175_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln251_reg_417 == 1'd1) & (icmp_ln261_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        block_address0 = zext_ln261_fu_319_p1;
    end else if (((icmp_ln251_reg_417 == 1'd0) & (icmp_ln254_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        block_address0 = zext_ln255_fu_289_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        block_address0 = grp_AES256_ECB_1_fu_187_buffer_r_address0;
    end else begin
        block_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln251_reg_417 == 1'd1) & (icmp_ln261_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln251_reg_417 == 1'd0) & (icmp_ln254_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        block_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        block_ce0 = grp_AES256_ECB_1_fu_187_buffer_r_ce0;
    end else begin
        block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_ce1 = grp_AES256_ECB_1_fu_187_buffer_r_ce1;
    end else begin
        block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_we0 = grp_AES256_ECB_1_fu_187_buffer_r_we0;
    end else begin
        block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_we1 = grp_AES256_ECB_1_fu_187_buffer_r_we1;
    end else begin
        block_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        x_address0 = sext_ln262_fu_355_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_address0 = sext_ln255_fu_345_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln231_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_1_fu_226_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln234_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_AES256_ECB_1_fu_187_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (((icmp_ln251_reg_417 == 1'd1) & (icmp_ln261_fu_324_p2 == 1'd0)) | ((icmp_ln254_fu_277_p2 == 1'd1) & (icmp_ln251_reg_417 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln251_reg_417 == 1'd1) & (icmp_ln261_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_AES256_CTR_DRBG_Upda_fu_175_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DRBG_ctx_Key_d0 = grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_d0;

assign add_ln237_fu_251_p2 = (DRBG_ctx_V_q0 + 8'd1);

assign add_ln255_fu_340_p2 = (i_1_fu_78 + zext_ln254_reg_421);

assign add_ln257_fu_300_p2 = ($signed(p_0_load_reg_391) + $signed(64'd18446744073709551600));

assign add_ln262_fu_350_p2 = (zext_ln261_1_reg_439 + i_1_fu_78);

assign add_ln268_fu_364_p2 = (DRBG_ctx_reseed_counter_i + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_AES256_CTR_DRBG_Upda_fu_175_ap_start = grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg;

assign grp_AES256_ECB_1_fu_187_ap_start = grp_AES256_ECB_1_fu_187_ap_start_reg;

assign i_fu_294_p2 = (i_1_fu_78 + 32'd16);

assign icmp_ln231_fu_216_p2 = ((p_0_fu_74 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_239_p2 = ((DRBG_ctx_V_q0 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_267_p2 = ((tmp_2_fu_258_p4 == 60'd0) ? 1'b1 : 1'b0);

assign icmp_ln254_fu_277_p2 = ((loop_0_reg_153 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln261_fu_324_p2 = ((zext_ln261_fu_319_p1 < p_0_load_reg_391) ? 1'b1 : 1'b0);

assign j_fu_245_p2 = ($signed(j_0_reg_141) + $signed(5'd31));

assign loop_1_fu_283_p2 = (loop_0_reg_153 + 5'd1);

assign loop_fu_329_p2 = (loop1_0_reg_164 + 4'd1);

assign sext_ln233_fu_222_p1 = j_0_reg_141;

assign sext_ln255_fu_345_p1 = $signed(add_ln255_fu_340_p2);

assign sext_ln262_fu_355_p1 = $signed(add_ln262_fu_350_p2);

assign tmp_1_fu_226_p3 = j_0_reg_141[32'd4];

assign tmp_2_fu_258_p4 = {{p_0_load_reg_391[63:4]}};

assign x_d0 = block_q0;

assign zext_ln234_fu_234_p1 = $unsigned(sext_ln233_fu_222_p1);

assign zext_ln254_fu_273_p1 = loop_0_reg_153;

assign zext_ln255_fu_289_p1 = loop_0_reg_153;

assign zext_ln261_1_fu_315_p1 = loop1_0_reg_164;

assign zext_ln261_fu_319_p1 = loop1_0_reg_164;

always @ (posedge ap_clk) begin
    zext_ln254_reg_421[31:5] <= 27'b000000000000000000000000000;
    zext_ln261_1_reg_439[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //randombytes
