-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity randombytes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_we0 : OUT STD_LOGIC;
    x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce0 : OUT STD_LOGIC;
    DRBG_ctx_V_we0 : OUT STD_LOGIC;
    DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce1 : OUT STD_LOGIC;
    DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
    DRBG_ctx_Key_we0 : OUT STD_LOGIC;
    DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
    DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of randombytes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_FFFFFFFFFFFFFFF0 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111110000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_0_load_reg_391 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal DRBG_ctx_V_addr_reg_404 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_fu_226_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_245_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln234_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_AES256_ECB_1_fu_187_ap_ready : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_ap_done : STD_LOGIC;
    signal zext_ln254_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln254_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal loop_1_fu_283_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_1_reg_429 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln254_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln261_1_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln261_1_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_fu_329_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal loop_reg_447 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln261_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal block_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_ce0 : STD_LOGIC;
    signal block_we0 : STD_LOGIC;
    signal block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_ce1 : STD_LOGIC;
    signal block_we1 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_175_ap_start : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_175_ap_done : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_175_ap_idle : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_175_ap_ready : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_175_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_175_V_ce0 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_175_V_we0 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_175_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_175_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_175_V_ce1 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce0 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_we0 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce1 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_ap_start : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_ap_idle : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AES256_ECB_1_fu_187_key_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AES256_ECB_1_fu_187_key_ce1 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_ctr_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_1_fu_187_ctr_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_ctr_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_1_fu_187_ctr_ce1 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_buffer_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_1_fu_187_buffer_r_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_buffer_r_we0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES256_ECB_1_fu_187_buffer_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_1_fu_187_buffer_r_ce1 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_buffer_r_we1 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_187_buffer_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_141 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln231_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_0_reg_153 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal loop1_0_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_AES256_ECB_1_fu_187_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln234_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln261_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln255_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln262_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_74 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln257_fu_300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln268_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln237_fu_251_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln233_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_258_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln255_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln262_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component AES256_CTR_DRBG_Upda IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_we0 : OUT STD_LOGIC;
        V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V_ce1 : OUT STD_LOGIC;
        V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
        DRBG_ctx_Key_we0 : OUT STD_LOGIC;
        DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
        DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES256_ECB_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_ce1 : OUT STD_LOGIC;
        key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctr_ce0 : OUT STD_LOGIC;
        ctr_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctr_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctr_ce1 : OUT STD_LOGIC;
        ctr_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_we1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component randombytes_block IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    block_U : component randombytes_block
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_address0,
        ce0 => block_ce0,
        we0 => block_we0,
        d0 => grp_AES256_ECB_1_fu_187_buffer_r_d0,
        q0 => block_q0,
        address1 => grp_AES256_ECB_1_fu_187_buffer_r_address1,
        ce1 => block_ce1,
        we1 => block_we1,
        d1 => grp_AES256_ECB_1_fu_187_buffer_r_d1);

    grp_AES256_CTR_DRBG_Upda_fu_175 : component AES256_CTR_DRBG_Upda
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES256_CTR_DRBG_Upda_fu_175_ap_start,
        ap_done => grp_AES256_CTR_DRBG_Upda_fu_175_ap_done,
        ap_idle => grp_AES256_CTR_DRBG_Upda_fu_175_ap_idle,
        ap_ready => grp_AES256_CTR_DRBG_Upda_fu_175_ap_ready,
        V_address0 => grp_AES256_CTR_DRBG_Upda_fu_175_V_address0,
        V_ce0 => grp_AES256_CTR_DRBG_Upda_fu_175_V_ce0,
        V_we0 => grp_AES256_CTR_DRBG_Upda_fu_175_V_we0,
        V_d0 => grp_AES256_CTR_DRBG_Upda_fu_175_V_d0,
        V_q0 => DRBG_ctx_V_q0,
        V_address1 => grp_AES256_CTR_DRBG_Upda_fu_175_V_address1,
        V_ce1 => grp_AES256_CTR_DRBG_Upda_fu_175_V_ce1,
        V_q1 => DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0 => grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0 => grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0 => grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0 => grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0 => DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1 => grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1 => grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1 => DRBG_ctx_Key_q1);

    grp_AES256_ECB_1_fu_187 : component AES256_ECB_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES256_ECB_1_fu_187_ap_start,
        ap_done => grp_AES256_ECB_1_fu_187_ap_done,
        ap_idle => grp_AES256_ECB_1_fu_187_ap_idle,
        ap_ready => grp_AES256_ECB_1_fu_187_ap_ready,
        key_address0 => grp_AES256_ECB_1_fu_187_key_address0,
        key_ce0 => grp_AES256_ECB_1_fu_187_key_ce0,
        key_q0 => DRBG_ctx_Key_q0,
        key_address1 => grp_AES256_ECB_1_fu_187_key_address1,
        key_ce1 => grp_AES256_ECB_1_fu_187_key_ce1,
        key_q1 => DRBG_ctx_Key_q1,
        ctr_address0 => grp_AES256_ECB_1_fu_187_ctr_address0,
        ctr_ce0 => grp_AES256_ECB_1_fu_187_ctr_ce0,
        ctr_q0 => DRBG_ctx_V_q0,
        ctr_address1 => grp_AES256_ECB_1_fu_187_ctr_address1,
        ctr_ce1 => grp_AES256_ECB_1_fu_187_ctr_ce1,
        ctr_q1 => DRBG_ctx_V_q1,
        buffer_r_address0 => grp_AES256_ECB_1_fu_187_buffer_r_address0,
        buffer_r_ce0 => grp_AES256_ECB_1_fu_187_buffer_r_ce0,
        buffer_r_we0 => grp_AES256_ECB_1_fu_187_buffer_r_we0,
        buffer_r_d0 => grp_AES256_ECB_1_fu_187_buffer_r_d0,
        buffer_r_address1 => grp_AES256_ECB_1_fu_187_buffer_r_address1,
        buffer_r_ce1 => grp_AES256_ECB_1_fu_187_buffer_r_ce1,
        buffer_r_we1 => grp_AES256_ECB_1_fu_187_buffer_r_we1,
        buffer_r_d1 => grp_AES256_ECB_1_fu_187_buffer_r_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln231_fu_216_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES256_CTR_DRBG_Upda_fu_175_ap_ready = ap_const_logic_1)) then 
                    grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AES256_ECB_1_fu_187_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AES256_ECB_1_fu_187_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_AES256_ECB_1_fu_187_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES256_ECB_1_fu_187_ap_ready = ap_const_logic_1)) then 
                    grp_AES256_ECB_1_fu_187_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln254_fu_277_p2 = ap_const_lv1_1) and (icmp_ln251_reg_417 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_1_fu_78 <= i_fu_294_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln234_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_141 <= j_fu_245_p2;
            elsif (((icmp_ln231_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_141 <= ap_const_lv5_F;
            end if; 
        end if;
    end process;

    loop1_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_AES256_ECB_1_fu_187_ap_done = ap_const_logic_1) and (icmp_ln251_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                loop1_0_reg_164 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                loop1_0_reg_164 <= loop_reg_447;
            end if; 
        end if;
    end process;

    loop_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_AES256_ECB_1_fu_187_ap_done = ap_const_logic_1) and (icmp_ln251_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                loop_0_reg_153 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                loop_0_reg_153 <= loop_1_reg_429;
            end if; 
        end if;
    end process;

    p_0_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln251_reg_417 = ap_const_lv1_1) and (icmp_ln261_fu_324_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_0_fu_74 <= ap_const_lv64_0;
            elsif (((icmp_ln254_fu_277_p2 = ap_const_lv1_1) and (icmp_ln251_reg_417 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_0_fu_74 <= add_ln257_fu_300_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_fu_74 <= ap_const_lv64_10;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_226_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                DRBG_ctx_V_addr_reg_404 <= zext_ln234_fu_234_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_AES256_ECB_1_fu_187_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                icmp_ln251_reg_417 <= icmp_ln251_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln251_reg_417 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                loop_1_reg_429 <= loop_1_fu_283_p2;
                    zext_ln254_reg_421(4 downto 0) <= zext_ln254_fu_273_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln251_reg_417 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                loop_reg_447 <= loop_fu_329_p2;
                    zext_ln261_1_reg_439(3 downto 0) <= zext_ln261_1_fu_315_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_0_load_reg_391 <= p_0_fu_74;
            end if;
        end if;
    end process;
    zext_ln254_reg_421(31 downto 5) <= "000000000000000000000000000";
    zext_ln261_1_reg_439(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_1_fu_226_p3, ap_CS_fsm_state4, icmp_ln234_fu_239_p2, icmp_ln251_reg_417, ap_CS_fsm_state6, grp_AES256_ECB_1_fu_187_ap_done, ap_CS_fsm_state7, icmp_ln254_fu_277_p2, icmp_ln261_fu_324_p2, grp_AES256_CTR_DRBG_Upda_fu_175_ap_done, icmp_ln231_fu_216_p2, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln231_fu_216_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_1_fu_226_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln234_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_AES256_ECB_1_fu_187_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (((icmp_ln251_reg_417 = ap_const_lv1_1) and (icmp_ln261_fu_324_p2 = ap_const_lv1_0)) or ((icmp_ln254_fu_277_p2 = ap_const_lv1_1) and (icmp_ln251_reg_417 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln251_reg_417 = ap_const_lv1_1) and (icmp_ln261_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_AES256_CTR_DRBG_Upda_fu_175_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    DRBG_ctx_Key_address0_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address0, grp_AES256_ECB_1_fu_187_key_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_address0 <= grp_AES256_ECB_1_fu_187_key_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_Key_address0 <= grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address0;
        else 
            DRBG_ctx_Key_address0 <= "XXXXX";
        end if; 
    end process;


    DRBG_ctx_Key_address1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address1, grp_AES256_ECB_1_fu_187_key_address1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_address1 <= grp_AES256_ECB_1_fu_187_key_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_Key_address1 <= grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_address1;
        else 
            DRBG_ctx_Key_address1 <= "XXXXX";
        end if; 
    end process;


    DRBG_ctx_Key_ce0_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce0, grp_AES256_ECB_1_fu_187_key_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_ce0 <= grp_AES256_ECB_1_fu_187_key_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_Key_ce0 <= grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce0;
        else 
            DRBG_ctx_Key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_Key_ce1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce1, grp_AES256_ECB_1_fu_187_key_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_ce1 <= grp_AES256_ECB_1_fu_187_key_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_Key_ce1 <= grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_ce1;
        else 
            DRBG_ctx_Key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DRBG_ctx_Key_d0 <= grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_d0;

    DRBG_ctx_Key_we0_assign_proc : process(grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_Key_we0 <= grp_AES256_CTR_DRBG_Upda_fu_175_DRBG_ctx_Key_we0;
        else 
            DRBG_ctx_Key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_address0_assign_proc : process(DRBG_ctx_V_addr_reg_404, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln234_fu_239_p2, ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_175_V_address0, grp_AES256_ECB_1_fu_187_ctr_address0, ap_CS_fsm_state10, zext_ln234_fu_234_p1)
    begin
        if ((((icmp_ln234_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln234_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            DRBG_ctx_V_address0 <= DRBG_ctx_V_addr_reg_404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            DRBG_ctx_V_address0 <= zext_ln234_fu_234_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_address0 <= grp_AES256_ECB_1_fu_187_ctr_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_address0 <= grp_AES256_CTR_DRBG_Upda_fu_175_V_address0;
        else 
            DRBG_ctx_V_address0 <= "XXXX";
        end if; 
    end process;


    DRBG_ctx_V_address1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_175_V_address1, grp_AES256_ECB_1_fu_187_ctr_address1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_address1 <= grp_AES256_ECB_1_fu_187_ctr_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_address1 <= grp_AES256_CTR_DRBG_Upda_fu_175_V_address1;
        else 
            DRBG_ctx_V_address1 <= "XXXX";
        end if; 
    end process;


    DRBG_ctx_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln234_fu_239_p2, ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_175_V_ce0, grp_AES256_ECB_1_fu_187_ctr_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln234_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln234_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            DRBG_ctx_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_ce0 <= grp_AES256_ECB_1_fu_187_ctr_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_ce0 <= grp_AES256_CTR_DRBG_Upda_fu_175_V_ce0;
        else 
            DRBG_ctx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_ce1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_175_V_ce1, grp_AES256_ECB_1_fu_187_ctr_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_ce1 <= grp_AES256_ECB_1_fu_187_ctr_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_ce1 <= grp_AES256_CTR_DRBG_Upda_fu_175_V_ce1;
        else 
            DRBG_ctx_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_d0_assign_proc : process(ap_CS_fsm_state4, icmp_ln234_fu_239_p2, grp_AES256_CTR_DRBG_Upda_fu_175_V_d0, ap_CS_fsm_state10, add_ln237_fu_251_p2)
    begin
        if (((icmp_ln234_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_d0 <= add_ln237_fu_251_p2;
        elsif (((icmp_ln234_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_d0 <= grp_AES256_CTR_DRBG_Upda_fu_175_V_d0;
        else 
            DRBG_ctx_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    DRBG_ctx_V_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln234_fu_239_p2, grp_AES256_CTR_DRBG_Upda_fu_175_V_we0, ap_CS_fsm_state10)
    begin
        if ((((icmp_ln234_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln234_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            DRBG_ctx_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_we0 <= grp_AES256_CTR_DRBG_Upda_fu_175_V_we0;
        else 
            DRBG_ctx_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_reseed_counter_o_assign_proc : process(DRBG_ctx_reseed_counter_i, grp_AES256_CTR_DRBG_Upda_fu_175_ap_done, ap_CS_fsm_state10, add_ln268_fu_364_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_AES256_CTR_DRBG_Upda_fu_175_ap_done = ap_const_logic_1))) then 
            DRBG_ctx_reseed_counter_o <= add_ln268_fu_364_p2;
        else 
            DRBG_ctx_reseed_counter_o <= DRBG_ctx_reseed_counter_i;
        end if; 
    end process;


    DRBG_ctx_reseed_counter_o_ap_vld_assign_proc : process(grp_AES256_CTR_DRBG_Upda_fu_175_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_AES256_CTR_DRBG_Upda_fu_175_ap_done = ap_const_logic_1))) then 
            DRBG_ctx_reseed_counter_o_ap_vld <= ap_const_logic_1;
        else 
            DRBG_ctx_reseed_counter_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln237_fu_251_p2 <= std_logic_vector(unsigned(DRBG_ctx_V_q0) + unsigned(ap_const_lv8_1));
    add_ln255_fu_340_p2 <= std_logic_vector(unsigned(i_1_fu_78) + unsigned(zext_ln254_reg_421));
    add_ln257_fu_300_p2 <= std_logic_vector(unsigned(p_0_load_reg_391) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFF0));
    add_ln262_fu_350_p2 <= std_logic_vector(unsigned(zext_ln261_1_reg_439) + unsigned(i_1_fu_78));
    add_ln268_fu_364_p2 <= std_logic_vector(unsigned(DRBG_ctx_reseed_counter_i) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_AES256_CTR_DRBG_Upda_fu_175_ap_done, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_AES256_CTR_DRBG_Upda_fu_175_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_AES256_CTR_DRBG_Upda_fu_175_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_AES256_CTR_DRBG_Upda_fu_175_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_address0_assign_proc : process(icmp_ln251_reg_417, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln254_fu_277_p2, icmp_ln261_fu_324_p2, grp_AES256_ECB_1_fu_187_buffer_r_address0, zext_ln255_fu_289_p1, zext_ln261_fu_319_p1)
    begin
        if (((icmp_ln251_reg_417 = ap_const_lv1_1) and (icmp_ln261_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            block_address0 <= zext_ln261_fu_319_p1(4 - 1 downto 0);
        elsif (((icmp_ln251_reg_417 = ap_const_lv1_0) and (icmp_ln254_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            block_address0 <= zext_ln255_fu_289_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_address0 <= grp_AES256_ECB_1_fu_187_buffer_r_address0;
        else 
            block_address0 <= "XXXX";
        end if; 
    end process;


    block_ce0_assign_proc : process(icmp_ln251_reg_417, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln254_fu_277_p2, icmp_ln261_fu_324_p2, grp_AES256_ECB_1_fu_187_buffer_r_ce0)
    begin
        if ((((icmp_ln251_reg_417 = ap_const_lv1_1) and (icmp_ln261_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln251_reg_417 = ap_const_lv1_0) and (icmp_ln254_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            block_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_ce0 <= grp_AES256_ECB_1_fu_187_buffer_r_ce0;
        else 
            block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_ce1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_ECB_1_fu_187_buffer_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_ce1 <= grp_AES256_ECB_1_fu_187_buffer_r_ce1;
        else 
            block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    block_we0_assign_proc : process(ap_CS_fsm_state6, grp_AES256_ECB_1_fu_187_buffer_r_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_we0 <= grp_AES256_ECB_1_fu_187_buffer_r_we0;
        else 
            block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    block_we1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_ECB_1_fu_187_buffer_r_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_we1 <= grp_AES256_ECB_1_fu_187_buffer_r_we1;
        else 
            block_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_AES256_CTR_DRBG_Upda_fu_175_ap_start <= grp_AES256_CTR_DRBG_Upda_fu_175_ap_start_reg;
    grp_AES256_ECB_1_fu_187_ap_start <= grp_AES256_ECB_1_fu_187_ap_start_reg;
    i_fu_294_p2 <= std_logic_vector(unsigned(i_1_fu_78) + unsigned(ap_const_lv32_10));
    icmp_ln231_fu_216_p2 <= "1" when (p_0_fu_74 = ap_const_lv64_0) else "0";
    icmp_ln234_fu_239_p2 <= "1" when (DRBG_ctx_V_q0 = ap_const_lv8_FF) else "0";
    icmp_ln251_fu_267_p2 <= "1" when (tmp_2_fu_258_p4 = ap_const_lv60_0) else "0";
    icmp_ln254_fu_277_p2 <= "1" when (loop_0_reg_153 = ap_const_lv5_10) else "0";
    icmp_ln261_fu_324_p2 <= "1" when (unsigned(zext_ln261_fu_319_p1) < unsigned(p_0_load_reg_391)) else "0";
    j_fu_245_p2 <= std_logic_vector(signed(j_0_reg_141) + signed(ap_const_lv5_1F));
    loop_1_fu_283_p2 <= std_logic_vector(unsigned(loop_0_reg_153) + unsigned(ap_const_lv5_1));
    loop_fu_329_p2 <= std_logic_vector(unsigned(loop1_0_reg_164) + unsigned(ap_const_lv4_1));
        sext_ln233_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_0_reg_141),32));

        sext_ln255_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln255_fu_340_p2),64));

        sext_ln262_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln262_fu_350_p2),64));

    tmp_1_fu_226_p3 <= j_0_reg_141(4 downto 4);
    tmp_2_fu_258_p4 <= p_0_load_reg_391(63 downto 4);

    x_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, sext_ln255_fu_345_p1, sext_ln262_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x_address0 <= sext_ln262_fu_355_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_address0 <= sext_ln255_fu_345_p1(5 - 1 downto 0);
        else 
            x_address0 <= "XXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_d0 <= block_q0;

    x_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln234_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln233_fu_222_p1),64));
    zext_ln254_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_153),32));
    zext_ln255_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_153),64));
    zext_ln261_1_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop1_0_reg_164),32));
    zext_ln261_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop1_0_reg_164),64));
end behav;
