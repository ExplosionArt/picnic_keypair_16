-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity picnic_keygen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    parameters : IN STD_LOGIC_VECTOR (3 downto 0);
    pk_plaintext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_plaintext_ce0 : OUT STD_LOGIC;
    pk_plaintext_we0 : OUT STD_LOGIC;
    pk_plaintext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_plaintext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_plaintext_ce1 : OUT STD_LOGIC;
    pk_plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_ciphertext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_ciphertext_ce0 : OUT STD_LOGIC;
    pk_ciphertext_we0 : OUT STD_LOGIC;
    pk_ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_ciphertext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_ciphertext_ce1 : OUT STD_LOGIC;
    pk_ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_data_ce0 : OUT STD_LOGIC;
    sk_data_we0 : OUT STD_LOGIC;
    sk_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_data_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_data_ce1 : OUT STD_LOGIC;
    sk_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_pk_plaintext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_pk_plaintext_ce0 : OUT STD_LOGIC;
    sk_pk_plaintext_we0 : OUT STD_LOGIC;
    sk_pk_plaintext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_pk_ciphertext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_pk_ciphertext_ce0 : OUT STD_LOGIC;
    sk_pk_ciphertext_we0 : OUT STD_LOGIC;
    sk_pk_ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce0 : OUT STD_LOGIC;
    DRBG_ctx_V_we0 : OUT STD_LOGIC;
    DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce1 : OUT STD_LOGIC;
    DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
    DRBG_ctx_Key_we0 : OUT STD_LOGIC;
    DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
    DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of picnic_keygen is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln210_fu_562_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln210_1_fu_579_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln210_2_fu_596_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_fu_613_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln211_fu_628_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln211_reg_859 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln212_1_reg_870 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_fu_655_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_reg_895 : STD_LOGIC_VECTOR (5 downto 0);
    signal pk_ciphertext_load_reg_900 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal pk_ciphertext_load_1_reg_905 : STD_LOGIC_VECTOR (7 downto 0);
    signal pk_plaintext_load_reg_920 : STD_LOGIC_VECTOR (7 downto 0);
    signal pk_plaintext_load_1_reg_925 : STD_LOGIC_VECTOR (7 downto 0);
    signal sk_data_load_reg_940 : STD_LOGIC_VECTOR (7 downto 0);
    signal sk_data_load_1_reg_945 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_3_fu_730_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_3_reg_963 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal temp_addr_2_reg_968 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln221_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_4_fu_782_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_4_reg_976 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln231_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_reg_981 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln230_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp2_ce0 : STD_LOGIC;
    signal temp2_we0 : STD_LOGIC;
    signal temp2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp3_ce0 : STD_LOGIC;
    signal temp3_we0 : STD_LOGIC;
    signal temp3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_randombytes_fu_454_ap_start : STD_LOGIC;
    signal grp_randombytes_fu_454_ap_done : STD_LOGIC;
    signal grp_randombytes_fu_454_ap_idle : STD_LOGIC;
    signal grp_randombytes_fu_454_ap_ready : STD_LOGIC;
    signal grp_randombytes_fu_454_x_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_454_x_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_454_x_we0 : STD_LOGIC;
    signal grp_randombytes_fu_454_x_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_454_DRBG_ctx_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_randombytes_fu_454_DRBG_ctx_V_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_454_DRBG_ctx_V_we0 : STD_LOGIC;
    signal grp_randombytes_fu_454_DRBG_ctx_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_454_DRBG_ctx_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_randombytes_fu_454_DRBG_ctx_V_ce1 : STD_LOGIC;
    signal grp_randombytes_fu_454_DRBG_ctx_Key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_454_DRBG_ctx_Key_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_454_DRBG_ctx_Key_we0 : STD_LOGIC;
    signal grp_randombytes_fu_454_DRBG_ctx_Key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_454_DRBG_ctx_Key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_454_DRBG_ctx_Key_ce1 : STD_LOGIC;
    signal grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o_ap_vld : STD_LOGIC;
    signal grp_LowMCEnc_fu_471_ap_start : STD_LOGIC;
    signal grp_LowMCEnc_fu_471_ap_done : STD_LOGIC;
    signal grp_LowMCEnc_fu_471_ap_idle : STD_LOGIC;
    signal grp_LowMCEnc_fu_471_ap_ready : STD_LOGIC;
    signal grp_LowMCEnc_fu_471_plaintext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LowMCEnc_fu_471_plaintext_ce0 : STD_LOGIC;
    signal grp_LowMCEnc_fu_471_output_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LowMCEnc_fu_471_output_r_ce0 : STD_LOGIC;
    signal grp_LowMCEnc_fu_471_output_r_we0 : STD_LOGIC;
    signal grp_LowMCEnc_fu_471_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LowMCEnc_fu_471_key_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LowMCEnc_fu_471_key_ce0 : STD_LOGIC;
    signal phi_ln210_reg_374 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln210_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln210_1_reg_385 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln210_1_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln210_2_reg_396 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln210_2_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_0_reg_407 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal loop_1_reg_418 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal loop_2_reg_430 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_0_reg_441 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_30_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_randombytes_fu_454_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_LowMCEnc_fu_471_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln210_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_1_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_2_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln212_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln212_1_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln212_2_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln212_3_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln212_4_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln222_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln222_1_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln212_5_fu_685_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln223_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln213_2_fu_702_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln214_2_fu_713_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_19_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_21_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_23_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_22_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_25_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_24_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_29_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_28_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln212_fu_632_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln212_1_fu_661_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln212_2_fu_673_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln222_2_fu_736_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_fu_761_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal select_ln166_fu_794_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component randombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_we0 : OUT STD_LOGIC;
        x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce0 : OUT STD_LOGIC;
        DRBG_ctx_V_we0 : OUT STD_LOGIC;
        DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce1 : OUT STD_LOGIC;
        DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
        DRBG_ctx_Key_we0 : OUT STD_LOGIC;
        DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
        DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC );
    end component;


    component LowMCEnc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        plaintext_ce0 : OUT STD_LOGIC;
        plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component picnic_keygen_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_U : component picnic_keygen_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);

    temp2_U : component picnic_keygen_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp2_address0,
        ce0 => temp2_ce0,
        we0 => temp2_we0,
        d0 => temp2_d0,
        q0 => temp2_q0);

    temp3_U : component picnic_keygen_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp3_address0,
        ce0 => temp3_ce0,
        we0 => temp3_we0,
        d0 => temp3_d0,
        q0 => temp3_q0);

    grp_randombytes_fu_454 : component randombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_randombytes_fu_454_ap_start,
        ap_done => grp_randombytes_fu_454_ap_done,
        ap_idle => grp_randombytes_fu_454_ap_idle,
        ap_ready => grp_randombytes_fu_454_ap_ready,
        x_address0 => grp_randombytes_fu_454_x_address0,
        x_ce0 => grp_randombytes_fu_454_x_ce0,
        x_we0 => grp_randombytes_fu_454_x_we0,
        x_d0 => grp_randombytes_fu_454_x_d0,
        DRBG_ctx_V_address0 => grp_randombytes_fu_454_DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0 => grp_randombytes_fu_454_DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0 => grp_randombytes_fu_454_DRBG_ctx_V_we0,
        DRBG_ctx_V_d0 => grp_randombytes_fu_454_DRBG_ctx_V_d0,
        DRBG_ctx_V_q0 => DRBG_ctx_V_q0,
        DRBG_ctx_V_address1 => grp_randombytes_fu_454_DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1 => grp_randombytes_fu_454_DRBG_ctx_V_ce1,
        DRBG_ctx_V_q1 => DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0 => grp_randombytes_fu_454_DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0 => grp_randombytes_fu_454_DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0 => grp_randombytes_fu_454_DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0 => grp_randombytes_fu_454_DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0 => DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1 => grp_randombytes_fu_454_DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1 => grp_randombytes_fu_454_DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1 => DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i => DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o => grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld => grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o_ap_vld);

    grp_LowMCEnc_fu_471 : component LowMCEnc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_LowMCEnc_fu_471_ap_start,
        ap_done => grp_LowMCEnc_fu_471_ap_done,
        ap_idle => grp_LowMCEnc_fu_471_ap_idle,
        ap_ready => grp_LowMCEnc_fu_471_ap_ready,
        plaintext_address0 => grp_LowMCEnc_fu_471_plaintext_address0,
        plaintext_ce0 => grp_LowMCEnc_fu_471_plaintext_ce0,
        plaintext_q0 => temp2_q0,
        output_r_address0 => grp_LowMCEnc_fu_471_output_r_address0,
        output_r_ce0 => grp_LowMCEnc_fu_471_output_r_ce0,
        output_r_we0 => grp_LowMCEnc_fu_471_output_r_we0,
        output_r_d0 => grp_LowMCEnc_fu_471_output_r_d0,
        output_r_q0 => temp_q0,
        key_address0 => grp_LowMCEnc_fu_471_key_address0,
        key_ce0 => grp_LowMCEnc_fu_471_key_ce0,
        key_q0 => temp3_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_return_0_preg <= select_ln166_fu_794_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_return_1_preg <= parameters;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_return_2_preg <= parameters;
                end if; 
            end if;
        end if;
    end process;


    grp_LowMCEnc_fu_471_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_LowMCEnc_fu_471_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_fu_613_p3 = ap_const_lv1_1))) then 
                    grp_LowMCEnc_fu_471_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_LowMCEnc_fu_471_ap_ready = ap_const_logic_1)) then 
                    grp_LowMCEnc_fu_471_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_randombytes_fu_454_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_randombytes_fu_454_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (empty_30_fu_556_p2 = ap_const_lv1_0)))) then 
                    grp_randombytes_fu_454_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_randombytes_fu_454_ap_ready = ap_const_logic_1)) then 
                    grp_randombytes_fu_454_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    loop_0_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln210_2_fu_607_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                loop_0_reg_407 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                loop_0_reg_407 <= loop_reg_895;
            end if; 
        end if;
    end process;

    loop_1_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                loop_1_reg_418 <= loop_3_reg_963;
            elsif (((grp_LowMCEnc_fu_471_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                loop_1_reg_418 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    loop_2_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln221_fu_724_p2 = ap_const_lv1_1))) then 
                loop_2_reg_430 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                loop_2_reg_430 <= loop_4_reg_976;
            end if; 
        end if;
    end process;

    p_0_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln230_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                p_0_reg_441 <= ap_const_lv1_0;
            elsif (((empty_30_fu_556_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0_reg_441 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    phi_ln210_1_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln210_fu_573_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln210_1_reg_385 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln210_1_fu_590_p2 = ap_const_lv1_0))) then 
                phi_ln210_1_reg_385 <= add_ln210_1_fu_579_p2;
            end if; 
        end if;
    end process;

    phi_ln210_2_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln210_1_fu_590_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_ln210_2_reg_396 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln210_2_fu_607_p2 = ap_const_lv1_0))) then 
                phi_ln210_2_reg_396 <= add_ln210_2_fu_596_p2;
            end if; 
        end if;
    end process;

    phi_ln210_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln210_fu_573_p2 = ap_const_lv1_0))) then 
                phi_ln210_reg_374 <= add_ln210_fu_562_p2;
            elsif (((grp_randombytes_fu_454_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln210_reg_374 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                loop_3_reg_963 <= loop_3_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                loop_4_reg_976 <= loop_4_fu_782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_fu_613_p3 = ap_const_lv1_0))) then
                loop_reg_895 <= loop_fu_655_p2;
                trunc_ln211_reg_859 <= trunc_ln211_fu_628_p1;
                trunc_ln212_1_reg_870 <= loop_0_reg_407(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                pk_ciphertext_load_1_reg_905 <= pk_ciphertext_q1;
                pk_ciphertext_load_reg_900 <= pk_ciphertext_q0;
                pk_plaintext_load_1_reg_925 <= pk_plaintext_q1;
                pk_plaintext_load_reg_920 <= pk_plaintext_q0;
                sk_data_load_1_reg_945 <= sk_data_q1;
                sk_data_load_reg_940 <= sk_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln221_fu_724_p2 = ap_const_lv1_0))) then
                temp_addr_2_reg_968 <= zext_ln222_fu_746_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln230_fu_776_p2 = ap_const_lv1_0))) then
                    zext_ln231_reg_981(5 downto 0) <= zext_ln231_fu_788_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln231_reg_981(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_fu_613_p3, ap_CS_fsm_state12, icmp_ln221_fu_724_p2, ap_CS_fsm_state14, icmp_ln230_fu_776_p2, grp_randombytes_fu_454_ap_done, grp_LowMCEnc_fu_471_ap_done, ap_CS_fsm_state4, icmp_ln210_fu_573_p2, icmp_ln210_1_fu_590_p2, icmp_ln210_2_fu_607_p2, ap_CS_fsm_state11, empty_30_fu_556_p2, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((empty_30_fu_556_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (empty_30_fu_556_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_randombytes_fu_454_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_randombytes_fu_454_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln210_fu_573_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln210_1_fu_590_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln210_2_fu_607_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_fu_613_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state11 => 
                if (((grp_LowMCEnc_fu_471_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln221_fu_724_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln230_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    DRBG_ctx_Key_address0 <= grp_randombytes_fu_454_DRBG_ctx_Key_address0;
    DRBG_ctx_Key_address1 <= grp_randombytes_fu_454_DRBG_ctx_Key_address1;

    DRBG_ctx_Key_ce0_assign_proc : process(grp_randombytes_fu_454_DRBG_ctx_Key_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_Key_ce0 <= grp_randombytes_fu_454_DRBG_ctx_Key_ce0;
        else 
            DRBG_ctx_Key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_Key_ce1_assign_proc : process(grp_randombytes_fu_454_DRBG_ctx_Key_ce1, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_Key_ce1 <= grp_randombytes_fu_454_DRBG_ctx_Key_ce1;
        else 
            DRBG_ctx_Key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DRBG_ctx_Key_d0 <= grp_randombytes_fu_454_DRBG_ctx_Key_d0;

    DRBG_ctx_Key_we0_assign_proc : process(grp_randombytes_fu_454_DRBG_ctx_Key_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_Key_we0 <= grp_randombytes_fu_454_DRBG_ctx_Key_we0;
        else 
            DRBG_ctx_Key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    DRBG_ctx_V_address0 <= grp_randombytes_fu_454_DRBG_ctx_V_address0;
    DRBG_ctx_V_address1 <= grp_randombytes_fu_454_DRBG_ctx_V_address1;

    DRBG_ctx_V_ce0_assign_proc : process(grp_randombytes_fu_454_DRBG_ctx_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_ce0 <= grp_randombytes_fu_454_DRBG_ctx_V_ce0;
        else 
            DRBG_ctx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_ce1_assign_proc : process(grp_randombytes_fu_454_DRBG_ctx_V_ce1, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_ce1 <= grp_randombytes_fu_454_DRBG_ctx_V_ce1;
        else 
            DRBG_ctx_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DRBG_ctx_V_d0 <= grp_randombytes_fu_454_DRBG_ctx_V_d0;

    DRBG_ctx_V_we0_assign_proc : process(grp_randombytes_fu_454_DRBG_ctx_V_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_we0 <= grp_randombytes_fu_454_DRBG_ctx_V_we0;
        else 
            DRBG_ctx_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_reseed_counter_o_assign_proc : process(DRBG_ctx_reseed_counter_i, grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o, grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o_ap_vld, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_1)))) then 
            DRBG_ctx_reseed_counter_o <= grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o;
        else 
            DRBG_ctx_reseed_counter_o <= DRBG_ctx_reseed_counter_i;
        end if; 
    end process;


    DRBG_ctx_reseed_counter_o_ap_vld_assign_proc : process(grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o_ap_vld, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_reseed_counter_o_ap_vld <= grp_randombytes_fu_454_DRBG_ctx_reseed_counter_o_ap_vld;
        else 
            DRBG_ctx_reseed_counter_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln210_1_fu_579_p2 <= std_logic_vector(unsigned(phi_ln210_1_reg_385) + unsigned(ap_const_lv3_1));
    add_ln210_2_fu_596_p2 <= std_logic_vector(unsigned(phi_ln210_2_reg_396) + unsigned(ap_const_lv3_1));
    add_ln210_fu_562_p2 <= std_logic_vector(unsigned(phi_ln210_reg_374) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state16, select_ln166_fu_794_p3, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_return_0 <= select_ln166_fu_794_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(parameters, ap_CS_fsm_state16, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_return_1 <= parameters;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(parameters, ap_CS_fsm_state16, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_return_2 <= parameters;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;

    empty_19_fu_490_p2 <= "1" when (parameters = ap_const_lv4_E) else "0";
    empty_20_fu_496_p2 <= (empty_fu_484_p2 or empty_19_fu_490_p2);
    empty_21_fu_502_p2 <= "1" when (parameters = ap_const_lv4_D) else "0";
    empty_22_fu_508_p2 <= (empty_21_fu_502_p2 or empty_20_fu_496_p2);
    empty_23_fu_514_p2 <= "1" when (parameters = ap_const_lv4_C) else "0";
    empty_24_fu_520_p2 <= (empty_23_fu_514_p2 or empty_22_fu_508_p2);
    empty_25_fu_526_p2 <= "1" when (parameters = ap_const_lv4_B) else "0";
    empty_26_fu_532_p2 <= (empty_25_fu_526_p2 or empty_24_fu_520_p2);
    empty_27_fu_538_p2 <= "1" when (parameters = ap_const_lv4_A) else "0";
    empty_28_fu_544_p2 <= (empty_27_fu_538_p2 or empty_26_fu_532_p2);
    empty_29_fu_550_p2 <= "1" when (parameters = ap_const_lv4_0) else "0";
    empty_30_fu_556_p2 <= (empty_29_fu_550_p2 or empty_28_fu_544_p2);
    empty_fu_484_p2 <= "1" when (parameters = ap_const_lv4_F) else "0";
    grp_LowMCEnc_fu_471_ap_start <= grp_LowMCEnc_fu_471_ap_start_reg;
    grp_randombytes_fu_454_ap_start <= grp_randombytes_fu_454_ap_start_reg;
    icmp_ln210_1_fu_590_p2 <= "1" when (phi_ln210_1_reg_385 = ap_const_lv3_7) else "0";
    icmp_ln210_2_fu_607_p2 <= "1" when (phi_ln210_2_reg_396 = ap_const_lv3_7) else "0";
    icmp_ln210_fu_573_p2 <= "1" when (phi_ln210_reg_374 = ap_const_lv3_7) else "0";
    icmp_ln221_fu_724_p2 <= "1" when (loop_1_reg_418 = ap_const_lv6_20) else "0";
    icmp_ln230_fu_776_p2 <= "1" when (loop_2_reg_430 = ap_const_lv6_20) else "0";
    loop_3_fu_730_p2 <= std_logic_vector(unsigned(loop_1_reg_418) + unsigned(ap_const_lv6_1));
    loop_4_fu_782_p2 <= std_logic_vector(unsigned(loop_2_reg_430) + unsigned(ap_const_lv6_1));
    loop_fu_655_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) + unsigned(loop_0_reg_407));
    lshr_ln_fu_761_p4 <= temp_q0(31 downto 8);
    or_ln212_1_fu_661_p2 <= (trunc_ln211_reg_859 or ap_const_lv5_2);
    or_ln212_2_fu_673_p2 <= (trunc_ln211_reg_859 or ap_const_lv5_3);
    or_ln212_5_fu_685_p5 <= (((pk_ciphertext_q1 & pk_ciphertext_q0) & pk_ciphertext_load_1_reg_905) & pk_ciphertext_load_reg_900);
    or_ln212_fu_632_p2 <= (trunc_ln211_fu_628_p1 or ap_const_lv5_1);
    or_ln213_2_fu_702_p5 <= (((pk_plaintext_q1 & pk_plaintext_q0) & pk_plaintext_load_1_reg_925) & pk_plaintext_load_reg_920);
    or_ln214_2_fu_713_p5 <= (((sk_data_q1 & sk_data_q0) & sk_data_load_1_reg_945) & sk_data_load_reg_940);

    pk_ciphertext_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, zext_ln212_fu_621_p1, zext_ln212_2_fu_666_p1, zext_ln222_1_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_ciphertext_address0 <= zext_ln222_1_fu_756_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pk_ciphertext_address0 <= zext_ln212_2_fu_666_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pk_ciphertext_address0 <= zext_ln212_fu_621_p1(5 - 1 downto 0);
        else 
            pk_ciphertext_address0 <= "XXXXX";
        end if; 
    end process;


    pk_ciphertext_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, zext_ln231_fu_788_p1, zext_ln212_1_fu_638_p1, zext_ln212_3_fu_678_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            pk_ciphertext_address1 <= zext_ln231_fu_788_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pk_ciphertext_address1 <= zext_ln212_3_fu_678_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pk_ciphertext_address1 <= zext_ln212_1_fu_638_p1(5 - 1 downto 0);
        else 
            pk_ciphertext_address1 <= "XXXXX";
        end if; 
    end process;


    pk_ciphertext_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            pk_ciphertext_ce0 <= ap_const_logic_1;
        else 
            pk_ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ciphertext_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            pk_ciphertext_ce1 <= ap_const_logic_1;
        else 
            pk_ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pk_ciphertext_d0 <= temp_q0(8 - 1 downto 0);

    pk_ciphertext_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_ciphertext_we0 <= ap_const_logic_1;
        else 
            pk_ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_plaintext_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, zext_ln231_fu_788_p1, grp_randombytes_fu_454_x_address0, ap_CS_fsm_state4, zext_ln212_fu_621_p1, zext_ln212_2_fu_666_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            pk_plaintext_address0 <= zext_ln231_fu_788_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pk_plaintext_address0 <= zext_ln212_2_fu_666_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pk_plaintext_address0 <= zext_ln212_fu_621_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_plaintext_address0 <= grp_randombytes_fu_454_x_address0;
        else 
            pk_plaintext_address0 <= "XXXXX";
        end if; 
    end process;


    pk_plaintext_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln212_1_fu_638_p1, zext_ln212_3_fu_678_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pk_plaintext_address1 <= zext_ln212_3_fu_678_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pk_plaintext_address1 <= zext_ln212_1_fu_638_p1(5 - 1 downto 0);
        else 
            pk_plaintext_address1 <= "XXXXX";
        end if; 
    end process;


    pk_plaintext_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, grp_randombytes_fu_454_x_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            pk_plaintext_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_plaintext_ce0 <= grp_randombytes_fu_454_x_ce0;
        else 
            pk_plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_plaintext_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            pk_plaintext_ce1 <= ap_const_logic_1;
        else 
            pk_plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pk_plaintext_d0 <= grp_randombytes_fu_454_x_d0;

    pk_plaintext_we0_assign_proc : process(grp_randombytes_fu_454_x_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_plaintext_we0 <= grp_randombytes_fu_454_x_we0;
        else 
            pk_plaintext_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln166_fu_794_p3 <= 
        ap_const_lv32_FFFFFFFF when (p_0_reg_441(0) = '1') else 
        ap_const_lv32_0;

    sk_data_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, grp_randombytes_fu_454_x_address0, ap_CS_fsm_state2, zext_ln212_fu_621_p1, zext_ln212_2_fu_666_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sk_data_address0 <= zext_ln212_2_fu_666_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk_data_address0 <= zext_ln212_fu_621_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_data_address0 <= grp_randombytes_fu_454_x_address0;
        else 
            sk_data_address0 <= "XXXXX";
        end if; 
    end process;


    sk_data_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln212_1_fu_638_p1, zext_ln212_3_fu_678_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sk_data_address1 <= zext_ln212_3_fu_678_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk_data_address1 <= zext_ln212_1_fu_638_p1(5 - 1 downto 0);
        else 
            sk_data_address1 <= "XXXXX";
        end if; 
    end process;


    sk_data_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, grp_randombytes_fu_454_x_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sk_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_data_ce0 <= grp_randombytes_fu_454_x_ce0;
        else 
            sk_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_data_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sk_data_ce1 <= ap_const_logic_1;
        else 
            sk_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sk_data_d0 <= grp_randombytes_fu_454_x_d0;

    sk_data_we0_assign_proc : process(grp_randombytes_fu_454_x_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_data_we0 <= grp_randombytes_fu_454_x_we0;
        else 
            sk_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sk_pk_ciphertext_address0 <= zext_ln231_reg_981(5 - 1 downto 0);

    sk_pk_ciphertext_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sk_pk_ciphertext_ce0 <= ap_const_logic_1;
        else 
            sk_pk_ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sk_pk_ciphertext_d0 <= pk_ciphertext_q1;

    sk_pk_ciphertext_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sk_pk_ciphertext_we0 <= ap_const_logic_1;
        else 
            sk_pk_ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sk_pk_plaintext_address0 <= zext_ln231_reg_981(5 - 1 downto 0);

    sk_pk_plaintext_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sk_pk_plaintext_ce0 <= ap_const_logic_1;
        else 
            sk_pk_plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sk_pk_plaintext_d0 <= pk_plaintext_q0;

    sk_pk_plaintext_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sk_pk_plaintext_we0 <= ap_const_logic_1;
        else 
            sk_pk_plaintext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_address0_assign_proc : process(ap_CS_fsm_state6, grp_LowMCEnc_fu_471_plaintext_address0, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln210_1_fu_585_p1, zext_ln212_4_fu_696_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp2_address0 <= zext_ln212_4_fu_696_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp2_address0 <= zext_ln210_1_fu_585_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp2_address0 <= grp_LowMCEnc_fu_471_plaintext_address0;
        else 
            temp2_address0 <= "XXX";
        end if; 
    end process;


    temp2_ce0_assign_proc : process(ap_CS_fsm_state6, grp_LowMCEnc_fu_471_plaintext_ce0, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            temp2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp2_ce0 <= grp_LowMCEnc_fu_471_plaintext_ce0;
        else 
            temp2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, or_ln213_2_fu_702_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp2_d0 <= or_ln213_2_fu_702_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp2_d0 <= ap_const_lv32_0;
        else 
            temp2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp2_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            temp2_we0 <= ap_const_logic_1;
        else 
            temp2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp3_address0_assign_proc : process(ap_CS_fsm_state7, grp_LowMCEnc_fu_471_key_address0, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln210_2_fu_602_p1, zext_ln212_4_fu_696_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp3_address0 <= zext_ln212_4_fu_696_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp3_address0 <= zext_ln210_2_fu_602_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp3_address0 <= grp_LowMCEnc_fu_471_key_address0;
        else 
            temp3_address0 <= "XXX";
        end if; 
    end process;


    temp3_ce0_assign_proc : process(ap_CS_fsm_state7, grp_LowMCEnc_fu_471_key_ce0, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp3_ce0 <= grp_LowMCEnc_fu_471_key_ce0;
        else 
            temp3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp3_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, or_ln214_2_fu_713_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp3_d0 <= or_ln214_2_fu_713_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp3_d0 <= ap_const_lv32_0;
        else 
            temp3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp3_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp3_we0 <= ap_const_logic_1;
        else 
            temp3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, temp_addr_2_reg_968, grp_LowMCEnc_fu_471_output_r_address0, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, zext_ln210_fu_568_p1, zext_ln212_4_fu_696_p1, zext_ln222_fu_746_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_address0 <= temp_addr_2_reg_968;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_address0 <= zext_ln222_fu_746_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_address0 <= zext_ln212_4_fu_696_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_address0 <= zext_ln210_fu_568_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_address0 <= grp_LowMCEnc_fu_471_output_r_address0;
        else 
            temp_address0 <= "XXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, grp_LowMCEnc_fu_471_output_r_ce0, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_ce0 <= grp_LowMCEnc_fu_471_output_r_ce0;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_state5, grp_LowMCEnc_fu_471_output_r_d0, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, or_ln212_5_fu_685_p5, zext_ln223_fu_771_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_d0 <= zext_ln223_fu_771_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_d0 <= or_ln212_5_fu_685_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_d0 <= grp_LowMCEnc_fu_471_output_r_d0;
        else 
            temp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state5, grp_LowMCEnc_fu_471_output_r_we0, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_we0 <= grp_LowMCEnc_fu_471_output_r_we0;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_613_p3 <= loop_0_reg_407(5 downto 5);
    trunc_ln211_fu_628_p1 <= loop_0_reg_407(5 - 1 downto 0);
    trunc_ln222_2_fu_736_p4 <= loop_1_reg_418(4 downto 2);
    zext_ln210_1_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln210_1_reg_385),64));
    zext_ln210_2_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln210_2_reg_396),64));
    zext_ln210_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln210_reg_374),64));
    zext_ln212_1_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln212_fu_632_p2),64));
    zext_ln212_2_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln212_1_fu_661_p2),64));
    zext_ln212_3_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln212_2_fu_673_p2),64));
    zext_ln212_4_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln212_1_reg_870),64));
    zext_ln212_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_407),64));
    zext_ln222_1_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_418),64));
    zext_ln222_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln222_2_fu_736_p4),64));
    zext_ln223_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_761_p4),32));
    zext_ln231_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_2_reg_430),64));
end behav;
