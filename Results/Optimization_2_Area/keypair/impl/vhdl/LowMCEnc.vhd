-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LowMCEnc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce0 : OUT STD_LOGIC;
    plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of LowMCEnc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv14_3E00 : STD_LOGIC_VECTOR (13 downto 0) := "11111000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_7C : STD_LOGIC_VECTOR (6 downto 0) := "1111100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal temp_matrix3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_matrix3_ce0 : STD_LOGIC;
    signal temp_matrix3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_363 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal loop_fu_373_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_reg_827 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln170_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln170_reg_832 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln169_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_390_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_845 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal output_addr_2_reg_850 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln111_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_408_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_reg_883 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln184_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_7_fu_423_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_7_reg_892 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal temp_addr_8_reg_900 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln194_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln194_fu_481_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln194_reg_906 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_addr_9_reg_913 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_addr_10_reg_919 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln194_fu_521_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln194_reg_925 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_fu_542_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln55_3_fu_551_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln55_3_reg_937 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_561_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln55_5_fu_570_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln55_5_reg_949 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_580_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln205_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln205_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal temp_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_load_2_reg_966 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_fu_737_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln225_reg_971 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln226_fu_751_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln226_reg_976 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_matrix_mul_fu_336_ap_ready : STD_LOGIC;
    signal grp_matrix_mul_fu_336_ap_done : STD_LOGIC;
    signal i_fu_763_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_984 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal output_addr_3_reg_989 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln111_1_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_801_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_1002 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal output_addr_4_reg_1007 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln111_2_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_813_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal roundKey_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal roundKey_ce0 : STD_LOGIC;
    signal roundKey_we0 : STD_LOGIC;
    signal roundKey_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_ce1 : STD_LOGIC;
    signal temp_we1 : STD_LOGIC;
    signal temp_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_matrix_mul_fu_336_ap_start : STD_LOGIC;
    signal grp_matrix_mul_fu_336_ap_idle : STD_LOGIC;
    signal grp_matrix_mul_fu_336_output_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matrix_mul_fu_336_output_r_ce0 : STD_LOGIC;
    signal grp_matrix_mul_fu_336_output_r_we0 : STD_LOGIC;
    signal grp_matrix_mul_fu_336_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_1_fu_345_ap_start : STD_LOGIC;
    signal grp_matrix_mul_1_fu_345_ap_done : STD_LOGIC;
    signal grp_matrix_mul_1_fu_345_ap_idle : STD_LOGIC;
    signal grp_matrix_mul_1_fu_345_ap_ready : STD_LOGIC;
    signal grp_matrix_mul_1_fu_345_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_mul_1_fu_345_output_r_ce0 : STD_LOGIC;
    signal grp_matrix_mul_1_fu_345_output_r_we0 : STD_LOGIC;
    signal grp_matrix_mul_1_fu_345_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_1_fu_345_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matrix_mul_1_fu_345_state_ce0 : STD_LOGIC;
    signal grp_matrix_mul_1_fu_345_matrix_offset : STD_LOGIC_VECTOR (13 downto 0);
    signal loop_0_reg_256 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_i_reg_267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal r_0_reg_278 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_1_reg_290 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal bitNumber_assign_2_reg_302 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln189_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i49_reg_314 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_0_i56_reg_325 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_matrix_mul_fu_336_ap_start_reg : STD_LOGIC := '0';
    signal grp_matrix_mul_1_fu_345_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln112_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln191_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_2_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_4_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_1_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_4_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_2_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln192_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal or_ln220_2_fu_725_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln112_1_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln191_fu_429_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal or_ln68_1_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal or_ln68_2_fu_718_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_439_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln200_fu_460_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln8_fu_466_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln201_fu_485_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln55_2_fu_491_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln55_4_fu_506_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln55_fu_527_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln55_1_fu_532_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln55_fu_536_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln55_1_fu_546_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln55_1_fu_555_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln55_fu_565_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln55_3_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln204_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln204_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_fu_600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln204_fu_596_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln68_fu_606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln68_fu_618_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_3_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln205_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln205_1_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_4_fu_649_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln205_fu_645_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln68_3_fu_654_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln68_1_fu_665_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_5_fu_660_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln206_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln206_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln206_1_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_6_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln206_fu_692_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln68_4_fu_701_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln68_2_fu_712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_7_fu_707_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_743_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln112_3_fu_774_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln112_fu_778_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component matrix_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matrix_offset : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component matrix_mul_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        matrix_offset : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component LowMCEnc_temp_matg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LowMCEnc_roundKey IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LowMCEnc_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    temp_matrix3_U : component LowMCEnc_temp_matg8j
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_matrix3_address0,
        ce0 => temp_matrix3_ce0,
        q0 => temp_matrix3_q0);

    roundKey_U : component LowMCEnc_roundKey
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => roundKey_address0,
        ce0 => roundKey_ce0,
        we0 => roundKey_we0,
        d0 => grp_matrix_mul_1_fu_345_output_r_d0,
        q0 => roundKey_q0);

    temp_U : component LowMCEnc_temp
    generic map (
        DataWidth => 8,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0,
        address1 => temp_address1,
        ce1 => temp_ce1,
        we1 => temp_we1,
        d1 => temp_d1,
        q1 => temp_q1);

    grp_matrix_mul_fu_336 : component matrix_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mul_fu_336_ap_start,
        ap_done => grp_matrix_mul_fu_336_ap_done,
        ap_idle => grp_matrix_mul_fu_336_ap_idle,
        ap_ready => grp_matrix_mul_fu_336_ap_ready,
        output_r_address0 => grp_matrix_mul_fu_336_output_r_address0,
        output_r_ce0 => grp_matrix_mul_fu_336_output_r_ce0,
        output_r_we0 => grp_matrix_mul_fu_336_output_r_we0,
        output_r_d0 => grp_matrix_mul_fu_336_output_r_d0,
        output_r_q0 => output_r_q0,
        matrix_offset => add_ln225_reg_971);

    grp_matrix_mul_1_fu_345 : component matrix_mul_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mul_1_fu_345_ap_start,
        ap_done => grp_matrix_mul_1_fu_345_ap_done,
        ap_idle => grp_matrix_mul_1_fu_345_ap_idle,
        ap_ready => grp_matrix_mul_1_fu_345_ap_ready,
        output_r_address0 => grp_matrix_mul_1_fu_345_output_r_address0,
        output_r_ce0 => grp_matrix_mul_1_fu_345_output_r_ce0,
        output_r_we0 => grp_matrix_mul_1_fu_345_output_r_we0,
        output_r_d0 => grp_matrix_mul_1_fu_345_output_r_d0,
        state_address0 => grp_matrix_mul_1_fu_345_state_address0,
        state_ce0 => grp_matrix_mul_1_fu_345_state_ce0,
        state_q0 => key_q0,
        matrix_offset => grp_matrix_mul_1_fu_345_matrix_offset);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matrix_mul_1_fu_345_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mul_1_fu_345_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln169_fu_367_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln184_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
                    grp_matrix_mul_1_fu_345_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mul_1_fu_345_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mul_1_fu_345_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_mul_fu_336_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mul_fu_336_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_matrix_mul_fu_336_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mul_fu_336_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mul_fu_336_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bitNumber_assign_2_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln189_fu_417_p2 = ap_const_lv1_1))) then 
                bitNumber_assign_2_reg_302 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                bitNumber_assign_2_reg_302 <= add_ln194_reg_925;
            end if; 
        end if;
    end process;

    i_0_i49_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_0_i49_reg_314 <= i_reg_984;
            elsif (((grp_matrix_mul_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_0_i49_reg_314 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i56_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln111_1_fu_757_p2 = ap_const_lv1_1))) then 
                i_0_i56_reg_325 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_0_i56_reg_325 <= i_8_reg_1002;
            end if; 
        end if;
    end process;

    i_0_i_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_reg_267 <= i_7_reg_845;
            elsif (((grp_matrix_mul_1_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i_reg_267 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    loop_0_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loop_0_reg_256 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                loop_0_reg_256 <= loop_reg_827;
            end if; 
        end if;
    end process;

    loop_1_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                loop_1_reg_290 <= loop_7_reg_892;
            elsif (((grp_matrix_mul_1_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                loop_1_reg_290 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_0_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln111_2_fu_795_p2 = ap_const_lv1_1))) then 
                r_0_reg_278 <= r_fu_813_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_384_p2 = ap_const_lv1_1))) then 
                r_0_reg_278 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                a_reg_930 <= a_fu_542_p1;
                b_reg_943 <= b_fu_561_p1;
                c_reg_955 <= c_fu_580_p1;
                    zext_ln55_3_reg_937(2 downto 0) <= zext_ln55_3_fu_551_p1(2 downto 0);
                    zext_ln55_5_reg_949(2 downto 0) <= zext_ln55_5_fu_570_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln194_reg_925 <= add_ln194_fu_521_p2;
                    temp_addr_10_reg_919(1 downto 0) <= zext_ln55_4_fu_516_p1(7 - 1 downto 0)(1 downto 0);
                    temp_addr_9_reg_913(1 downto 0) <= zext_ln55_2_fu_501_p1(7 - 1 downto 0)(1 downto 0);
                trunc_ln194_reg_906 <= trunc_ln194_fu_481_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    add_ln225_reg_971(13 downto 9) <= add_ln225_fu_737_p2(13 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_matrix_mul_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    add_ln226_reg_976(6 downto 2) <= add_ln226_fu_751_p2(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_7_reg_845 <= i_7_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_8_reg_1002 <= i_8_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_reg_984 <= i_fu_763_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                loop_7_reg_892 <= loop_7_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                loop_reg_827 <= loop_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_fu_384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                output_addr_2_reg_850 <= zext_ln112_fu_396_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_1_fu_757_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                output_addr_3_reg_989 <= zext_ln112_1_fu_769_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_2_fu_795_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                output_addr_4_reg_1007 <= zext_ln112_2_fu_807_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_363 <= temp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln184_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    shl_ln_reg_883(13 downto 9) <= shl_ln_fu_408_p3(13 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln194_fu_454_p2 = ap_const_lv1_1))) then
                    temp_addr_8_reg_900(1 downto 0) <= zext_ln55_fu_476_p1(7 - 1 downto 0)(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                temp_load_2_reg_966 <= temp_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                xor_ln205_reg_961 <= xor_ln205_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln169_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln170_reg_832(2 downto 0) <= zext_ln170_fu_379_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln170_reg_832(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    shl_ln_reg_883(8 downto 0) <= "000000000";
    temp_addr_8_reg_900(6 downto 2) <= "00000";
    temp_addr_9_reg_913(6 downto 2) <= "00000";
    temp_addr_10_reg_919(6 downto 2) <= "00000";
    zext_ln55_3_reg_937(7 downto 3) <= "00000";
    zext_ln55_5_reg_949(7 downto 3) <= "00000";
    add_ln225_reg_971(8 downto 0) <= "000000000";
    add_ln226_reg_976(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln169_fu_367_p2, ap_CS_fsm_state5, icmp_ln111_fu_384_p2, ap_CS_fsm_state7, icmp_ln184_fu_402_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln194_fu_454_p2, ap_CS_fsm_state21, grp_matrix_mul_fu_336_ap_done, ap_CS_fsm_state22, icmp_ln111_1_fu_757_p2, ap_CS_fsm_state24, icmp_ln111_2_fu_795_p2, grp_matrix_mul_1_fu_345_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state8, icmp_ln189_fu_417_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln169_fu_367_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((grp_matrix_mul_1_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln111_fu_384_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln184_fu_402_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((grp_matrix_mul_1_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln189_fu_417_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln194_fu_454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_matrix_mul_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln111_1_fu_757_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln111_2_fu_795_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_fu_542_p1 <= lshr_ln55_fu_536_p2(1 - 1 downto 0);
    add_ln112_fu_778_p2 <= std_logic_vector(unsigned(zext_ln112_3_fu_774_p1) + unsigned(add_ln226_reg_976));
    add_ln194_fu_521_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(bitNumber_assign_2_reg_302));
    add_ln200_fu_460_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(bitNumber_assign_2_reg_302));
    add_ln201_fu_485_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(bitNumber_assign_2_reg_302));
    add_ln225_fu_737_p2 <= std_logic_vector(unsigned(shl_ln_reg_883) + unsigned(ap_const_lv14_3E00));
    add_ln226_fu_751_p2 <= std_logic_vector(unsigned(shl_ln1_fu_743_p3) + unsigned(ap_const_lv7_7C));
    and_ln204_fu_584_p2 <= (c_fu_580_p1 and b_fu_561_p1);
    and_ln205_fu_631_p2 <= (c_reg_955 and a_reg_930);
    and_ln206_fu_678_p2 <= (b_reg_943 and a_reg_930);
    and_ln68_1_fu_665_p2 <= (xor_ln68_3_fu_654_p2 and temp_q1);
    and_ln68_2_fu_712_p2 <= (xor_ln68_4_fu_701_p2 and temp_q1);
    and_ln68_fu_618_p2 <= (xor_ln68_fu_606_p2 and reg_363);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln184_fu_402_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln184_fu_402_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln184_fu_402_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln184_fu_402_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_561_p1 <= lshr_ln55_1_fu_555_p2(1 - 1 downto 0);
    c_fu_580_p1 <= lshr_ln55_3_fu_574_p2(1 - 1 downto 0);
    grp_fu_356_p2 <= (roundKey_q0 xor output_r_q0);
    grp_matrix_mul_1_fu_345_ap_start <= grp_matrix_mul_1_fu_345_ap_start_reg;

    grp_matrix_mul_1_fu_345_matrix_offset_assign_proc : process(shl_ln_reg_883, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_matrix_mul_1_fu_345_matrix_offset <= shl_ln_reg_883;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_matrix_mul_1_fu_345_matrix_offset <= ap_const_lv14_0;
        else 
            grp_matrix_mul_1_fu_345_matrix_offset <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_matrix_mul_fu_336_ap_start <= grp_matrix_mul_fu_336_ap_start_reg;
    i_7_fu_390_p2 <= std_logic_vector(unsigned(i_0_i_reg_267) + unsigned(ap_const_lv3_1));
    i_8_fu_801_p2 <= std_logic_vector(unsigned(i_0_i56_reg_325) + unsigned(ap_const_lv3_1));
    i_fu_763_p2 <= std_logic_vector(unsigned(i_0_i49_reg_314) + unsigned(ap_const_lv3_1));
    icmp_ln111_1_fu_757_p2 <= "1" when (i_0_i49_reg_314 = ap_const_lv3_4) else "0";
    icmp_ln111_2_fu_795_p2 <= "1" when (i_0_i56_reg_325 = ap_const_lv3_4) else "0";
    icmp_ln111_fu_384_p2 <= "1" when (i_0_i_reg_267 = ap_const_lv3_4) else "0";
    icmp_ln169_fu_367_p2 <= "1" when (loop_0_reg_256 = ap_const_lv3_4) else "0";
    icmp_ln184_fu_402_p2 <= "1" when (r_0_reg_278 = ap_const_lv5_15) else "0";
    icmp_ln189_fu_417_p2 <= "1" when (loop_1_reg_290 = ap_const_lv3_4) else "0";
    icmp_ln194_fu_454_p2 <= "1" when (unsigned(bitNumber_assign_2_reg_302) < unsigned(ap_const_lv5_1E)) else "0";
    key_address0 <= grp_matrix_mul_1_fu_345_state_address0;

    key_ce0_assign_proc : process(grp_matrix_mul_1_fu_345_state_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            key_ce0 <= grp_matrix_mul_1_fu_345_state_ce0;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    loop_7_fu_423_p2 <= std_logic_vector(unsigned(loop_1_reg_290) + unsigned(ap_const_lv3_1));
    loop_fu_373_p2 <= std_logic_vector(unsigned(loop_0_reg_256) + unsigned(ap_const_lv3_1));
    lshr_ln55_1_fu_555_p2 <= std_logic_vector(shift_right(unsigned(temp_q1),to_integer(unsigned('0' & zext_ln55_3_fu_551_p1(8-1 downto 0)))));
    lshr_ln55_2_fu_491_p4 <= add_ln201_fu_485_p2(4 downto 3);
    lshr_ln55_3_fu_574_p2 <= std_logic_vector(shift_right(unsigned(temp_q0),to_integer(unsigned('0' & zext_ln55_5_fu_570_p1(8-1 downto 0)))));
    lshr_ln55_4_fu_506_p4 <= bitNumber_assign_2_reg_302(4 downto 3);
    lshr_ln55_fu_536_p2 <= std_logic_vector(shift_right(unsigned(reg_363),to_integer(unsigned('0' & zext_ln55_1_fu_532_p1(8-1 downto 0)))));
    lshr_ln8_fu_466_p4 <= add_ln200_fu_460_p2(4 downto 3);
    lshr_ln_fu_439_p4 <= output_r_q0(31 downto 8);
    or_ln220_2_fu_725_p5 <= (((temp_q0 & temp_q1) & temp_load_2_reg_966) & reg_363);
    or_ln68_1_fu_671_p2 <= (shl_ln68_5_fu_660_p2 or and_ln68_1_fu_665_p2);
    or_ln68_2_fu_718_p2 <= (shl_ln68_7_fu_707_p2 or and_ln68_2_fu_712_p2);

    output_r_address0_assign_proc : process(zext_ln170_reg_832, ap_CS_fsm_state5, output_addr_2_reg_850, ap_CS_fsm_state9, ap_CS_fsm_state21, ap_CS_fsm_state22, output_addr_3_reg_989, ap_CS_fsm_state24, output_addr_4_reg_1007, grp_matrix_mul_fu_336_output_r_address0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state25, zext_ln112_fu_396_p1, zext_ln112_1_fu_769_p1, zext_ln112_2_fu_807_p1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_address0 <= output_addr_4_reg_1007;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_address0 <= zext_ln112_2_fu_807_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_address0 <= output_addr_3_reg_989;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_r_address0 <= zext_ln112_1_fu_769_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= output_addr_2_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= zext_ln112_fu_396_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address0 <= zext_ln170_reg_832(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_address0 <= grp_matrix_mul_fu_336_output_r_address0;
        else 
            output_r_address0 <= "XXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state24, grp_matrix_mul_fu_336_output_r_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_ce0 <= grp_matrix_mul_fu_336_output_r_ce0;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(plaintext_q0, ap_CS_fsm_state21, grp_matrix_mul_fu_336_output_r_d0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state25, grp_fu_356_p2, zext_ln192_fu_449_p1, ap_CS_fsm_state19, or_ln220_2_fu_725_p5, xor_ln112_1_fu_788_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_d0 <= xor_ln112_1_fu_788_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_d0 <= or_ln220_2_fu_725_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d0 <= zext_ln192_fu_449_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_d0 <= grp_fu_356_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_d0 <= plaintext_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_d0 <= grp_matrix_mul_fu_336_output_r_d0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state21, grp_matrix_mul_fu_336_output_r_we0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_we0 <= grp_matrix_mul_fu_336_output_r_we0;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    plaintext_address0 <= zext_ln170_fu_379_p1(3 - 1 downto 0);

    plaintext_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            plaintext_ce0 <= ap_const_logic_1;
        else 
            plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_813_p2 <= std_logic_vector(unsigned(r_0_reg_278) + unsigned(ap_const_lv5_1));

    roundKey_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state24, grp_matrix_mul_1_fu_345_output_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state8, zext_ln112_fu_396_p1, zext_ln112_2_fu_807_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            roundKey_address0 <= zext_ln112_2_fu_807_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            roundKey_address0 <= zext_ln112_fu_396_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            roundKey_address0 <= grp_matrix_mul_1_fu_345_output_r_address0;
        else 
            roundKey_address0 <= "XXXX";
        end if; 
    end process;


    roundKey_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state24, grp_matrix_mul_1_fu_345_output_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            roundKey_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            roundKey_ce0 <= grp_matrix_mul_1_fu_345_output_r_ce0;
        else 
            roundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    roundKey_we0_assign_proc : process(grp_matrix_mul_1_fu_345_output_r_we0, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            roundKey_we0 <= grp_matrix_mul_1_fu_345_output_r_we0;
        else 
            roundKey_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_743_p3 <= (r_0_reg_278 & ap_const_lv2_0);
    shl_ln68_3_fu_612_p2 <= std_logic_vector(shift_left(unsigned(zext_ln204_fu_596_p1),to_integer(unsigned('0' & zext_ln55_1_fu_532_p1(8-1 downto 0)))));
    shl_ln68_4_fu_649_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln55_3_reg_937(8-1 downto 0)))));
    shl_ln68_5_fu_660_p2 <= std_logic_vector(shift_left(unsigned(zext_ln205_fu_645_p1),to_integer(unsigned('0' & zext_ln55_3_reg_937(8-1 downto 0)))));
    shl_ln68_6_fu_696_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln55_5_reg_949(8-1 downto 0)))));
    shl_ln68_7_fu_707_p2 <= std_logic_vector(shift_left(unsigned(zext_ln206_fu_692_p1),to_integer(unsigned('0' & zext_ln55_5_reg_949(8-1 downto 0)))));
    shl_ln68_fu_600_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln55_1_fu_532_p1(8-1 downto 0)))));
    shl_ln_fu_408_p3 <= (r_0_reg_278 & ap_const_lv9_0);
    sub_ln55_1_fu_546_p2 <= std_logic_vector(signed(ap_const_lv3_6) - signed(trunc_ln194_reg_906));
    sub_ln55_fu_527_p2 <= std_logic_vector(signed(ap_const_lv3_5) - signed(trunc_ln194_reg_906));

    temp_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state11, icmp_ln194_fu_454_p2, temp_addr_9_reg_913, temp_addr_10_reg_919, ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state17, zext_ln191_fu_434_p1, zext_ln55_fu_476_p1, zext_ln55_4_fu_516_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_address0 <= ap_const_lv64_3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp_address0 <= temp_addr_10_reg_919;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_address0 <= temp_addr_9_reg_913;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_address0 <= zext_ln55_4_fu_516_p1(7 - 1 downto 0);
        elsif (((icmp_ln194_fu_454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            temp_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln194_fu_454_p2 = ap_const_lv1_1))) then 
            temp_address0 <= zext_ln55_fu_476_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_address0 <= zext_ln191_fu_434_p1(7 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXXX";
        end if; 
    end process;


    temp_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, temp_addr_8_reg_900, ap_CS_fsm_state11, temp_addr_9_reg_913, temp_addr_10_reg_919, ap_CS_fsm_state13, zext_ln55_2_fu_501_p1, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_address1 <= ap_const_lv64_2(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_address1 <= temp_addr_10_reg_919;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_address1 <= temp_addr_9_reg_913;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_address1 <= temp_addr_8_reg_900;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_address1 <= zext_ln55_2_fu_501_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_address1 <= ap_const_lv64_1(7 - 1 downto 0);
        else 
            temp_address1 <= "XXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state11, icmp_ln194_fu_454_p2, ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((icmp_ln194_fu_454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln194_fu_454_p2 = ap_const_lv1_1)))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            temp_ce1 <= ap_const_logic_1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state17, trunc_ln191_fu_429_p1, or_ln68_1_fu_671_p2, or_ln68_2_fu_718_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp_d0 <= or_ln68_2_fu_718_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_d0 <= or_ln68_1_fu_671_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_d0 <= trunc_ln191_fu_429_p1;
        else 
            temp_d0 <= "XXXXXXXX";
        end if; 
    end process;

    temp_d1 <= (shl_ln68_3_fu_612_p2 or and_ln68_fu_618_p2);
    temp_matrix3_address0 <= zext_ln112_4_fu_783_p1(7 - 1 downto 0);

    temp_matrix3_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            temp_matrix3_ce0 <= ap_const_logic_1;
        else 
            temp_matrix3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we1_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_we1 <= ap_const_logic_1;
        else 
            temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln191_fu_429_p1 <= output_r_q0(8 - 1 downto 0);
    trunc_ln194_fu_481_p1 <= bitNumber_assign_2_reg_302(3 - 1 downto 0);
    xor_ln112_1_fu_788_p2 <= (temp_matrix3_q0 xor output_r_q0);
    xor_ln204_fu_590_p2 <= (and_ln204_fu_584_p2 xor a_fu_542_p1);
    xor_ln205_1_fu_639_p2 <= (xor_ln205_fu_635_p2 xor and_ln205_fu_631_p2);
    xor_ln205_fu_635_p2 <= (b_reg_943 xor a_reg_930);
    xor_ln206_1_fu_686_p2 <= (xor_ln206_fu_682_p2 xor and_ln206_fu_678_p2);
    xor_ln206_fu_682_p2 <= (xor_ln205_reg_961 xor c_reg_955);
    xor_ln55_fu_565_p2 <= (trunc_ln194_reg_906 xor ap_const_lv3_7);
    xor_ln68_3_fu_654_p2 <= (shl_ln68_4_fu_649_p2 xor ap_const_lv8_FF);
    xor_ln68_4_fu_701_p2 <= (shl_ln68_6_fu_696_p2 xor ap_const_lv8_FF);
    xor_ln68_fu_606_p2 <= (shl_ln68_fu_600_p2 xor ap_const_lv8_FF);
    zext_ln112_1_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i49_reg_314),64));
    zext_ln112_2_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i56_reg_325),64));
    zext_ln112_3_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i49_reg_314),7));
    zext_ln112_4_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_fu_778_p2),64));
    zext_ln112_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_267),64));
    zext_ln170_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_256),64));
    zext_ln191_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_290),64));
    zext_ln192_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_439_p4),32));
    zext_ln204_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln204_fu_590_p2),8));
    zext_ln205_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln205_1_fu_639_p2),8));
    zext_ln206_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln206_1_fu_686_p2),8));
    zext_ln55_1_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln55_fu_527_p2),8));
    zext_ln55_2_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln55_2_fu_491_p4),64));
    zext_ln55_3_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln55_1_fu_546_p2),8));
    zext_ln55_4_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln55_4_fu_506_p4),64));
    zext_ln55_5_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln55_fu_565_p2),8));
    zext_ln55_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln8_fu_466_p4),64));
end behav;
