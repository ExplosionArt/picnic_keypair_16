-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_offset : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of matrix_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal temp_matrix2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal temp_matrix2_ce0 : STD_LOGIC;
    signal temp_matrix2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_269_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_892 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln134_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_reg_897 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln130_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln130_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_325_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal prod_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln87_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_939 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_reg_944 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_addr_5_reg_950 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln128_fu_373_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_reg_955 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln128_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_960 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_2_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln68_cast_fu_595_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln68_cast_reg_969 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln68_fu_610_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_reg_974 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln68_fu_751_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln68_reg_980 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln68_2_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_fu_876_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_reg_996 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln141_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_reg_1001 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln140_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prod_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal prod_ce0 : STD_LOGIC;
    signal prod_we0 : STD_LOGIC;
    signal prod_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitNumber_assign105_reg_213 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_0104_reg_225 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_0_i_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_247 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_0_reg_258 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln134_2_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_15_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln68_7_fu_863_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_279_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln130_fu_275_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln133_fu_287_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln133_fu_293_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln134_fu_302_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_358_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_fu_389_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln96_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln5_fu_435_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln96_6_fu_419_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_2_fu_415_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln97_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_4_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln6_fu_479_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln97_2_fu_463_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln97_fu_457_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln98_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln98_2_fu_507_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln98_fu_501_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_5_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_529_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln98_4_fu_523_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_6_fu_547_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_fu_403_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_449_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln101_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_407_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln101_6_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln101_7_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln101_5_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln101_8_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln68_fu_602_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln68_14_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_16_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_17_fu_626_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln68_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln68_fu_640_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln68_4_fu_652_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_630_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln68_4_fu_646_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_fu_658_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_8_fu_674_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln68_5_fu_682_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_7_fu_666_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_18_fu_688_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_19_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln68_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln68_3_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln68_4_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln68_fu_718_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln68_2_fu_723_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_fu_727_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln101_fu_591_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln68_fu_714_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln68_2_fu_733_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln68_fu_745_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_2_fu_739_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln68_20_fu_763_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln68_5_fu_769_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_9_fu_775_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_11_fu_787_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_10_fu_781_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln68_6_fu_794_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln68_21_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_22_fu_800_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_5_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_818_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_23_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_24_fu_808_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_6_fu_835_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln68_4_fu_841_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_12_fu_828_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln68_5_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_25_fu_860_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component matrix_mul_temp_mfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_1_prod IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_1_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_matrix2_U : component matrix_mul_temp_mfYi
    generic map (
        DataWidth => 32,
        AddressRange => 10240,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_matrix2_address0,
        ce0 => temp_matrix2_ce0,
        q0 => temp_matrix2_q0);

    prod_U : component matrix_mul_1_prod
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => prod_address0,
        ce0 => prod_ce0,
        we0 => prod_we0,
        d0 => prod_d0,
        q0 => prod_q0);

    temp_U : component matrix_mul_1_temp
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bitNumber_assign105_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln128_reg_960 = ap_const_lv1_0))) then 
                bitNumber_assign105_reg_213 <= i_reg_892;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                bitNumber_assign105_reg_213 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_i_reg_247 <= i_6_reg_939;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_reg_247 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    j_0104_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln130_reg_912 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0104_reg_225 <= j_fu_325_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_0104_reg_225 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    loop_0_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln128_reg_960 = ap_const_lv1_1))) then 
                loop_0_reg_258 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                loop_0_reg_258 <= loop_reg_996;
            end if; 
        end if;
    end process;

    x_0_i_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                x_0_i_reg_237 <= x_2_fu_383_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                x_0_i_reg_237 <= prod_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    add_ln68_reg_974(5 downto 3) <= add_ln68_fu_610_p2(5 downto 3);
                icmp_ln68_2_reg_985 <= icmp_ln68_2_fu_757_p2;
                or_ln68_reg_980 <= or_ln68_fu_751_p2;
                    zext_ln68_cast_reg_969(4 downto 3) <= zext_ln68_cast_fu_595_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln87_fu_336_p2 = ap_const_lv1_0))) then
                i_6_reg_939 <= i_6_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_892 <= i_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln87_fu_336_p2 = ap_const_lv1_1))) then
                icmp_ln128_reg_960 <= icmp_ln128_fu_377_p2;
                    temp_addr_5_reg_950(1 downto 0) <= zext_ln68_15_fu_368_p1(6 - 1 downto 0)(1 downto 0);
                tmp_17_reg_944 <= bitNumber_assign105_reg_213(4 downto 3);
                trunc_ln128_reg_955 <= trunc_ln128_fu_373_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln130_reg_912 <= icmp_ln130_fu_312_p2;
                    zext_ln134_reg_897(1 downto 0) <= zext_ln134_fu_297_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                loop_reg_996 <= loop_fu_876_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln140_fu_870_p2 = ap_const_lv1_0))) then
                    zext_ln141_reg_1001(2 downto 0) <= zext_ln141_fu_882_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln134_reg_897(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    temp_addr_5_reg_950(5 downto 2) <= "0000";
    zext_ln68_cast_reg_969(2 downto 0) <= "000";
    add_ln68_reg_974(2 downto 0) <= "111";
    zext_ln141_reg_1001(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln130_reg_912, ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln87_fu_336_p2, icmp_ln128_reg_960, ap_CS_fsm_state11, icmp_ln140_fu_870_p2, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln130_reg_912 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln87_fu_336_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln128_reg_960 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln140_fu_870_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln133_fu_287_p2 <= std_logic_vector(unsigned(shl_ln_fu_279_p3) + unsigned(zext_ln130_fu_275_p1));
    add_ln134_fu_302_p2 <= std_logic_vector(unsigned(zext_ln133_fu_293_p1) + unsigned(matrix_offset));
    add_ln68_fu_610_p2 <= std_logic_vector(unsigned(ap_const_lv6_7) + unsigned(zext_ln68_fu_602_p1));
    and_ln68_4_fu_708_p2 <= (lshr_ln68_fu_696_p2 and lshr_ln68_3_fu_702_p2);
    and_ln68_5_fu_847_p2 <= (shl_ln68_6_fu_835_p2 and lshr_ln68_4_fu_841_p2);
    and_ln68_fu_745_p2 <= (xor_ln68_2_fu_733_p2 and trunc_ln68_fu_714_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln140_fu_870_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln140_fu_870_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln140_fu_870_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln140_fu_870_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_6_fu_342_p2 <= std_logic_vector(unsigned(i_0_i_reg_247) + unsigned(ap_const_lv3_1));
    i_fu_269_p2 <= std_logic_vector(unsigned(bitNumber_assign105_reg_213) + unsigned(ap_const_lv7_1));
    icmp_ln128_fu_377_p2 <= "1" when (bitNumber_assign105_reg_213 = ap_const_lv7_7F) else "0";
    icmp_ln130_fu_312_p2 <= "1" when (j_0104_reg_225 = ap_const_lv2_3) else "0";
    icmp_ln140_fu_870_p2 <= "1" when (loop_0_reg_258 = ap_const_lv3_4) else "0";
    icmp_ln68_2_fu_757_p2 <= "1" when (unsigned(zext_ln68_14_fu_606_p1) > unsigned(zext_ln68_16_fu_616_p1)) else "0";
    icmp_ln68_fu_620_p2 <= "1" when (unsigned(zext_ln68_14_fu_606_p1) > unsigned(zext_ln68_16_fu_616_p1)) else "0";
    icmp_ln87_fu_336_p2 <= "1" when (i_0_i_reg_247 = ap_const_lv3_4) else "0";
    j_fu_325_p2 <= std_logic_vector(unsigned(j_0104_reg_225) + unsigned(ap_const_lv2_1));
    loop_fu_876_p2 <= std_logic_vector(unsigned(loop_0_reg_258) + unsigned(ap_const_lv3_1));
    lshr_ln5_fu_435_p4 <= y_fu_429_p2(31 downto 2);
    lshr_ln68_3_fu_702_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln68_19_fu_692_p1(31-1 downto 0)))));
    lshr_ln68_4_fu_841_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln68_24_fu_808_p1(31-1 downto 0)))));
    lshr_ln68_fu_696_p2 <= std_logic_vector(shift_right(unsigned(select_ln68_7_fu_666_p3),to_integer(unsigned('0' & zext_ln68_18_fu_688_p1(31-1 downto 0)))));
    lshr_ln6_fu_479_p4 <= y_4_fu_473_p2(31 downto 4);
    lshr_ln_fu_389_p4 <= x_0_i_reg_237(31 downto 1);
    or_ln68_fu_751_p2 <= (shl_ln68_2_fu_739_p2 or and_ln68_fu_745_p2);

    output_r_address0_assign_proc : process(zext_ln134_fu_297_p1, ap_CS_fsm_state3, zext_ln141_reg_1001, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_address0 <= zext_ln141_reg_1001(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address0 <= zext_ln134_fu_297_p1(3 - 1 downto 0);
        else 
            output_r_address0 <= "XXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= temp_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_address0_assign_proc : process(zext_ln134_reg_897, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, zext_ln87_fu_331_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            prod_address0 <= zext_ln87_fu_331_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            prod_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prod_address0 <= zext_ln134_reg_897(6 - 1 downto 0);
        else 
            prod_address0 <= "XXXXXX";
        end if; 
    end process;


    prod_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prod_d0 <= (temp_matrix2_q0 and output_r_q0);

    prod_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln68_10_fu_781_p3 <= 
        add_ln68_reg_974 when (icmp_ln68_2_reg_985(0) = '1') else 
        zext_ln68_20_fu_763_p1;
    select_ln68_11_fu_787_p3 <= 
        xor_ln68_5_fu_769_p2 when (icmp_ln68_2_reg_985(0) = '1') else 
        zext_ln68_20_fu_763_p1;
    select_ln68_12_fu_828_p3 <= 
        tmp_20_fu_818_p4 when (icmp_ln68_2_reg_985(0) = '1') else 
        shl_ln68_5_fu_812_p2;
    select_ln68_7_fu_666_p3 <= 
        tmp_19_fu_630_p4 when (icmp_ln68_fu_620_p2(0) = '1') else 
        temp_q0;
    select_ln68_8_fu_674_p3 <= 
        xor_ln68_4_fu_646_p2 when (icmp_ln68_fu_620_p2(0) = '1') else 
        zext_ln68_17_fu_626_p1;
    select_ln68_9_fu_775_p3 <= 
        zext_ln68_20_fu_763_p1 when (icmp_ln68_2_reg_985(0) = '1') else 
        add_ln68_reg_974;
    select_ln68_fu_658_p3 <= 
        sub_ln68_fu_640_p2 when (icmp_ln68_fu_620_p2(0) = '1') else 
        sub_ln68_4_fu_652_p2;
    shl_ln68_2_fu_739_p2 <= std_logic_vector(shift_left(unsigned(zext_ln101_fu_591_p1),to_integer(unsigned('0' & zext_ln68_2_fu_723_p1(8-1 downto 0)))));
    shl_ln68_5_fu_812_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_21_fu_766_p1),to_integer(unsigned('0' & zext_ln68_22_fu_800_p1(31-1 downto 0)))));
    shl_ln68_6_fu_835_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln68_23_fu_804_p1(31-1 downto 0)))));
    shl_ln68_7_fu_863_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln68_25_fu_860_p1(4-1 downto 0)))));
    shl_ln68_fu_727_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln68_2_fu_723_p1(8-1 downto 0)))));
    shl_ln_fu_279_p3 <= (bitNumber_assign105_reg_213 & ap_const_lv2_0);
    sub_ln68_4_fu_652_p2 <= std_logic_vector(unsigned(add_ln68_fu_610_p2) - unsigned(zext_ln68_17_fu_626_p1));
    sub_ln68_5_fu_682_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln68_fu_658_p3));
    sub_ln68_6_fu_794_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln68_9_fu_775_p3));
    sub_ln68_fu_640_p2 <= std_logic_vector(unsigned(zext_ln68_17_fu_626_p1) - unsigned(add_ln68_fu_610_p2));

    temp_address0_assign_proc : process(ap_CS_fsm_state7, temp_addr_5_reg_950, ap_CS_fsm_state11, zext_ln141_fu_882_p1, ap_CS_fsm_state10, zext_ln68_15_fu_368_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_address0 <= zext_ln141_fu_882_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_address0 <= temp_addr_5_reg_950;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address0 <= zext_ln68_15_fu_368_p1(6 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= (select_ln68_12_fu_828_p3 and and_ln68_5_fu_847_p2);
    temp_matrix2_address0 <= zext_ln134_2_fu_307_p1(14 - 1 downto 0);

    temp_matrix2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_matrix2_ce0 <= ap_const_logic_1;
        else 
            temp_matrix2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state10, shl_ln68_7_fu_863_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_we0 <= shl_ln68_7_fu_863_p2;
        else 
            temp_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    tmp_12_fu_407_p3 <= x_0_i_reg_237(1 downto 1);
    tmp_13_fu_449_p3 <= y_fu_429_p2(2 downto 2);
    tmp_14_fu_493_p3 <= y_4_fu_473_p2(4 downto 4);
    tmp_15_fu_539_p3 <= y_5_fu_517_p2(8 downto 8);
    tmp_16_fu_553_p3 <= y_6_fu_547_p2(16 downto 16);
    tmp_18_fu_358_p4 <= bitNumber_assign105_reg_213(6 downto 5);
    
    tmp_19_fu_630_p4_proc : process(temp_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_19_fu_630_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := temp_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_19_fu_630_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_19_fu_630_p4_i) := temp_q0(32-1-tmp_19_fu_630_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_19_fu_630_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_20_fu_818_p4_proc : process(shl_ln68_5_fu_812_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_20_fu_818_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln68_5_fu_812_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_20_fu_818_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_20_fu_818_p4_i) := shl_ln68_5_fu_812_p2(32-1-tmp_20_fu_818_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_20_fu_818_p4 <= resvalue(32-1 downto 0);
    end process;

    trunc_ln128_fu_373_p1 <= bitNumber_assign105_reg_213(3 - 1 downto 0);
    trunc_ln68_fu_714_p1 <= and_ln68_4_fu_708_p2(8 - 1 downto 0);
    trunc_ln96_2_fu_415_p1 <= x_0_i_reg_237(24 - 1 downto 0);
    trunc_ln96_6_fu_419_p4 <= x_0_i_reg_237(24 downto 1);
    trunc_ln96_fu_403_p1 <= x_0_i_reg_237(1 - 1 downto 0);
    trunc_ln97_2_fu_463_p4 <= y_fu_429_p2(25 downto 2);
    trunc_ln98_2_fu_507_p4 <= y_4_fu_473_p2(27 downto 4);
    trunc_ln_fu_529_p4 <= y_5_fu_517_p2(31 downto 8);
    x_2_fu_383_p2 <= (x_0_i_reg_237 xor prod_q0);
    xor_ln101_5_fu_567_p2 <= (xor_ln101_fu_561_p2 xor tmp_12_fu_407_p3);
    xor_ln101_6_fu_573_p2 <= (tmp_16_fu_553_p3 xor tmp_15_fu_539_p3);
    xor_ln101_7_fu_579_p2 <= (xor_ln101_6_fu_573_p2 xor tmp_14_fu_493_p3);
    xor_ln101_8_fu_585_p2 <= (xor_ln101_7_fu_579_p2 xor xor_ln101_5_fu_567_p2);
    xor_ln101_fu_561_p2 <= (trunc_ln96_fu_403_p1 xor tmp_13_fu_449_p3);
    xor_ln68_2_fu_733_p2 <= (shl_ln68_fu_727_p2 xor ap_const_lv8_FF);
    xor_ln68_4_fu_646_p2 <= (zext_ln68_17_fu_626_p1 xor ap_const_lv6_1F);
    xor_ln68_5_fu_769_p2 <= (zext_ln68_20_fu_763_p1 xor ap_const_lv6_1F);
    xor_ln68_fu_718_p2 <= (trunc_ln128_reg_955 xor ap_const_lv3_7);
    xor_ln97_fu_457_p2 <= (trunc_ln96_6_fu_419_p4 xor trunc_ln96_2_fu_415_p1);
    xor_ln98_4_fu_523_p2 <= (xor_ln98_fu_501_p2 xor trunc_ln98_2_fu_507_p4);
    xor_ln98_fu_501_p2 <= (xor_ln97_fu_457_p2 xor trunc_ln97_2_fu_463_p4);
    y_4_fu_473_p2 <= (zext_ln97_fu_445_p1 xor y_fu_429_p2);
    y_5_fu_517_p2 <= (zext_ln98_fu_489_p1 xor y_4_fu_473_p2);
    y_6_fu_547_p2 <= (xor_ln98_4_fu_523_p2 xor trunc_ln_fu_529_p4);
    y_fu_429_p2 <= (zext_ln96_fu_399_p1 xor x_0_i_reg_237);
    zext_ln101_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln101_8_fu_585_p2),8));
    zext_ln130_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0104_reg_225),9));
    zext_ln133_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln133_fu_287_p2),14));
    zext_ln134_2_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_fu_302_p2),64));
    zext_ln134_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0104_reg_225),64));
    zext_ln141_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_258),64));
    zext_ln68_14_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_fu_595_p3),64));
    zext_ln68_15_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_358_p4),64));
    zext_ln68_16_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_610_p2),64));
    zext_ln68_17_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_fu_595_p3),6));
    zext_ln68_18_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_8_fu_674_p3),32));
    zext_ln68_19_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln68_5_fu_682_p2),32));
    zext_ln68_20_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_reg_969),6));
    zext_ln68_21_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln68_reg_980),32));
    zext_ln68_22_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_11_fu_787_p3),32));
    zext_ln68_23_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_10_fu_781_p3),32));
    zext_ln68_24_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln68_6_fu_794_p2),32));
    zext_ln68_25_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_944),4));
    zext_ln68_2_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln68_fu_718_p2),8));
    zext_ln68_cast_fu_595_p3 <= (tmp_17_reg_944 & ap_const_lv3_0);
    zext_ln68_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_fu_595_p3),6));
    zext_ln87_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_247),64));
    zext_ln96_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_389_p4),32));
    zext_ln97_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln5_fu_435_p4),32));
    zext_ln98_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln6_fu_479_p4),32));
end behav;
