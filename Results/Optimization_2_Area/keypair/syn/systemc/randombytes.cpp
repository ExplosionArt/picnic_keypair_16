// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "randombytes.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic randombytes::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic randombytes::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> randombytes::ap_ST_fsm_state1 = "1";
const sc_lv<16> randombytes::ap_ST_fsm_state2 = "10";
const sc_lv<16> randombytes::ap_ST_fsm_state3 = "100";
const sc_lv<16> randombytes::ap_ST_fsm_state4 = "1000";
const sc_lv<16> randombytes::ap_ST_fsm_state5 = "10000";
const sc_lv<16> randombytes::ap_ST_fsm_state6 = "100000";
const sc_lv<16> randombytes::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> randombytes::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> randombytes::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> randombytes::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> randombytes::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> randombytes::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> randombytes::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> randombytes::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> randombytes::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> randombytes::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> randombytes::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> randombytes::ap_const_lv32_1 = "1";
const sc_lv<1> randombytes::ap_const_lv1_0 = "0";
const sc_lv<32> randombytes::ap_const_lv32_2 = "10";
const sc_lv<1> randombytes::ap_const_lv1_1 = "1";
const sc_lv<32> randombytes::ap_const_lv32_5 = "101";
const sc_lv<32> randombytes::ap_const_lv32_7 = "111";
const sc_lv<32> randombytes::ap_const_lv32_8 = "1000";
const sc_lv<32> randombytes::ap_const_lv32_9 = "1001";
const sc_lv<32> randombytes::ap_const_lv32_A = "1010";
const sc_lv<32> randombytes::ap_const_lv32_C = "1100";
const sc_lv<32> randombytes::ap_const_lv32_E = "1110";
const sc_lv<5> randombytes::ap_const_lv5_F = "1111";
const sc_lv<5> randombytes::ap_const_lv5_0 = "00000";
const sc_lv<32> randombytes::ap_const_lv32_4 = "100";
const sc_lv<32> randombytes::ap_const_lv32_6 = "110";
const sc_lv<32> randombytes::ap_const_lv32_B = "1011";
const sc_lv<2> randombytes::ap_const_lv2_0 = "00";
const sc_lv<32> randombytes::ap_const_lv32_D = "1101";
const sc_lv<6> randombytes::ap_const_lv6_0 = "000000";
const sc_lv<32> randombytes::ap_const_lv32_F = "1111";
const sc_lv<32> randombytes::ap_const_lv32_3 = "11";
const sc_lv<8> randombytes::ap_const_lv8_0 = "00000000";
const sc_lv<8> randombytes::ap_const_lv8_FF = "11111111";
const sc_lv<8> randombytes::ap_const_lv8_1 = "1";
const sc_lv<5> randombytes::ap_const_lv5_1F = "11111";
const sc_lv<5> randombytes::ap_const_lv5_10 = "10000";
const sc_lv<5> randombytes::ap_const_lv5_1 = "1";
const sc_lv<2> randombytes::ap_const_lv2_3 = "11";
const sc_lv<2> randombytes::ap_const_lv2_1 = "1";
const sc_lv<4> randombytes::ap_const_lv4_0 = "0000";
const sc_lv<6> randombytes::ap_const_lv6_20 = "100000";
const sc_lv<6> randombytes::ap_const_lv6_1 = "1";
const bool randombytes::ap_const_boolean_1 = true;

randombytes::randombytes(sc_module_name name) : sc_module(name), mVcdFile(0) {
    block_U = new randombytes_block("block_U");
    block_U->clk(ap_clk);
    block_U->reset(ap_rst);
    block_U->address0(block_address0);
    block_U->ce0(block_ce0);
    block_U->we0(block_we0);
    block_U->d0(grp_AES256_ECB_1_fu_254_buffer_r_d0);
    block_U->q0(block_q0);
    temp_U = new randombytes_temp("temp_U");
    temp_U->clk(ap_clk);
    temp_U->reset(ap_rst);
    temp_U->address0(temp_address0);
    temp_U->ce0(temp_ce0);
    temp_U->we0(temp_we0);
    temp_U->d0(grp_AES256_ECB_fu_240_buffer_r_d0);
    temp_U->q0(temp_q0);
    grp_AES256_ECB_fu_240 = new AES256_ECB("grp_AES256_ECB_fu_240");
    grp_AES256_ECB_fu_240->ap_clk(ap_clk);
    grp_AES256_ECB_fu_240->ap_rst(ap_rst);
    grp_AES256_ECB_fu_240->ap_start(grp_AES256_ECB_fu_240_ap_start);
    grp_AES256_ECB_fu_240->ap_done(grp_AES256_ECB_fu_240_ap_done);
    grp_AES256_ECB_fu_240->ap_idle(grp_AES256_ECB_fu_240_ap_idle);
    grp_AES256_ECB_fu_240->ap_ready(grp_AES256_ECB_fu_240_ap_ready);
    grp_AES256_ECB_fu_240->key_address0(grp_AES256_ECB_fu_240_key_address0);
    grp_AES256_ECB_fu_240->key_ce0(grp_AES256_ECB_fu_240_key_ce0);
    grp_AES256_ECB_fu_240->key_q0(DRBG_ctx_Key_q0);
    grp_AES256_ECB_fu_240->ctr_address0(grp_AES256_ECB_fu_240_ctr_address0);
    grp_AES256_ECB_fu_240->ctr_ce0(grp_AES256_ECB_fu_240_ctr_ce0);
    grp_AES256_ECB_fu_240->ctr_q0(DRBG_ctx_V_q0);
    grp_AES256_ECB_fu_240->buffer_r_address0(grp_AES256_ECB_fu_240_buffer_r_address0);
    grp_AES256_ECB_fu_240->buffer_r_ce0(grp_AES256_ECB_fu_240_buffer_r_ce0);
    grp_AES256_ECB_fu_240->buffer_r_we0(grp_AES256_ECB_fu_240_buffer_r_we0);
    grp_AES256_ECB_fu_240->buffer_r_d0(grp_AES256_ECB_fu_240_buffer_r_d0);
    grp_AES256_ECB_fu_240->buffer_offset(shl_ln_reg_485);
    grp_AES256_ECB_1_fu_254 = new AES256_ECB_1("grp_AES256_ECB_1_fu_254");
    grp_AES256_ECB_1_fu_254->ap_clk(ap_clk);
    grp_AES256_ECB_1_fu_254->ap_rst(ap_rst);
    grp_AES256_ECB_1_fu_254->ap_start(grp_AES256_ECB_1_fu_254_ap_start);
    grp_AES256_ECB_1_fu_254->ap_done(grp_AES256_ECB_1_fu_254_ap_done);
    grp_AES256_ECB_1_fu_254->ap_idle(grp_AES256_ECB_1_fu_254_ap_idle);
    grp_AES256_ECB_1_fu_254->ap_ready(grp_AES256_ECB_1_fu_254_ap_ready);
    grp_AES256_ECB_1_fu_254->key_address0(grp_AES256_ECB_1_fu_254_key_address0);
    grp_AES256_ECB_1_fu_254->key_ce0(grp_AES256_ECB_1_fu_254_key_ce0);
    grp_AES256_ECB_1_fu_254->key_q0(DRBG_ctx_Key_q0);
    grp_AES256_ECB_1_fu_254->ctr_address0(grp_AES256_ECB_1_fu_254_ctr_address0);
    grp_AES256_ECB_1_fu_254->ctr_ce0(grp_AES256_ECB_1_fu_254_ctr_ce0);
    grp_AES256_ECB_1_fu_254->ctr_q0(DRBG_ctx_V_q0);
    grp_AES256_ECB_1_fu_254->buffer_r_address0(grp_AES256_ECB_1_fu_254_buffer_r_address0);
    grp_AES256_ECB_1_fu_254->buffer_r_ce0(grp_AES256_ECB_1_fu_254_buffer_r_ce0);
    grp_AES256_ECB_1_fu_254->buffer_r_we0(grp_AES256_ECB_1_fu_254_buffer_r_we0);
    grp_AES256_ECB_1_fu_254->buffer_r_d0(grp_AES256_ECB_1_fu_254_buffer_r_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_DRBG_ctx_Key_address0);
    sensitive << ( zext_ln307_reg_498 );
    sensitive << ( grp_AES256_ECB_fu_240_key_address0 );
    sensitive << ( grp_AES256_ECB_1_fu_254_key_address0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_DRBG_ctx_Key_ce0);
    sensitive << ( grp_AES256_ECB_fu_240_key_ce0 );
    sensitive << ( grp_AES256_ECB_1_fu_254_key_ce0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_DRBG_ctx_Key_d0);
    sensitive << ( temp_q0 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_DRBG_ctx_Key_we0);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_DRBG_ctx_V_address0);
    sensitive << ( DRBG_ctx_V_addr_reg_430 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_fu_267_p2 );
    sensitive << ( DRBG_ctx_V_addr_1_reg_472 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( grp_AES256_ECB_fu_240_ctr_address0 );
    sensitive << ( grp_AES256_ECB_1_fu_254_ctr_address0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( zext_ln249_fu_292_p1 );
    sensitive << ( zext_ln292_fu_344_p1 );
    sensitive << ( zext_ln309_1_fu_422_p1 );

    SC_METHOD(thread_DRBG_ctx_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_fu_267_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( grp_AES256_ECB_fu_240_ctr_ce0 );
    sensitive << ( grp_AES256_ECB_1_fu_254_ctr_ce0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_DRBG_ctx_V_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_fu_267_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( temp_q0 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_fu_273_p2 );

    SC_METHOD(thread_DRBG_ctx_V_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_fu_267_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o);
    sensitive << ( DRBG_ctx_reseed_counter_i );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln308_fu_381_p2 );
    sensitive << ( add_ln310_fu_410_p2 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o_ap_vld);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln308_fu_381_p2 );

    SC_METHOD(thread_add_ln310_fu_410_p2);
    sensitive << ( DRBG_ctx_reseed_counter_i );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln308_fu_381_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln308_fu_381_p2 );

    SC_METHOD(thread_block_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln270_fu_315_p1 );
    sensitive << ( grp_AES256_ECB_1_fu_254_buffer_r_address0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_block_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_ECB_1_fu_254_buffer_r_ce0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_block_we0);
    sensitive << ( grp_AES256_ECB_1_fu_254_buffer_r_we0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_AES256_ECB_1_fu_254_ap_start);
    sensitive << ( grp_AES256_ECB_1_fu_254_ap_start_reg );

    SC_METHOD(thread_grp_AES256_ECB_fu_240_ap_start);
    sensitive << ( grp_AES256_ECB_fu_240_ap_start_reg );

    SC_METHOD(thread_grp_fu_267_p2);
    sensitive << ( DRBG_ctx_V_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_fu_273_p2);
    sensitive << ( DRBG_ctx_V_q0 );

    SC_METHOD(thread_i_1_fu_387_p2);
    sensitive << ( i_3_reg_228 );

    SC_METHOD(thread_i_4_fu_326_p2);
    sensitive << ( i_0_reg_193 );

    SC_METHOD(thread_i_fu_370_p2);
    sensitive << ( i_2_reg_217 );

    SC_METHOD(thread_icmp_ln269_fu_303_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( loop_0_reg_182 );

    SC_METHOD(thread_icmp_ln287_fu_320_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i_0_reg_193 );

    SC_METHOD(thread_icmp_ln306_fu_364_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( i_2_reg_217 );

    SC_METHOD(thread_icmp_ln308_fu_381_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( i_3_reg_228 );

    SC_METHOD(thread_j_1_fu_349_p2);
    sensitive << ( j1_0_reg_205 );

    SC_METHOD(thread_j_fu_297_p2);
    sensitive << ( j_0_reg_170 );

    SC_METHOD(thread_loop_fu_309_p2);
    sensitive << ( loop_0_reg_182 );

    SC_METHOD(thread_or_ln_fu_393_p3);
    sensitive << ( i_3_reg_228 );

    SC_METHOD(thread_sext_ln246_fu_280_p1);
    sensitive << ( j_0_reg_170 );

    SC_METHOD(thread_sext_ln290_fu_332_p1);
    sensitive << ( j1_0_reg_205 );

    SC_METHOD(thread_shl_ln_fu_355_p3);
    sensitive << ( i_0_reg_193 );

    SC_METHOD(thread_temp_address0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( zext_ln307_fu_376_p1 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_AES256_ECB_fu_240_buffer_r_address0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( zext_ln309_fu_401_p1 );

    SC_METHOD(thread_temp_ce0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_AES256_ECB_fu_240_buffer_r_ce0 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_temp_we0);
    sensitive << ( grp_AES256_ECB_fu_240_buffer_r_we0 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_tmp_1_fu_336_p3);
    sensitive << ( j1_0_reg_205 );

    SC_METHOD(thread_tmp_fu_284_p3);
    sensitive << ( j_0_reg_170 );

    SC_METHOD(thread_x_address0);
    sensitive << ( zext_ln270_reg_451 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_x_d0);
    sensitive << ( block_q0 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_x_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_zext_ln249_fu_292_p1);
    sensitive << ( sext_ln246_fu_280_p1 );

    SC_METHOD(thread_zext_ln270_fu_315_p1);
    sensitive << ( loop_0_reg_182 );

    SC_METHOD(thread_zext_ln292_fu_344_p1);
    sensitive << ( sext_ln290_fu_332_p1 );

    SC_METHOD(thread_zext_ln307_fu_376_p1);
    sensitive << ( i_2_reg_217 );

    SC_METHOD(thread_zext_ln309_1_fu_422_p1);
    sensitive << ( i_3_reg_228 );

    SC_METHOD(thread_zext_ln309_fu_401_p1);
    sensitive << ( or_ln_fu_393_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_284_p3 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_fu_267_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln269_fu_303_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_1_fu_336_p3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( icmp_ln306_fu_364_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( icmp_ln308_fu_381_p2 );
    sensitive << ( grp_AES256_ECB_fu_240_ap_done );
    sensitive << ( grp_AES256_ECB_1_fu_254_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln287_fu_320_p2 );

    ap_CS_fsm = "0000000000000001";
    grp_AES256_ECB_fu_240_ap_start_reg = SC_LOGIC_0;
    grp_AES256_ECB_1_fu_254_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "randombytes_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_we0, "(port)x_we0");
    sc_trace(mVcdFile, x_d0, "(port)x_d0");
    sc_trace(mVcdFile, DRBG_ctx_V_address0, "(port)DRBG_ctx_V_address0");
    sc_trace(mVcdFile, DRBG_ctx_V_ce0, "(port)DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, DRBG_ctx_V_we0, "(port)DRBG_ctx_V_we0");
    sc_trace(mVcdFile, DRBG_ctx_V_d0, "(port)DRBG_ctx_V_d0");
    sc_trace(mVcdFile, DRBG_ctx_V_q0, "(port)DRBG_ctx_V_q0");
    sc_trace(mVcdFile, DRBG_ctx_Key_address0, "(port)DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce0, "(port)DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, DRBG_ctx_Key_we0, "(port)DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, DRBG_ctx_Key_d0, "(port)DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, DRBG_ctx_Key_q0, "(port)DRBG_ctx_Key_q0");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_i, "(port)DRBG_ctx_reseed_counter_i");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o, "(port)DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o_ap_vld, "(port)DRBG_ctx_reseed_counter_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, DRBG_ctx_V_addr_reg_430, "DRBG_ctx_V_addr_reg_430");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_284_p3, "tmp_fu_284_p3");
    sc_trace(mVcdFile, j_fu_297_p2, "j_fu_297_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_267_p2, "grp_fu_267_p2");
    sc_trace(mVcdFile, loop_fu_309_p2, "loop_fu_309_p2");
    sc_trace(mVcdFile, loop_reg_446, "loop_reg_446");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln270_fu_315_p1, "zext_ln270_fu_315_p1");
    sc_trace(mVcdFile, zext_ln270_reg_451, "zext_ln270_reg_451");
    sc_trace(mVcdFile, icmp_ln269_fu_303_p2, "icmp_ln269_fu_303_p2");
    sc_trace(mVcdFile, i_4_fu_326_p2, "i_4_fu_326_p2");
    sc_trace(mVcdFile, i_4_reg_464, "i_4_reg_464");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, DRBG_ctx_V_addr_1_reg_472, "DRBG_ctx_V_addr_1_reg_472");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_1_fu_336_p3, "tmp_1_fu_336_p3");
    sc_trace(mVcdFile, j_1_fu_349_p2, "j_1_fu_349_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, shl_ln_fu_355_p3, "shl_ln_fu_355_p3");
    sc_trace(mVcdFile, shl_ln_reg_485, "shl_ln_reg_485");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, i_fu_370_p2, "i_fu_370_p2");
    sc_trace(mVcdFile, i_reg_493, "i_reg_493");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, zext_ln307_fu_376_p1, "zext_ln307_fu_376_p1");
    sc_trace(mVcdFile, zext_ln307_reg_498, "zext_ln307_reg_498");
    sc_trace(mVcdFile, icmp_ln306_fu_364_p2, "icmp_ln306_fu_364_p2");
    sc_trace(mVcdFile, i_1_fu_387_p2, "i_1_fu_387_p2");
    sc_trace(mVcdFile, i_1_reg_511, "i_1_reg_511");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, icmp_ln308_fu_381_p2, "icmp_ln308_fu_381_p2");
    sc_trace(mVcdFile, block_address0, "block_address0");
    sc_trace(mVcdFile, block_ce0, "block_ce0");
    sc_trace(mVcdFile, block_we0, "block_we0");
    sc_trace(mVcdFile, block_q0, "block_q0");
    sc_trace(mVcdFile, temp_address0, "temp_address0");
    sc_trace(mVcdFile, temp_ce0, "temp_ce0");
    sc_trace(mVcdFile, temp_we0, "temp_we0");
    sc_trace(mVcdFile, temp_q0, "temp_q0");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_ap_start, "grp_AES256_ECB_fu_240_ap_start");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_ap_done, "grp_AES256_ECB_fu_240_ap_done");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_ap_idle, "grp_AES256_ECB_fu_240_ap_idle");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_ap_ready, "grp_AES256_ECB_fu_240_ap_ready");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_key_address0, "grp_AES256_ECB_fu_240_key_address0");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_key_ce0, "grp_AES256_ECB_fu_240_key_ce0");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_ctr_address0, "grp_AES256_ECB_fu_240_ctr_address0");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_ctr_ce0, "grp_AES256_ECB_fu_240_ctr_ce0");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_buffer_r_address0, "grp_AES256_ECB_fu_240_buffer_r_address0");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_buffer_r_ce0, "grp_AES256_ECB_fu_240_buffer_r_ce0");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_buffer_r_we0, "grp_AES256_ECB_fu_240_buffer_r_we0");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_buffer_r_d0, "grp_AES256_ECB_fu_240_buffer_r_d0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_ap_start, "grp_AES256_ECB_1_fu_254_ap_start");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_ap_done, "grp_AES256_ECB_1_fu_254_ap_done");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_ap_idle, "grp_AES256_ECB_1_fu_254_ap_idle");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_ap_ready, "grp_AES256_ECB_1_fu_254_ap_ready");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_key_address0, "grp_AES256_ECB_1_fu_254_key_address0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_key_ce0, "grp_AES256_ECB_1_fu_254_key_ce0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_ctr_address0, "grp_AES256_ECB_1_fu_254_ctr_address0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_ctr_ce0, "grp_AES256_ECB_1_fu_254_ctr_ce0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_buffer_r_address0, "grp_AES256_ECB_1_fu_254_buffer_r_address0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_buffer_r_ce0, "grp_AES256_ECB_1_fu_254_buffer_r_ce0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_buffer_r_we0, "grp_AES256_ECB_1_fu_254_buffer_r_we0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_buffer_r_d0, "grp_AES256_ECB_1_fu_254_buffer_r_d0");
    sc_trace(mVcdFile, j_0_reg_170, "j_0_reg_170");
    sc_trace(mVcdFile, loop_0_reg_182, "loop_0_reg_182");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_0_reg_193, "i_0_reg_193");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, j1_0_reg_205, "j1_0_reg_205");
    sc_trace(mVcdFile, icmp_ln287_fu_320_p2, "icmp_ln287_fu_320_p2");
    sc_trace(mVcdFile, i_2_reg_217, "i_2_reg_217");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, i_3_reg_228, "i_3_reg_228");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_AES256_ECB_fu_240_ap_start_reg, "grp_AES256_ECB_fu_240_ap_start_reg");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_254_ap_start_reg, "grp_AES256_ECB_1_fu_254_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln249_fu_292_p1, "zext_ln249_fu_292_p1");
    sc_trace(mVcdFile, zext_ln292_fu_344_p1, "zext_ln292_fu_344_p1");
    sc_trace(mVcdFile, zext_ln309_fu_401_p1, "zext_ln309_fu_401_p1");
    sc_trace(mVcdFile, zext_ln309_1_fu_422_p1, "zext_ln309_1_fu_422_p1");
    sc_trace(mVcdFile, add_ln310_fu_410_p2, "add_ln310_fu_410_p2");
    sc_trace(mVcdFile, grp_fu_273_p2, "grp_fu_273_p2");
    sc_trace(mVcdFile, sext_ln246_fu_280_p1, "sext_ln246_fu_280_p1");
    sc_trace(mVcdFile, sext_ln290_fu_332_p1, "sext_ln290_fu_332_p1");
    sc_trace(mVcdFile, or_ln_fu_393_p3, "or_ln_fu_393_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

randombytes::~randombytes() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete block_U;
    delete temp_U;
    delete grp_AES256_ECB_fu_240;
    delete grp_AES256_ECB_1_fu_254;
}

void randombytes::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AES256_ECB_1_fu_254_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            grp_AES256_ECB_1_fu_254_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AES256_ECB_1_fu_254_ap_ready.read())) {
            grp_AES256_ECB_1_fu_254_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AES256_ECB_fu_240_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            grp_AES256_ECB_fu_240_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AES256_ECB_fu_240_ap_ready.read())) {
            grp_AES256_ECB_fu_240_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln269_fu_303_p2.read()))) {
        i_0_reg_193 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                esl_seteq<1,1,1>(grp_AES256_ECB_fu_240_ap_done.read(), ap_const_logic_1))) {
        i_0_reg_193 = i_4_reg_464.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln287_fu_320_p2.read()))) {
        i_2_reg_217 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        i_2_reg_217 = i_reg_493.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln306_fu_364_p2.read()))) {
        i_3_reg_228 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        i_3_reg_228 = i_1_reg_511.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln287_fu_320_p2.read()))) {
        j1_0_reg_205 = ap_const_lv5_F;
    } else if ((esl_seteq<1,1,1>(grp_fu_267_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        j1_0_reg_205 = j_1_fu_349_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(grp_fu_267_p2.read(), ap_const_lv1_1))) {
        j_0_reg_170 = j_fu_297_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_170 = ap_const_lv5_F;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        loop_0_reg_182 = loop_reg_446.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(grp_AES256_ECB_1_fu_254_ap_done.read(), ap_const_logic_1))) {
        loop_0_reg_182 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_336_p3.read()))) {
        DRBG_ctx_V_addr_1_reg_472 =  (sc_lv<4>) (zext_ln292_fu_344_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_284_p3.read(), ap_const_lv1_0))) {
        DRBG_ctx_V_addr_reg_430 =  (sc_lv<4>) (zext_ln249_fu_292_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        i_1_reg_511 = i_1_fu_387_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_4_reg_464 = i_4_fu_326_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_reg_493 = i_fu_370_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        loop_reg_446 = loop_fu_309_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        shl_ln_reg_485 = shl_ln_fu_355_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln269_fu_303_p2.read()))) {
        zext_ln270_reg_451 = zext_ln270_fu_315_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln306_fu_364_p2.read()))) {
        zext_ln307_reg_498 = zext_ln307_fu_376_p1.read();
    }
}

void randombytes::thread_DRBG_ctx_Key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        DRBG_ctx_Key_address0 =  (sc_lv<5>) (zext_ln307_reg_498.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        DRBG_ctx_Key_address0 = grp_AES256_ECB_1_fu_254_key_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        DRBG_ctx_Key_address0 = grp_AES256_ECB_fu_240_key_address0.read();
    } else {
        DRBG_ctx_Key_address0 = "XXXXX";
    }
}

void randombytes::thread_DRBG_ctx_Key_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        DRBG_ctx_Key_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        DRBG_ctx_Key_ce0 = grp_AES256_ECB_1_fu_254_key_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        DRBG_ctx_Key_ce0 = grp_AES256_ECB_fu_240_key_ce0.read();
    } else {
        DRBG_ctx_Key_ce0 = ap_const_logic_0;
    }
}

void randombytes::thread_DRBG_ctx_Key_d0() {
    DRBG_ctx_Key_d0 = temp_q0.read();
}

void randombytes::thread_DRBG_ctx_Key_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        DRBG_ctx_Key_we0 = ap_const_logic_1;
    } else {
        DRBG_ctx_Key_we0 = ap_const_logic_0;
    }
}

void randombytes::thread_DRBG_ctx_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        DRBG_ctx_V_address0 =  (sc_lv<4>) (zext_ln309_1_fu_422_p1.read());
    } else if (((esl_seteq<1,1,1>(grp_fu_267_p2.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_267_p2.read())))) {
        DRBG_ctx_V_address0 = DRBG_ctx_V_addr_1_reg_472.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        DRBG_ctx_V_address0 =  (sc_lv<4>) (zext_ln292_fu_344_p1.read());
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(grp_fu_267_p2.read(), ap_const_lv1_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_267_p2.read())))) {
        DRBG_ctx_V_address0 = DRBG_ctx_V_addr_reg_430.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_V_address0 =  (sc_lv<4>) (zext_ln249_fu_292_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        DRBG_ctx_V_address0 = grp_AES256_ECB_1_fu_254_ctr_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        DRBG_ctx_V_address0 = grp_AES256_ECB_fu_240_ctr_address0.read();
    } else {
        DRBG_ctx_V_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void randombytes::thread_DRBG_ctx_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(grp_fu_267_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(grp_fu_267_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_267_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_267_p2.read())))) {
        DRBG_ctx_V_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        DRBG_ctx_V_ce0 = grp_AES256_ECB_1_fu_254_ctr_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        DRBG_ctx_V_ce0 = grp_AES256_ECB_fu_240_ctr_ce0.read();
    } else {
        DRBG_ctx_V_ce0 = ap_const_logic_0;
    }
}

void randombytes::thread_DRBG_ctx_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        DRBG_ctx_V_d0 = temp_q0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_267_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_267_p2.read())))) {
        DRBG_ctx_V_d0 = grp_fu_273_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(grp_fu_267_p2.read(), ap_const_lv1_1)) || 
                (esl_seteq<1,1,1>(grp_fu_267_p2.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())))) {
        DRBG_ctx_V_d0 = ap_const_lv8_0;
    } else {
        DRBG_ctx_V_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void randombytes::thread_DRBG_ctx_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(grp_fu_267_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(grp_fu_267_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_267_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_267_p2.read())))) {
        DRBG_ctx_V_we0 = ap_const_logic_1;
    } else {
        DRBG_ctx_V_we0 = ap_const_logic_0;
    }
}

void randombytes::thread_DRBG_ctx_reseed_counter_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln308_fu_381_p2.read()))) {
        DRBG_ctx_reseed_counter_o = add_ln310_fu_410_p2.read();
    } else {
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i.read();
    }
}

void randombytes::thread_DRBG_ctx_reseed_counter_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln308_fu_381_p2.read()))) {
        DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_1;
    } else {
        DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_0;
    }
}

void randombytes::thread_add_ln310_fu_410_p2() {
    add_ln310_fu_410_p2 = (!DRBG_ctx_reseed_counter_i.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(DRBG_ctx_reseed_counter_i.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void randombytes::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void randombytes::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void randombytes::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void randombytes::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void randombytes::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void randombytes::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void randombytes::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void randombytes::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void randombytes::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void randombytes::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void randombytes::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void randombytes::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void randombytes::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void randombytes::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void randombytes::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void randombytes::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void randombytes::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln308_fu_381_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void randombytes::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void randombytes::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln308_fu_381_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void randombytes::thread_block_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        block_address0 =  (sc_lv<4>) (zext_ln270_fu_315_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        block_address0 = grp_AES256_ECB_1_fu_254_buffer_r_address0.read();
    } else {
        block_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void randombytes::thread_block_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        block_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        block_ce0 = grp_AES256_ECB_1_fu_254_buffer_r_ce0.read();
    } else {
        block_ce0 = ap_const_logic_0;
    }
}

void randombytes::thread_block_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        block_we0 = grp_AES256_ECB_1_fu_254_buffer_r_we0.read();
    } else {
        block_we0 = ap_const_logic_0;
    }
}

void randombytes::thread_grp_AES256_ECB_1_fu_254_ap_start() {
    grp_AES256_ECB_1_fu_254_ap_start = grp_AES256_ECB_1_fu_254_ap_start_reg.read();
}

void randombytes::thread_grp_AES256_ECB_fu_240_ap_start() {
    grp_AES256_ECB_fu_240_ap_start = grp_AES256_ECB_fu_240_ap_start_reg.read();
}

void randombytes::thread_grp_fu_267_p2() {
    grp_fu_267_p2 = (!DRBG_ctx_V_q0.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(DRBG_ctx_V_q0.read() == ap_const_lv8_FF);
}

void randombytes::thread_grp_fu_273_p2() {
    grp_fu_273_p2 = (!DRBG_ctx_V_q0.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(DRBG_ctx_V_q0.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void randombytes::thread_i_1_fu_387_p2() {
    i_1_fu_387_p2 = (!i_3_reg_228.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_3_reg_228.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void randombytes::thread_i_4_fu_326_p2() {
    i_4_fu_326_p2 = (!i_0_reg_193.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_reg_193.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void randombytes::thread_i_fu_370_p2() {
    i_fu_370_p2 = (!i_2_reg_217.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_2_reg_217.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void randombytes::thread_icmp_ln269_fu_303_p2() {
    icmp_ln269_fu_303_p2 = (!loop_0_reg_182.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(loop_0_reg_182.read() == ap_const_lv5_10);
}

void randombytes::thread_icmp_ln287_fu_320_p2() {
    icmp_ln287_fu_320_p2 = (!i_0_reg_193.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_193.read() == ap_const_lv2_3);
}

void randombytes::thread_icmp_ln306_fu_364_p2() {
    icmp_ln306_fu_364_p2 = (!i_2_reg_217.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_217.read() == ap_const_lv6_20);
}

void randombytes::thread_icmp_ln308_fu_381_p2() {
    icmp_ln308_fu_381_p2 = (!i_3_reg_228.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_3_reg_228.read() == ap_const_lv5_10);
}

void randombytes::thread_j_1_fu_349_p2() {
    j_1_fu_349_p2 = (!j1_0_reg_205.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_bigint<5>(j1_0_reg_205.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void randombytes::thread_j_fu_297_p2() {
    j_fu_297_p2 = (!j_0_reg_170.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_bigint<5>(j_0_reg_170.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void randombytes::thread_loop_fu_309_p2() {
    loop_fu_309_p2 = (!loop_0_reg_182.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(loop_0_reg_182.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void randombytes::thread_or_ln_fu_393_p3() {
    or_ln_fu_393_p3 = esl_concat<1,5>(ap_const_lv1_1, i_3_reg_228.read());
}

void randombytes::thread_sext_ln246_fu_280_p1() {
    sext_ln246_fu_280_p1 = esl_sext<32,5>(j_0_reg_170.read());
}

void randombytes::thread_sext_ln290_fu_332_p1() {
    sext_ln290_fu_332_p1 = esl_sext<32,5>(j1_0_reg_205.read());
}

void randombytes::thread_shl_ln_fu_355_p3() {
    shl_ln_fu_355_p3 = esl_concat<2,4>(i_0_reg_193.read(), ap_const_lv4_0);
}

void randombytes::thread_temp_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        temp_address0 =  (sc_lv<6>) (zext_ln309_fu_401_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        temp_address0 =  (sc_lv<6>) (zext_ln307_fu_376_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        temp_address0 = grp_AES256_ECB_fu_240_buffer_r_address0.read();
    } else {
        temp_address0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void randombytes::thread_temp_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        temp_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        temp_ce0 = grp_AES256_ECB_fu_240_buffer_r_ce0.read();
    } else {
        temp_ce0 = ap_const_logic_0;
    }
}

void randombytes::thread_temp_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        temp_we0 = grp_AES256_ECB_fu_240_buffer_r_we0.read();
    } else {
        temp_we0 = ap_const_logic_0;
    }
}

void randombytes::thread_tmp_1_fu_336_p3() {
    tmp_1_fu_336_p3 = j1_0_reg_205.read().range(4, 4);
}

void randombytes::thread_tmp_fu_284_p3() {
    tmp_fu_284_p3 = j_0_reg_170.read().range(4, 4);
}

void randombytes::thread_x_address0() {
    x_address0 =  (sc_lv<5>) (zext_ln270_reg_451.read());
}

void randombytes::thread_x_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void randombytes::thread_x_d0() {
    x_d0 = block_q0.read();
}

void randombytes::thread_x_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        x_we0 = ap_const_logic_1;
    } else {
        x_we0 = ap_const_logic_0;
    }
}

void randombytes::thread_zext_ln249_fu_292_p1() {
    zext_ln249_fu_292_p1 = esl_zext<64,32>(sext_ln246_fu_280_p1.read());
}

void randombytes::thread_zext_ln270_fu_315_p1() {
    zext_ln270_fu_315_p1 = esl_zext<64,5>(loop_0_reg_182.read());
}

void randombytes::thread_zext_ln292_fu_344_p1() {
    zext_ln292_fu_344_p1 = esl_zext<64,32>(sext_ln290_fu_332_p1.read());
}

void randombytes::thread_zext_ln307_fu_376_p1() {
    zext_ln307_fu_376_p1 = esl_zext<64,6>(i_2_reg_217.read());
}

void randombytes::thread_zext_ln309_1_fu_422_p1() {
    zext_ln309_1_fu_422_p1 = esl_zext<64,5>(i_3_reg_228.read());
}

void randombytes::thread_zext_ln309_fu_401_p1() {
    zext_ln309_fu_401_p1 = esl_zext<64,6>(or_ln_fu_393_p3.read());
}

void randombytes::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_284_p3.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_267_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(grp_AES256_ECB_1_fu_254_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln269_fu_303_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln287_fu_320_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_336_p3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_267_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(grp_AES256_ECB_fu_240_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln306_fu_364_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln308_fu_381_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

}

