// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module picnic_keygen (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        parameters,
        pk_plaintext_address0,
        pk_plaintext_ce0,
        pk_plaintext_we0,
        pk_plaintext_d0,
        pk_plaintext_q0,
        pk_plaintext_address1,
        pk_plaintext_ce1,
        pk_plaintext_q1,
        pk_ciphertext_address0,
        pk_ciphertext_ce0,
        pk_ciphertext_we0,
        pk_ciphertext_d0,
        pk_ciphertext_q0,
        pk_ciphertext_address1,
        pk_ciphertext_ce1,
        pk_ciphertext_q1,
        sk_data_address0,
        sk_data_ce0,
        sk_data_we0,
        sk_data_d0,
        sk_data_q0,
        sk_data_address1,
        sk_data_ce1,
        sk_data_q1,
        sk_pk_plaintext_address0,
        sk_pk_plaintext_ce0,
        sk_pk_plaintext_we0,
        sk_pk_plaintext_d0,
        sk_pk_ciphertext_address0,
        sk_pk_ciphertext_ce0,
        sk_pk_ciphertext_we0,
        sk_pk_ciphertext_d0,
        DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0,
        DRBG_ctx_V_d0,
        DRBG_ctx_V_q0,
        DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0,
        DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] parameters;
output  [4:0] pk_plaintext_address0;
output   pk_plaintext_ce0;
output   pk_plaintext_we0;
output  [7:0] pk_plaintext_d0;
input  [7:0] pk_plaintext_q0;
output  [4:0] pk_plaintext_address1;
output   pk_plaintext_ce1;
input  [7:0] pk_plaintext_q1;
output  [4:0] pk_ciphertext_address0;
output   pk_ciphertext_ce0;
output   pk_ciphertext_we0;
output  [7:0] pk_ciphertext_d0;
input  [7:0] pk_ciphertext_q0;
output  [4:0] pk_ciphertext_address1;
output   pk_ciphertext_ce1;
input  [7:0] pk_ciphertext_q1;
output  [4:0] sk_data_address0;
output   sk_data_ce0;
output   sk_data_we0;
output  [7:0] sk_data_d0;
input  [7:0] sk_data_q0;
output  [4:0] sk_data_address1;
output   sk_data_ce1;
input  [7:0] sk_data_q1;
output  [4:0] sk_pk_plaintext_address0;
output   sk_pk_plaintext_ce0;
output   sk_pk_plaintext_we0;
output  [7:0] sk_pk_plaintext_d0;
output  [4:0] sk_pk_ciphertext_address0;
output   sk_pk_ciphertext_ce0;
output   sk_pk_ciphertext_we0;
output  [7:0] sk_pk_ciphertext_d0;
output  [3:0] DRBG_ctx_V_address0;
output   DRBG_ctx_V_ce0;
output   DRBG_ctx_V_we0;
output  [7:0] DRBG_ctx_V_d0;
input  [7:0] DRBG_ctx_V_q0;
output  [4:0] DRBG_ctx_Key_address0;
output   DRBG_ctx_Key_ce0;
output   DRBG_ctx_Key_we0;
output  [7:0] DRBG_ctx_Key_d0;
input  [7:0] DRBG_ctx_Key_q0;
input  [31:0] DRBG_ctx_reseed_counter_i;
output  [31:0] DRBG_ctx_reseed_counter_o;
output   DRBG_ctx_reseed_counter_o_ap_vld;
output  [31:0] ap_return_0;
output  [3:0] ap_return_1;
output  [3:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] pk_plaintext_address0;
reg pk_plaintext_ce0;
reg pk_plaintext_we0;
reg[4:0] pk_plaintext_address1;
reg pk_plaintext_ce1;
reg[4:0] pk_ciphertext_address0;
reg pk_ciphertext_ce0;
reg pk_ciphertext_we0;
reg[4:0] pk_ciphertext_address1;
reg pk_ciphertext_ce1;
reg[4:0] sk_data_address0;
reg sk_data_ce0;
reg sk_data_we0;
reg[4:0] sk_data_address1;
reg sk_data_ce1;
reg sk_pk_plaintext_ce0;
reg sk_pk_plaintext_we0;
reg sk_pk_ciphertext_ce0;
reg sk_pk_ciphertext_we0;
reg DRBG_ctx_V_ce0;
reg DRBG_ctx_V_we0;
reg DRBG_ctx_Key_ce0;
reg DRBG_ctx_Key_we0;
reg[31:0] DRBG_ctx_reseed_counter_o;
reg DRBG_ctx_reseed_counter_o_ap_vld;
reg[31:0] ap_return_0;
reg[3:0] ap_return_1;
reg[3:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] add_ln210_fu_564_p2;
wire    ap_CS_fsm_state5;
wire   [2:0] add_ln210_1_fu_581_p2;
wire    ap_CS_fsm_state6;
wire   [2:0] add_ln210_2_fu_598_p2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_fu_615_p3;
wire   [4:0] trunc_ln211_fu_630_p1;
reg   [4:0] trunc_ln211_reg_861;
reg   [2:0] trunc_ln213_1_reg_872;
wire   [5:0] loop_fu_657_p2;
reg   [5:0] loop_reg_897;
reg   [7:0] pk_ciphertext_load_reg_902;
wire    ap_CS_fsm_state9;
reg   [7:0] pk_ciphertext_load_1_reg_907;
reg   [7:0] pk_plaintext_load_reg_922;
reg   [7:0] pk_plaintext_load_1_reg_927;
reg   [7:0] sk_data_load_reg_942;
reg   [7:0] sk_data_load_1_reg_947;
wire   [5:0] loop_3_fu_732_p2;
reg   [5:0] loop_3_reg_965;
wire    ap_CS_fsm_state12;
reg   [2:0] temp_addr_3_reg_970;
wire   [0:0] icmp_ln221_fu_726_p2;
wire   [5:0] loop_4_fu_784_p2;
reg   [5:0] loop_4_reg_978;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln231_fu_790_p1;
reg   [63:0] zext_ln231_reg_983;
wire   [0:0] icmp_ln229_fu_778_p2;
reg   [2:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
reg   [31:0] temp_d0;
wire   [31:0] temp_q0;
reg   [2:0] temp2_address0;
reg    temp2_ce0;
reg    temp2_we0;
reg   [31:0] temp2_d0;
wire   [31:0] temp2_q0;
reg   [2:0] temp3_address0;
reg    temp3_ce0;
reg    temp3_we0;
reg   [31:0] temp3_d0;
wire   [31:0] temp3_q0;
wire    grp_randombytes_fu_456_ap_start;
wire    grp_randombytes_fu_456_ap_done;
wire    grp_randombytes_fu_456_ap_idle;
wire    grp_randombytes_fu_456_ap_ready;
wire   [4:0] grp_randombytes_fu_456_x_address0;
wire    grp_randombytes_fu_456_x_ce0;
wire    grp_randombytes_fu_456_x_we0;
wire   [7:0] grp_randombytes_fu_456_x_d0;
wire   [3:0] grp_randombytes_fu_456_DRBG_ctx_V_address0;
wire    grp_randombytes_fu_456_DRBG_ctx_V_ce0;
wire    grp_randombytes_fu_456_DRBG_ctx_V_we0;
wire   [7:0] grp_randombytes_fu_456_DRBG_ctx_V_d0;
wire   [4:0] grp_randombytes_fu_456_DRBG_ctx_Key_address0;
wire    grp_randombytes_fu_456_DRBG_ctx_Key_ce0;
wire    grp_randombytes_fu_456_DRBG_ctx_Key_we0;
wire   [7:0] grp_randombytes_fu_456_DRBG_ctx_Key_d0;
wire   [31:0] grp_randombytes_fu_456_DRBG_ctx_reseed_counter_o;
wire    grp_randombytes_fu_456_DRBG_ctx_reseed_counter_o_ap_vld;
wire    grp_LowMCEnc_fu_473_ap_start;
wire    grp_LowMCEnc_fu_473_ap_done;
wire    grp_LowMCEnc_fu_473_ap_idle;
wire    grp_LowMCEnc_fu_473_ap_ready;
wire   [2:0] grp_LowMCEnc_fu_473_plaintext_address0;
wire    grp_LowMCEnc_fu_473_plaintext_ce0;
wire   [2:0] grp_LowMCEnc_fu_473_output_r_address0;
wire    grp_LowMCEnc_fu_473_output_r_ce0;
wire    grp_LowMCEnc_fu_473_output_r_we0;
wire   [31:0] grp_LowMCEnc_fu_473_output_r_d0;
wire   [2:0] grp_LowMCEnc_fu_473_key_address0;
wire    grp_LowMCEnc_fu_473_key_ce0;
reg   [2:0] phi_ln210_reg_376;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln210_fu_575_p2;
reg   [2:0] phi_ln210_1_reg_387;
wire   [0:0] icmp_ln210_1_fu_592_p2;
reg   [2:0] phi_ln210_2_reg_398;
wire   [0:0] icmp_ln210_2_fu_609_p2;
reg   [5:0] loop_0_reg_409;
wire    ap_CS_fsm_state10;
reg   [5:0] loop_1_reg_420;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
reg   [5:0] loop_2_reg_432;
wire    ap_CS_fsm_state15;
reg   [0:0] p_0_reg_443;
wire   [0:0] empty_30_fu_558_p2;
reg    grp_randombytes_fu_456_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state2;
reg    grp_LowMCEnc_fu_473_ap_start_reg;
wire   [63:0] zext_ln210_fu_570_p1;
wire   [63:0] zext_ln210_1_fu_587_p1;
wire   [63:0] zext_ln210_2_fu_604_p1;
wire   [63:0] zext_ln213_fu_623_p1;
wire   [63:0] zext_ln213_1_fu_640_p1;
wire   [63:0] zext_ln213_2_fu_668_p1;
wire   [63:0] zext_ln213_3_fu_680_p1;
wire   [63:0] zext_ln213_4_fu_698_p1;
wire   [63:0] zext_ln223_fu_748_p1;
wire   [63:0] zext_ln223_1_fu_758_p1;
wire   [31:0] or_ln213_5_fu_687_p5;
wire   [31:0] zext_ln224_fu_773_p1;
wire   [31:0] or_ln214_2_fu_704_p5;
wire   [31:0] or_ln215_2_fu_715_p5;
wire   [0:0] empty_19_fu_492_p2;
wire   [0:0] empty_fu_486_p2;
wire   [0:0] empty_21_fu_504_p2;
wire   [0:0] empty_20_fu_498_p2;
wire   [0:0] empty_23_fu_516_p2;
wire   [0:0] empty_22_fu_510_p2;
wire   [0:0] empty_25_fu_528_p2;
wire   [0:0] empty_24_fu_522_p2;
wire   [0:0] empty_27_fu_540_p2;
wire   [0:0] empty_26_fu_534_p2;
wire   [0:0] empty_29_fu_552_p2;
wire   [0:0] empty_28_fu_546_p2;
wire   [4:0] or_ln213_fu_634_p2;
wire   [4:0] or_ln213_1_fu_663_p2;
wire   [4:0] or_ln213_2_fu_675_p2;
wire   [3:0] lshr_ln_fu_738_p4;
wire   [23:0] lshr_ln1_fu_763_p4;
wire    ap_CS_fsm_state16;
wire   [31:0] select_ln166_fu_796_p3;
reg   [31:0] ap_return_0_preg;
reg   [3:0] ap_return_1_preg;
reg   [3:0] ap_return_2_preg;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_randombytes_fu_456_ap_start_reg = 1'b0;
#0 grp_LowMCEnc_fu_473_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 4'd0;
#0 ap_return_2_preg = 4'd0;
end

picnic_keygen_temp #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0)
);

picnic_keygen_temp #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp2_address0),
    .ce0(temp2_ce0),
    .we0(temp2_we0),
    .d0(temp2_d0),
    .q0(temp2_q0)
);

picnic_keygen_temp #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp3_address0),
    .ce0(temp3_ce0),
    .we0(temp3_we0),
    .d0(temp3_d0),
    .q0(temp3_q0)
);

randombytes grp_randombytes_fu_456(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_randombytes_fu_456_ap_start),
    .ap_done(grp_randombytes_fu_456_ap_done),
    .ap_idle(grp_randombytes_fu_456_ap_idle),
    .ap_ready(grp_randombytes_fu_456_ap_ready),
    .x_address0(grp_randombytes_fu_456_x_address0),
    .x_ce0(grp_randombytes_fu_456_x_ce0),
    .x_we0(grp_randombytes_fu_456_x_we0),
    .x_d0(grp_randombytes_fu_456_x_d0),
    .DRBG_ctx_V_address0(grp_randombytes_fu_456_DRBG_ctx_V_address0),
    .DRBG_ctx_V_ce0(grp_randombytes_fu_456_DRBG_ctx_V_ce0),
    .DRBG_ctx_V_we0(grp_randombytes_fu_456_DRBG_ctx_V_we0),
    .DRBG_ctx_V_d0(grp_randombytes_fu_456_DRBG_ctx_V_d0),
    .DRBG_ctx_V_q0(DRBG_ctx_V_q0),
    .DRBG_ctx_Key_address0(grp_randombytes_fu_456_DRBG_ctx_Key_address0),
    .DRBG_ctx_Key_ce0(grp_randombytes_fu_456_DRBG_ctx_Key_ce0),
    .DRBG_ctx_Key_we0(grp_randombytes_fu_456_DRBG_ctx_Key_we0),
    .DRBG_ctx_Key_d0(grp_randombytes_fu_456_DRBG_ctx_Key_d0),
    .DRBG_ctx_Key_q0(DRBG_ctx_Key_q0),
    .DRBG_ctx_reseed_counter_i(DRBG_ctx_reseed_counter_i),
    .DRBG_ctx_reseed_counter_o(grp_randombytes_fu_456_DRBG_ctx_reseed_counter_o),
    .DRBG_ctx_reseed_counter_o_ap_vld(grp_randombytes_fu_456_DRBG_ctx_reseed_counter_o_ap_vld)
);

LowMCEnc grp_LowMCEnc_fu_473(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_LowMCEnc_fu_473_ap_start),
    .ap_done(grp_LowMCEnc_fu_473_ap_done),
    .ap_idle(grp_LowMCEnc_fu_473_ap_idle),
    .ap_ready(grp_LowMCEnc_fu_473_ap_ready),
    .plaintext_address0(grp_LowMCEnc_fu_473_plaintext_address0),
    .plaintext_ce0(grp_LowMCEnc_fu_473_plaintext_ce0),
    .plaintext_q0(temp2_q0),
    .output_r_address0(grp_LowMCEnc_fu_473_output_r_address0),
    .output_r_ce0(grp_LowMCEnc_fu_473_output_r_ce0),
    .output_r_we0(grp_LowMCEnc_fu_473_output_r_we0),
    .output_r_d0(grp_LowMCEnc_fu_473_output_r_d0),
    .output_r_q0(temp_q0),
    .key_address0(grp_LowMCEnc_fu_473_key_address0),
    .key_ce0(grp_LowMCEnc_fu_473_key_ce0),
    .key_q0(temp3_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_return_0_preg <= select_ln166_fu_796_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 4'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_return_1_preg <= parameters;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 4'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_return_2_preg <= parameters;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_LowMCEnc_fu_473_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (tmp_fu_615_p3 == 1'd1))) begin
            grp_LowMCEnc_fu_473_ap_start_reg <= 1'b1;
        end else if ((grp_LowMCEnc_fu_473_ap_ready == 1'b1)) begin
            grp_LowMCEnc_fu_473_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_randombytes_fu_456_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (empty_30_fu_558_p2 == 1'd0)))) begin
            grp_randombytes_fu_456_ap_start_reg <= 1'b1;
        end else if ((grp_randombytes_fu_456_ap_ready == 1'b1)) begin
            grp_randombytes_fu_456_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln210_2_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        loop_0_reg_409 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        loop_0_reg_409 <= loop_reg_897;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        loop_1_reg_420 <= loop_3_reg_965;
    end else if (((grp_LowMCEnc_fu_473_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        loop_1_reg_420 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln221_fu_726_p2 == 1'd1))) begin
        loop_2_reg_432 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        loop_2_reg_432 <= loop_4_reg_978;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln229_fu_778_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        p_0_reg_443 <= 1'd0;
    end else if (((empty_30_fu_558_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_reg_443 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln210_fu_575_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln210_1_reg_387 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln210_1_fu_592_p2 == 1'd0))) begin
        phi_ln210_1_reg_387 <= add_ln210_1_fu_581_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln210_1_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_ln210_2_reg_398 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln210_2_fu_609_p2 == 1'd0))) begin
        phi_ln210_2_reg_398 <= add_ln210_2_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln210_fu_575_p2 == 1'd0))) begin
        phi_ln210_reg_376 <= add_ln210_fu_564_p2;
    end else if (((grp_randombytes_fu_456_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln210_reg_376 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        loop_3_reg_965 <= loop_3_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        loop_4_reg_978 <= loop_4_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_fu_615_p3 == 1'd0))) begin
        loop_reg_897 <= loop_fu_657_p2;
        trunc_ln211_reg_861 <= trunc_ln211_fu_630_p1;
        trunc_ln213_1_reg_872 <= {{loop_0_reg_409[4:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pk_ciphertext_load_1_reg_907 <= pk_ciphertext_q1;
        pk_ciphertext_load_reg_902 <= pk_ciphertext_q0;
        pk_plaintext_load_1_reg_927 <= pk_plaintext_q1;
        pk_plaintext_load_reg_922 <= pk_plaintext_q0;
        sk_data_load_1_reg_947 <= sk_data_q1;
        sk_data_load_reg_942 <= sk_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln221_fu_726_p2 == 1'd0))) begin
        temp_addr_3_reg_970 <= zext_ln223_fu_748_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln229_fu_778_p2 == 1'd0))) begin
        zext_ln231_reg_983[5 : 0] <= zext_ln231_fu_790_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        DRBG_ctx_Key_ce0 = grp_randombytes_fu_456_DRBG_ctx_Key_ce0;
    end else begin
        DRBG_ctx_Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        DRBG_ctx_Key_we0 = grp_randombytes_fu_456_DRBG_ctx_Key_we0;
    end else begin
        DRBG_ctx_Key_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        DRBG_ctx_V_ce0 = grp_randombytes_fu_456_DRBG_ctx_V_ce0;
    end else begin
        DRBG_ctx_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        DRBG_ctx_V_we0 = grp_randombytes_fu_456_DRBG_ctx_V_we0;
    end else begin
        DRBG_ctx_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (grp_randombytes_fu_456_DRBG_ctx_reseed_counter_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (grp_randombytes_fu_456_DRBG_ctx_reseed_counter_o_ap_vld == 1'b1)))) begin
        DRBG_ctx_reseed_counter_o = grp_randombytes_fu_456_DRBG_ctx_reseed_counter_o;
    end else begin
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        DRBG_ctx_reseed_counter_o_ap_vld = grp_randombytes_fu_456_DRBG_ctx_reseed_counter_o_ap_vld;
    end else begin
        DRBG_ctx_reseed_counter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_return_0 = select_ln166_fu_796_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_return_1 = parameters;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_return_2 = parameters;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        pk_ciphertext_address0 = zext_ln223_1_fu_758_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pk_ciphertext_address0 = zext_ln213_2_fu_668_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        pk_ciphertext_address0 = zext_ln213_fu_623_p1;
    end else begin
        pk_ciphertext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        pk_ciphertext_address1 = zext_ln231_fu_790_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pk_ciphertext_address1 = zext_ln213_3_fu_680_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        pk_ciphertext_address1 = zext_ln213_1_fu_640_p1;
    end else begin
        pk_ciphertext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        pk_ciphertext_ce0 = 1'b1;
    end else begin
        pk_ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        pk_ciphertext_ce1 = 1'b1;
    end else begin
        pk_ciphertext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        pk_ciphertext_we0 = 1'b1;
    end else begin
        pk_ciphertext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        pk_plaintext_address0 = zext_ln231_fu_790_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pk_plaintext_address0 = zext_ln213_2_fu_668_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        pk_plaintext_address0 = zext_ln213_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pk_plaintext_address0 = grp_randombytes_fu_456_x_address0;
    end else begin
        pk_plaintext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pk_plaintext_address1 = zext_ln213_3_fu_680_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        pk_plaintext_address1 = zext_ln213_1_fu_640_p1;
    end else begin
        pk_plaintext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        pk_plaintext_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pk_plaintext_ce0 = grp_randombytes_fu_456_x_ce0;
    end else begin
        pk_plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        pk_plaintext_ce1 = 1'b1;
    end else begin
        pk_plaintext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pk_plaintext_we0 = grp_randombytes_fu_456_x_we0;
    end else begin
        pk_plaintext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sk_data_address0 = zext_ln213_2_fu_668_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sk_data_address0 = zext_ln213_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sk_data_address0 = grp_randombytes_fu_456_x_address0;
    end else begin
        sk_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sk_data_address1 = zext_ln213_3_fu_680_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sk_data_address1 = zext_ln213_1_fu_640_p1;
    end else begin
        sk_data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        sk_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sk_data_ce0 = grp_randombytes_fu_456_x_ce0;
    end else begin
        sk_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        sk_data_ce1 = 1'b1;
    end else begin
        sk_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sk_data_we0 = grp_randombytes_fu_456_x_we0;
    end else begin
        sk_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sk_pk_ciphertext_ce0 = 1'b1;
    end else begin
        sk_pk_ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sk_pk_ciphertext_we0 = 1'b1;
    end else begin
        sk_pk_ciphertext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sk_pk_plaintext_ce0 = 1'b1;
    end else begin
        sk_pk_plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sk_pk_plaintext_we0 = 1'b1;
    end else begin
        sk_pk_plaintext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp2_address0 = zext_ln213_4_fu_698_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp2_address0 = zext_ln210_1_fu_587_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp2_address0 = grp_LowMCEnc_fu_473_plaintext_address0;
    end else begin
        temp2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        temp2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp2_ce0 = grp_LowMCEnc_fu_473_plaintext_ce0;
    end else begin
        temp2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp2_d0 = or_ln214_2_fu_704_p5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp2_d0 = 32'd0;
    end else begin
        temp2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        temp2_we0 = 1'b1;
    end else begin
        temp2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp3_address0 = zext_ln213_4_fu_698_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp3_address0 = zext_ln210_2_fu_604_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp3_address0 = grp_LowMCEnc_fu_473_key_address0;
    end else begin
        temp3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        temp3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp3_ce0 = grp_LowMCEnc_fu_473_key_ce0;
    end else begin
        temp3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp3_d0 = or_ln215_2_fu_715_p5;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp3_d0 = 32'd0;
    end else begin
        temp3_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        temp3_we0 = 1'b1;
    end else begin
        temp3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temp_address0 = temp_addr_3_reg_970;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_address0 = zext_ln223_fu_748_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_address0 = zext_ln213_4_fu_698_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_address0 = zext_ln210_fu_570_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_address0 = grp_LowMCEnc_fu_473_output_r_address0;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        temp_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_ce0 = grp_LowMCEnc_fu_473_output_r_ce0;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temp_d0 = zext_ln224_fu_773_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_d0 = or_ln213_5_fu_687_p5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_d0 = grp_LowMCEnc_fu_473_output_r_d0;
    end else begin
        temp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        temp_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_we0 = grp_LowMCEnc_fu_473_output_r_we0;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((empty_30_fu_558_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (empty_30_fu_558_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_randombytes_fu_456_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_randombytes_fu_456_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln210_fu_575_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln210_1_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln210_2_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_fu_615_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_LowMCEnc_fu_473_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln221_fu_726_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln229_fu_778_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DRBG_ctx_Key_address0 = grp_randombytes_fu_456_DRBG_ctx_Key_address0;

assign DRBG_ctx_Key_d0 = grp_randombytes_fu_456_DRBG_ctx_Key_d0;

assign DRBG_ctx_V_address0 = grp_randombytes_fu_456_DRBG_ctx_V_address0;

assign DRBG_ctx_V_d0 = grp_randombytes_fu_456_DRBG_ctx_V_d0;

assign add_ln210_1_fu_581_p2 = (phi_ln210_1_reg_387 + 3'd1);

assign add_ln210_2_fu_598_p2 = (phi_ln210_2_reg_398 + 3'd1);

assign add_ln210_fu_564_p2 = (phi_ln210_reg_376 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_19_fu_492_p2 = ((parameters == 4'd14) ? 1'b1 : 1'b0);

assign empty_20_fu_498_p2 = (empty_fu_486_p2 | empty_19_fu_492_p2);

assign empty_21_fu_504_p2 = ((parameters == 4'd13) ? 1'b1 : 1'b0);

assign empty_22_fu_510_p2 = (empty_21_fu_504_p2 | empty_20_fu_498_p2);

assign empty_23_fu_516_p2 = ((parameters == 4'd12) ? 1'b1 : 1'b0);

assign empty_24_fu_522_p2 = (empty_23_fu_516_p2 | empty_22_fu_510_p2);

assign empty_25_fu_528_p2 = ((parameters == 4'd11) ? 1'b1 : 1'b0);

assign empty_26_fu_534_p2 = (empty_25_fu_528_p2 | empty_24_fu_522_p2);

assign empty_27_fu_540_p2 = ((parameters == 4'd10) ? 1'b1 : 1'b0);

assign empty_28_fu_546_p2 = (empty_27_fu_540_p2 | empty_26_fu_534_p2);

assign empty_29_fu_552_p2 = ((parameters == 4'd0) ? 1'b1 : 1'b0);

assign empty_30_fu_558_p2 = (empty_29_fu_552_p2 | empty_28_fu_546_p2);

assign empty_fu_486_p2 = ((parameters == 4'd15) ? 1'b1 : 1'b0);

assign grp_LowMCEnc_fu_473_ap_start = grp_LowMCEnc_fu_473_ap_start_reg;

assign grp_randombytes_fu_456_ap_start = grp_randombytes_fu_456_ap_start_reg;

assign icmp_ln210_1_fu_592_p2 = ((phi_ln210_1_reg_387 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln210_2_fu_609_p2 = ((phi_ln210_2_reg_398 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln210_fu_575_p2 = ((phi_ln210_reg_376 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln221_fu_726_p2 = ((loop_1_reg_420 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln229_fu_778_p2 = ((loop_2_reg_432 == 6'd32) ? 1'b1 : 1'b0);

assign loop_3_fu_732_p2 = (loop_1_reg_420 + 6'd1);

assign loop_4_fu_784_p2 = (loop_2_reg_432 + 6'd1);

assign loop_fu_657_p2 = (6'd4 + loop_0_reg_409);

assign lshr_ln1_fu_763_p4 = {{temp_q0[31:8]}};

assign lshr_ln_fu_738_p4 = {{loop_1_reg_420[5:2]}};

assign or_ln213_1_fu_663_p2 = (trunc_ln211_reg_861 | 5'd2);

assign or_ln213_2_fu_675_p2 = (trunc_ln211_reg_861 | 5'd3);

assign or_ln213_5_fu_687_p5 = {{{{pk_ciphertext_q1}, {pk_ciphertext_q0}}, {pk_ciphertext_load_1_reg_907}}, {pk_ciphertext_load_reg_902}};

assign or_ln213_fu_634_p2 = (trunc_ln211_fu_630_p1 | 5'd1);

assign or_ln214_2_fu_704_p5 = {{{{pk_plaintext_q1}, {pk_plaintext_q0}}, {pk_plaintext_load_1_reg_927}}, {pk_plaintext_load_reg_922}};

assign or_ln215_2_fu_715_p5 = {{{{sk_data_q1}, {sk_data_q0}}, {sk_data_load_1_reg_947}}, {sk_data_load_reg_942}};

assign pk_ciphertext_d0 = temp_q0[7:0];

assign pk_plaintext_d0 = grp_randombytes_fu_456_x_d0;

assign select_ln166_fu_796_p3 = ((p_0_reg_443[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign sk_data_d0 = grp_randombytes_fu_456_x_d0;

assign sk_pk_ciphertext_address0 = zext_ln231_reg_983;

assign sk_pk_ciphertext_d0 = pk_ciphertext_q1;

assign sk_pk_plaintext_address0 = zext_ln231_reg_983;

assign sk_pk_plaintext_d0 = pk_plaintext_q0;

assign tmp_fu_615_p3 = loop_0_reg_409[32'd5];

assign trunc_ln211_fu_630_p1 = loop_0_reg_409[4:0];

assign zext_ln210_1_fu_587_p1 = phi_ln210_1_reg_387;

assign zext_ln210_2_fu_604_p1 = phi_ln210_2_reg_398;

assign zext_ln210_fu_570_p1 = phi_ln210_reg_376;

assign zext_ln213_1_fu_640_p1 = or_ln213_fu_634_p2;

assign zext_ln213_2_fu_668_p1 = or_ln213_1_fu_663_p2;

assign zext_ln213_3_fu_680_p1 = or_ln213_2_fu_675_p2;

assign zext_ln213_4_fu_698_p1 = trunc_ln213_1_reg_872;

assign zext_ln213_fu_623_p1 = loop_0_reg_409;

assign zext_ln223_1_fu_758_p1 = loop_1_reg_420;

assign zext_ln223_fu_748_p1 = lshr_ln_fu_738_p4;

assign zext_ln224_fu_773_p1 = lshr_ln1_fu_763_p4;

assign zext_ln231_fu_790_p1 = loop_2_reg_432;

always @ (posedge ap_clk) begin
    zext_ln231_reg_983[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //picnic_keygen
