// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crypto_sign_keypair,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.365833,HLS_SYN_LAT=44813,HLS_SYN_TPT=none,HLS_SYN_MEM=92,HLS_SYN_DSP=0,HLS_SYN_FF=5113,HLS_SYN_LUT=24648,HLS_VERSION=2019_2}" *)

module crypto_sign_keypair (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pk_address0,
        pk_ce0,
        pk_we0,
        pk_d0,
        pk_address1,
        pk_ce1,
        pk_we1,
        pk_d1,
        sk_address0,
        sk_ce0,
        sk_we0,
        sk_d0,
        sk_address1,
        sk_ce1,
        sk_we1,
        sk_d1,
        params,
        DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0,
        DRBG_ctx_V_d0,
        DRBG_ctx_V_q0,
        DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1,
        DRBG_ctx_V_we1,
        DRBG_ctx_V_d1,
        DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_we1,
        DRBG_ctx_Key_d1,
        DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_state5 = 10'd8;
parameter    ap_ST_fsm_pp1_stage0 = 10'd16;
parameter    ap_ST_fsm_state8 = 10'd32;
parameter    ap_ST_fsm_pp2_stage0 = 10'd64;
parameter    ap_ST_fsm_pp2_stage1 = 10'd128;
parameter    ap_ST_fsm_state12 = 10'd256;
parameter    ap_ST_fsm_state13 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] pk_address0;
output   pk_ce0;
output   pk_we0;
output  [7:0] pk_d0;
output  [5:0] pk_address1;
output   pk_ce1;
output   pk_we1;
output  [7:0] pk_d1;
output  [5:0] sk_address0;
output   sk_ce0;
output   sk_we0;
output  [7:0] sk_d0;
output  [5:0] sk_address1;
output   sk_ce1;
output   sk_we1;
output  [7:0] sk_d1;
input  [3:0] params;
output  [3:0] DRBG_ctx_V_address0;
output   DRBG_ctx_V_ce0;
output   DRBG_ctx_V_we0;
output  [7:0] DRBG_ctx_V_d0;
input  [7:0] DRBG_ctx_V_q0;
output  [3:0] DRBG_ctx_V_address1;
output   DRBG_ctx_V_ce1;
output   DRBG_ctx_V_we1;
output  [7:0] DRBG_ctx_V_d1;
input  [7:0] DRBG_ctx_V_q1;
output  [4:0] DRBG_ctx_Key_address0;
output   DRBG_ctx_Key_ce0;
output   DRBG_ctx_Key_we0;
output  [7:0] DRBG_ctx_Key_d0;
input  [7:0] DRBG_ctx_Key_q0;
output  [4:0] DRBG_ctx_Key_address1;
output   DRBG_ctx_Key_ce1;
output   DRBG_ctx_Key_we1;
output  [7:0] DRBG_ctx_Key_d1;
input  [7:0] DRBG_ctx_Key_q1;
input  [31:0] DRBG_ctx_reseed_counter_i;
output  [31:0] DRBG_ctx_reseed_counter_o;
output   DRBG_ctx_reseed_counter_o_ap_vld;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] pk_address0;
reg pk_ce0;
reg pk_we0;
reg[7:0] pk_d0;
reg[5:0] pk_address1;
reg pk_ce1;
reg pk_we1;
reg[7:0] pk_d1;
reg[5:0] sk_address0;
reg sk_ce0;
reg sk_we0;
reg[7:0] sk_d0;
reg sk_ce1;
reg sk_we1;
reg[31:0] DRBG_ctx_reseed_counter_o;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] loop_0_0_i_reg_278;
reg   [4:0] loop_1_0_i_reg_289;
reg   [4:0] loop_0_i_reg_300;
wire    ap_CS_fsm_state2;
wire    grp_picnic_keygen_fu_322_ap_ready;
wire    grp_picnic_keygen_fu_322_ap_done;
reg   [3:0] secret_params_reg_534;
wire   [0:0] icmp_ln66_fu_368_p2;
wire   [0:0] icmp_ln549_fu_379_p2;
reg   [0:0] icmp_ln549_reg_543;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln553_1_fu_400_p1;
reg   [63:0] zext_ln553_1_reg_552;
wire   [4:0] add_ln553_fu_405_p2;
reg   [4:0] add_ln553_reg_562;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln556_fu_415_p2;
reg   [0:0] icmp_ln556_reg_568;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] or_ln559_fu_434_p2;
reg   [3:0] or_ln559_reg_577;
wire   [4:0] add_ln559_fu_445_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [5:0] add_ln559_1_fu_451_p2;
reg   [5:0] add_ln559_1_reg_592;
wire   [0:0] icmp_ln632_fu_477_p2;
reg   [0:0] icmp_ln632_reg_597;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state9_pp2_stage0_iter0;
wire    ap_block_state11_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [4:0] loop_fu_483_p2;
reg   [4:0] loop_reg_601;
reg    ap_enable_reg_pp2_iter0;
wire   [5:0] sext_ln632_i_cast_fu_496_p1;
reg   [5:0] sext_ln632_i_cast_reg_607;
wire   [7:0] secret_pk_plaintext_q0;
reg   [7:0] secret_pk_plaintext_1_reg_628;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state10_pp2_stage1_iter0;
wire    ap_block_pp2_stage1_11001;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state8;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state9;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage1_subdone;
reg   [4:0] pubkey_plaintext_address0;
reg    pubkey_plaintext_ce0;
reg    pubkey_plaintext_we0;
wire   [7:0] pubkey_plaintext_q0;
reg   [4:0] pubkey_plaintext_address1;
reg    pubkey_plaintext_ce1;
reg    pubkey_plaintext_we1;
wire   [7:0] pubkey_plaintext_q1;
reg   [4:0] pubkey_ciphertext_address0;
reg    pubkey_ciphertext_ce0;
reg    pubkey_ciphertext_we0;
wire   [7:0] pubkey_ciphertext_q0;
reg   [4:0] pubkey_ciphertext_address1;
reg    pubkey_ciphertext_ce1;
reg    pubkey_ciphertext_we1;
wire   [7:0] pubkey_ciphertext_q1;
reg   [4:0] secret_data_address0;
reg    secret_data_ce0;
reg    secret_data_we0;
wire   [7:0] secret_data_q0;
reg    secret_data_ce1;
reg    secret_data_we1;
wire   [7:0] secret_data_q1;
reg   [4:0] secret_pk_plaintext_address0;
reg    secret_pk_plaintext_ce0;
reg    secret_pk_plaintext_we0;
reg    secret_pk_plaintext_ce1;
reg    secret_pk_plaintext_we1;
reg   [4:0] secret_pk_ciphertext_address0;
reg    secret_pk_ciphertext_ce0;
reg    secret_pk_ciphertext_we0;
wire   [7:0] secret_pk_ciphertext_q0;
reg    secret_pk_ciphertext_ce1;
reg    secret_pk_ciphertext_we1;
wire    grp_picnic_keygen_fu_322_ap_start;
wire    grp_picnic_keygen_fu_322_ap_idle;
wire   [4:0] grp_picnic_keygen_fu_322_pk_plaintext_address0;
wire    grp_picnic_keygen_fu_322_pk_plaintext_ce0;
wire    grp_picnic_keygen_fu_322_pk_plaintext_we0;
wire   [7:0] grp_picnic_keygen_fu_322_pk_plaintext_d0;
wire   [4:0] grp_picnic_keygen_fu_322_pk_plaintext_address1;
wire    grp_picnic_keygen_fu_322_pk_plaintext_ce1;
wire    grp_picnic_keygen_fu_322_pk_plaintext_we1;
wire   [7:0] grp_picnic_keygen_fu_322_pk_plaintext_d1;
wire   [4:0] grp_picnic_keygen_fu_322_pk_ciphertext_address0;
wire    grp_picnic_keygen_fu_322_pk_ciphertext_ce0;
wire    grp_picnic_keygen_fu_322_pk_ciphertext_we0;
wire   [7:0] grp_picnic_keygen_fu_322_pk_ciphertext_d0;
wire   [4:0] grp_picnic_keygen_fu_322_pk_ciphertext_address1;
wire    grp_picnic_keygen_fu_322_pk_ciphertext_ce1;
wire    grp_picnic_keygen_fu_322_pk_ciphertext_we1;
wire   [7:0] grp_picnic_keygen_fu_322_pk_ciphertext_d1;
wire   [4:0] grp_picnic_keygen_fu_322_sk_data_address0;
wire    grp_picnic_keygen_fu_322_sk_data_ce0;
wire    grp_picnic_keygen_fu_322_sk_data_we0;
wire   [7:0] grp_picnic_keygen_fu_322_sk_data_d0;
wire   [4:0] grp_picnic_keygen_fu_322_sk_data_address1;
wire    grp_picnic_keygen_fu_322_sk_data_ce1;
wire    grp_picnic_keygen_fu_322_sk_data_we1;
wire   [7:0] grp_picnic_keygen_fu_322_sk_data_d1;
wire   [4:0] grp_picnic_keygen_fu_322_sk_pk_plaintext_address0;
wire    grp_picnic_keygen_fu_322_sk_pk_plaintext_ce0;
wire    grp_picnic_keygen_fu_322_sk_pk_plaintext_we0;
wire   [7:0] grp_picnic_keygen_fu_322_sk_pk_plaintext_d0;
wire   [4:0] grp_picnic_keygen_fu_322_sk_pk_plaintext_address1;
wire    grp_picnic_keygen_fu_322_sk_pk_plaintext_ce1;
wire    grp_picnic_keygen_fu_322_sk_pk_plaintext_we1;
wire   [7:0] grp_picnic_keygen_fu_322_sk_pk_plaintext_d1;
wire   [4:0] grp_picnic_keygen_fu_322_sk_pk_ciphertext_address0;
wire    grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce0;
wire    grp_picnic_keygen_fu_322_sk_pk_ciphertext_we0;
wire   [7:0] grp_picnic_keygen_fu_322_sk_pk_ciphertext_d0;
wire   [4:0] grp_picnic_keygen_fu_322_sk_pk_ciphertext_address1;
wire    grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce1;
wire    grp_picnic_keygen_fu_322_sk_pk_ciphertext_we1;
wire   [7:0] grp_picnic_keygen_fu_322_sk_pk_ciphertext_d1;
wire   [3:0] grp_picnic_keygen_fu_322_DRBG_ctx_V_address0;
wire    grp_picnic_keygen_fu_322_DRBG_ctx_V_ce0;
wire    grp_picnic_keygen_fu_322_DRBG_ctx_V_we0;
wire   [7:0] grp_picnic_keygen_fu_322_DRBG_ctx_V_d0;
wire   [3:0] grp_picnic_keygen_fu_322_DRBG_ctx_V_address1;
wire    grp_picnic_keygen_fu_322_DRBG_ctx_V_ce1;
wire    grp_picnic_keygen_fu_322_DRBG_ctx_V_we1;
wire   [7:0] grp_picnic_keygen_fu_322_DRBG_ctx_V_d1;
wire   [4:0] grp_picnic_keygen_fu_322_DRBG_ctx_Key_address0;
wire    grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce0;
wire    grp_picnic_keygen_fu_322_DRBG_ctx_Key_we0;
wire   [7:0] grp_picnic_keygen_fu_322_DRBG_ctx_Key_d0;
wire   [4:0] grp_picnic_keygen_fu_322_DRBG_ctx_Key_address1;
wire    grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce1;
wire    grp_picnic_keygen_fu_322_DRBG_ctx_Key_we1;
wire   [7:0] grp_picnic_keygen_fu_322_DRBG_ctx_Key_d1;
wire   [31:0] grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o;
wire    grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o_ap_vld;
wire   [31:0] grp_picnic_keygen_fu_322_ap_return_0;
wire   [3:0] grp_picnic_keygen_fu_322_ap_return_1;
wire   [3:0] grp_picnic_keygen_fu_322_ap_return_2;
reg   [4:0] ap_phi_mux_loop_0_0_i_phi_fu_282_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_loop_0_i_phi_fu_304_p4;
wire    ap_block_pp2_stage0;
reg   [31:0] UnifiedRetVal_reg_311;
wire    ap_CS_fsm_state12;
reg    grp_picnic_keygen_fu_322_ap_start_reg;
wire   [63:0] zext_ln553_fu_389_p1;
wire   [63:0] zext_ln553_2_fu_411_p1;
wire   [63:0] zext_ln559_fu_429_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln559_2_fu_440_p1;
wire   [63:0] zext_ln559_1_fu_464_p1;
wire   [63:0] zext_ln559_3_fu_469_p1;
wire   [63:0] zext_ln632_fu_489_p1;
wire   [63:0] zext_ln637_fu_500_p1;
wire    ap_block_pp2_stage1;
wire   [63:0] zext_ln638_fu_509_p1;
wire   [63:0] zext_ln639_fu_519_p1;
wire   [7:0] zext_ln545_fu_374_p1;
wire   [7:0] zext_ln627_fu_473_p1;
wire   [3:0] trunc_ln549_fu_385_p1;
wire   [3:0] or_ln553_fu_394_p2;
wire   [3:0] trunc_ln556_fu_425_p1;
wire   [5:0] zext_ln556_fu_421_p1;
wire   [4:0] or_ln559_1_fu_457_p3;
wire   [5:0] add_ln638_fu_504_p2;
wire   [5:0] add_ln639_fu_514_p2;
wire    ap_CS_fsm_state13;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 grp_picnic_keygen_fu_322_ap_start_reg = 1'b0;
end

crypto_sign_keypahbi #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
pubkey_plaintext_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pubkey_plaintext_address0),
    .ce0(pubkey_plaintext_ce0),
    .we0(pubkey_plaintext_we0),
    .d0(grp_picnic_keygen_fu_322_pk_plaintext_d0),
    .q0(pubkey_plaintext_q0),
    .address1(pubkey_plaintext_address1),
    .ce1(pubkey_plaintext_ce1),
    .we1(pubkey_plaintext_we1),
    .d1(grp_picnic_keygen_fu_322_pk_plaintext_d1),
    .q1(pubkey_plaintext_q1)
);

crypto_sign_keypahbi #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
pubkey_ciphertext_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pubkey_ciphertext_address0),
    .ce0(pubkey_ciphertext_ce0),
    .we0(pubkey_ciphertext_we0),
    .d0(grp_picnic_keygen_fu_322_pk_ciphertext_d0),
    .q0(pubkey_ciphertext_q0),
    .address1(pubkey_ciphertext_address1),
    .ce1(pubkey_ciphertext_ce1),
    .we1(pubkey_ciphertext_we1),
    .d1(grp_picnic_keygen_fu_322_pk_ciphertext_d1),
    .q1(pubkey_ciphertext_q1)
);

crypto_sign_keypahbi #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
secret_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(secret_data_address0),
    .ce0(secret_data_ce0),
    .we0(secret_data_we0),
    .d0(grp_picnic_keygen_fu_322_sk_data_d0),
    .q0(secret_data_q0),
    .address1(grp_picnic_keygen_fu_322_sk_data_address1),
    .ce1(secret_data_ce1),
    .we1(secret_data_we1),
    .d1(grp_picnic_keygen_fu_322_sk_data_d1),
    .q1(secret_data_q1)
);

crypto_sign_keypakbM #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
secret_pk_plaintext_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(secret_pk_plaintext_address0),
    .ce0(secret_pk_plaintext_ce0),
    .we0(secret_pk_plaintext_we0),
    .d0(grp_picnic_keygen_fu_322_sk_pk_plaintext_d0),
    .q0(secret_pk_plaintext_q0),
    .address1(grp_picnic_keygen_fu_322_sk_pk_plaintext_address1),
    .ce1(secret_pk_plaintext_ce1),
    .we1(secret_pk_plaintext_we1),
    .d1(grp_picnic_keygen_fu_322_sk_pk_plaintext_d1)
);

crypto_sign_keypakbM #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
secret_pk_ciphertext_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(secret_pk_ciphertext_address0),
    .ce0(secret_pk_ciphertext_ce0),
    .we0(secret_pk_ciphertext_we0),
    .d0(grp_picnic_keygen_fu_322_sk_pk_ciphertext_d0),
    .q0(secret_pk_ciphertext_q0),
    .address1(grp_picnic_keygen_fu_322_sk_pk_ciphertext_address1),
    .ce1(secret_pk_ciphertext_ce1),
    .we1(secret_pk_ciphertext_we1),
    .d1(grp_picnic_keygen_fu_322_sk_pk_ciphertext_d1)
);

picnic_keygen grp_picnic_keygen_fu_322(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_picnic_keygen_fu_322_ap_start),
    .ap_done(grp_picnic_keygen_fu_322_ap_done),
    .ap_idle(grp_picnic_keygen_fu_322_ap_idle),
    .ap_ready(grp_picnic_keygen_fu_322_ap_ready),
    .parameters(params),
    .pk_plaintext_address0(grp_picnic_keygen_fu_322_pk_plaintext_address0),
    .pk_plaintext_ce0(grp_picnic_keygen_fu_322_pk_plaintext_ce0),
    .pk_plaintext_we0(grp_picnic_keygen_fu_322_pk_plaintext_we0),
    .pk_plaintext_d0(grp_picnic_keygen_fu_322_pk_plaintext_d0),
    .pk_plaintext_q0(pubkey_plaintext_q0),
    .pk_plaintext_address1(grp_picnic_keygen_fu_322_pk_plaintext_address1),
    .pk_plaintext_ce1(grp_picnic_keygen_fu_322_pk_plaintext_ce1),
    .pk_plaintext_we1(grp_picnic_keygen_fu_322_pk_plaintext_we1),
    .pk_plaintext_d1(grp_picnic_keygen_fu_322_pk_plaintext_d1),
    .pk_plaintext_q1(pubkey_plaintext_q1),
    .pk_ciphertext_address0(grp_picnic_keygen_fu_322_pk_ciphertext_address0),
    .pk_ciphertext_ce0(grp_picnic_keygen_fu_322_pk_ciphertext_ce0),
    .pk_ciphertext_we0(grp_picnic_keygen_fu_322_pk_ciphertext_we0),
    .pk_ciphertext_d0(grp_picnic_keygen_fu_322_pk_ciphertext_d0),
    .pk_ciphertext_q0(pubkey_ciphertext_q0),
    .pk_ciphertext_address1(grp_picnic_keygen_fu_322_pk_ciphertext_address1),
    .pk_ciphertext_ce1(grp_picnic_keygen_fu_322_pk_ciphertext_ce1),
    .pk_ciphertext_we1(grp_picnic_keygen_fu_322_pk_ciphertext_we1),
    .pk_ciphertext_d1(grp_picnic_keygen_fu_322_pk_ciphertext_d1),
    .pk_ciphertext_q1(pubkey_ciphertext_q1),
    .sk_data_address0(grp_picnic_keygen_fu_322_sk_data_address0),
    .sk_data_ce0(grp_picnic_keygen_fu_322_sk_data_ce0),
    .sk_data_we0(grp_picnic_keygen_fu_322_sk_data_we0),
    .sk_data_d0(grp_picnic_keygen_fu_322_sk_data_d0),
    .sk_data_q0(secret_data_q0),
    .sk_data_address1(grp_picnic_keygen_fu_322_sk_data_address1),
    .sk_data_ce1(grp_picnic_keygen_fu_322_sk_data_ce1),
    .sk_data_we1(grp_picnic_keygen_fu_322_sk_data_we1),
    .sk_data_d1(grp_picnic_keygen_fu_322_sk_data_d1),
    .sk_data_q1(secret_data_q1),
    .sk_pk_plaintext_address0(grp_picnic_keygen_fu_322_sk_pk_plaintext_address0),
    .sk_pk_plaintext_ce0(grp_picnic_keygen_fu_322_sk_pk_plaintext_ce0),
    .sk_pk_plaintext_we0(grp_picnic_keygen_fu_322_sk_pk_plaintext_we0),
    .sk_pk_plaintext_d0(grp_picnic_keygen_fu_322_sk_pk_plaintext_d0),
    .sk_pk_plaintext_address1(grp_picnic_keygen_fu_322_sk_pk_plaintext_address1),
    .sk_pk_plaintext_ce1(grp_picnic_keygen_fu_322_sk_pk_plaintext_ce1),
    .sk_pk_plaintext_we1(grp_picnic_keygen_fu_322_sk_pk_plaintext_we1),
    .sk_pk_plaintext_d1(grp_picnic_keygen_fu_322_sk_pk_plaintext_d1),
    .sk_pk_ciphertext_address0(grp_picnic_keygen_fu_322_sk_pk_ciphertext_address0),
    .sk_pk_ciphertext_ce0(grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce0),
    .sk_pk_ciphertext_we0(grp_picnic_keygen_fu_322_sk_pk_ciphertext_we0),
    .sk_pk_ciphertext_d0(grp_picnic_keygen_fu_322_sk_pk_ciphertext_d0),
    .sk_pk_ciphertext_address1(grp_picnic_keygen_fu_322_sk_pk_ciphertext_address1),
    .sk_pk_ciphertext_ce1(grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce1),
    .sk_pk_ciphertext_we1(grp_picnic_keygen_fu_322_sk_pk_ciphertext_we1),
    .sk_pk_ciphertext_d1(grp_picnic_keygen_fu_322_sk_pk_ciphertext_d1),
    .DRBG_ctx_V_address0(grp_picnic_keygen_fu_322_DRBG_ctx_V_address0),
    .DRBG_ctx_V_ce0(grp_picnic_keygen_fu_322_DRBG_ctx_V_ce0),
    .DRBG_ctx_V_we0(grp_picnic_keygen_fu_322_DRBG_ctx_V_we0),
    .DRBG_ctx_V_d0(grp_picnic_keygen_fu_322_DRBG_ctx_V_d0),
    .DRBG_ctx_V_q0(DRBG_ctx_V_q0),
    .DRBG_ctx_V_address1(grp_picnic_keygen_fu_322_DRBG_ctx_V_address1),
    .DRBG_ctx_V_ce1(grp_picnic_keygen_fu_322_DRBG_ctx_V_ce1),
    .DRBG_ctx_V_we1(grp_picnic_keygen_fu_322_DRBG_ctx_V_we1),
    .DRBG_ctx_V_d1(grp_picnic_keygen_fu_322_DRBG_ctx_V_d1),
    .DRBG_ctx_V_q1(DRBG_ctx_V_q1),
    .DRBG_ctx_Key_address0(grp_picnic_keygen_fu_322_DRBG_ctx_Key_address0),
    .DRBG_ctx_Key_ce0(grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce0),
    .DRBG_ctx_Key_we0(grp_picnic_keygen_fu_322_DRBG_ctx_Key_we0),
    .DRBG_ctx_Key_d0(grp_picnic_keygen_fu_322_DRBG_ctx_Key_d0),
    .DRBG_ctx_Key_q0(DRBG_ctx_Key_q0),
    .DRBG_ctx_Key_address1(grp_picnic_keygen_fu_322_DRBG_ctx_Key_address1),
    .DRBG_ctx_Key_ce1(grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce1),
    .DRBG_ctx_Key_we1(grp_picnic_keygen_fu_322_DRBG_ctx_Key_we1),
    .DRBG_ctx_Key_d1(grp_picnic_keygen_fu_322_DRBG_ctx_Key_d1),
    .DRBG_ctx_Key_q1(DRBG_ctx_Key_q1),
    .DRBG_ctx_reseed_counter_i(DRBG_ctx_reseed_counter_i),
    .DRBG_ctx_reseed_counter_o(grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o),
    .DRBG_ctx_reseed_counter_o_ap_vld(grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o_ap_vld),
    .ap_return_0(grp_picnic_keygen_fu_322_ap_return_0),
    .ap_return_1(grp_picnic_keygen_fu_322_ap_return_1),
    .ap_return_2(grp_picnic_keygen_fu_322_ap_return_2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_368_p2 == 1'd1) & (grp_picnic_keygen_fu_322_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_368_p2 == 1'd1) & (grp_picnic_keygen_fu_322_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_picnic_keygen_fu_322_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_picnic_keygen_fu_322_ap_start_reg <= 1'b1;
        end else if ((grp_picnic_keygen_fu_322_ap_ready == 1'b1)) begin
            grp_picnic_keygen_fu_322_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        UnifiedRetVal_reg_311 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_368_p2 == 1'd0) & (grp_picnic_keygen_fu_322_ap_done == 1'b1))) begin
        UnifiedRetVal_reg_311 <= grp_picnic_keygen_fu_322_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln549_reg_543 == 1'd0))) begin
        loop_0_0_i_reg_278 <= add_ln553_reg_562;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_368_p2 == 1'd1) & (grp_picnic_keygen_fu_322_ap_done == 1'b1))) begin
        loop_0_0_i_reg_278 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln632_reg_597 == 1'd0))) begin
        loop_0_i_reg_300 <= loop_reg_601;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        loop_0_i_reg_300 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        loop_1_0_i_reg_289 <= 5'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln556_fu_415_p2 == 1'd0))) begin
        loop_1_0_i_reg_289 <= add_ln559_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln549_fu_379_p2 == 1'd0))) begin
        add_ln553_reg_562 <= add_ln553_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln556_fu_415_p2 == 1'd0))) begin
        add_ln559_1_reg_592 <= add_ln559_1_fu_451_p2;
        or_ln559_reg_577[3 : 1] <= or_ln559_fu_434_p2[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln549_reg_543 <= icmp_ln549_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln556_reg_568 <= icmp_ln556_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln632_reg_597 <= icmp_ln632_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        loop_reg_601 <= loop_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_picnic_keygen_fu_322_ap_done == 1'b1))) begin
        secret_params_reg_534 <= grp_picnic_keygen_fu_322_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln632_reg_597 == 1'd0))) begin
        secret_pk_plaintext_1_reg_628 <= secret_pk_plaintext_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln632_fu_477_p2 == 1'd0))) begin
        sext_ln632_i_cast_reg_607[4 : 0] <= sext_ln632_i_cast_fu_496_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln549_fu_379_p2 == 1'd0))) begin
        zext_ln553_1_reg_552[3 : 1] <= zext_ln553_1_fu_400_p1[3 : 1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o_ap_vld == 1'b1))) begin
        DRBG_ctx_reseed_counter_o = grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o;
    end else begin
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i;
    end
end

always @ (*) begin
    if ((icmp_ln549_fu_379_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln556_fu_415_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln632_fu_477_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln549_reg_543 == 1'd0))) begin
        ap_phi_mux_loop_0_0_i_phi_fu_282_p4 = add_ln553_reg_562;
    end else begin
        ap_phi_mux_loop_0_0_i_phi_fu_282_p4 = loop_0_0_i_reg_278;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln632_reg_597 == 1'd0))) begin
        ap_phi_mux_loop_0_i_phi_fu_304_p4 = loop_reg_601;
    end else begin
        ap_phi_mux_loop_0_i_phi_fu_304_p4 = loop_0_i_reg_300;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pk_address0 = zext_ln559_3_fu_469_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pk_address0 = zext_ln553_1_reg_552;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pk_address0 = 64'd0;
    end else begin
        pk_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pk_address1 = zext_ln559_1_fu_464_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pk_address1 = zext_ln553_2_fu_411_p1;
    end else begin
        pk_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (grp_picnic_keygen_fu_322_ap_done == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        pk_ce0 = 1'b1;
    end else begin
        pk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        pk_ce1 = 1'b1;
    end else begin
        pk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pk_d0 = pubkey_plaintext_q1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pk_d0 = pubkey_ciphertext_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pk_d0 = zext_ln545_fu_374_p1;
    end else begin
        pk_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pk_d1 = pubkey_plaintext_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pk_d1 = pubkey_ciphertext_q1;
    end else begin
        pk_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_368_p2 == 1'd1) & (grp_picnic_keygen_fu_322_ap_done == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln556_reg_568 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln549_reg_543 == 1'd0)))) begin
        pk_we0 = 1'b1;
    end else begin
        pk_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln556_reg_568 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln549_reg_543 == 1'd0)))) begin
        pk_we1 = 1'b1;
    end else begin
        pk_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pubkey_ciphertext_address0 = zext_ln553_fu_389_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_ciphertext_address0 = grp_picnic_keygen_fu_322_pk_ciphertext_address0;
    end else begin
        pubkey_ciphertext_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pubkey_ciphertext_address1 = zext_ln553_1_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_ciphertext_address1 = grp_picnic_keygen_fu_322_pk_ciphertext_address1;
    end else begin
        pubkey_ciphertext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pubkey_ciphertext_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_ciphertext_ce0 = grp_picnic_keygen_fu_322_pk_ciphertext_ce0;
    end else begin
        pubkey_ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pubkey_ciphertext_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_ciphertext_ce1 = grp_picnic_keygen_fu_322_pk_ciphertext_ce1;
    end else begin
        pubkey_ciphertext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_ciphertext_we0 = grp_picnic_keygen_fu_322_pk_ciphertext_we0;
    end else begin
        pubkey_ciphertext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_ciphertext_we1 = grp_picnic_keygen_fu_322_pk_ciphertext_we1;
    end else begin
        pubkey_ciphertext_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pubkey_plaintext_address0 = zext_ln559_fu_429_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_plaintext_address0 = grp_picnic_keygen_fu_322_pk_plaintext_address0;
    end else begin
        pubkey_plaintext_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pubkey_plaintext_address1 = zext_ln559_2_fu_440_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_plaintext_address1 = grp_picnic_keygen_fu_322_pk_plaintext_address1;
    end else begin
        pubkey_plaintext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        pubkey_plaintext_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_plaintext_ce0 = grp_picnic_keygen_fu_322_pk_plaintext_ce0;
    end else begin
        pubkey_plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        pubkey_plaintext_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_plaintext_ce1 = grp_picnic_keygen_fu_322_pk_plaintext_ce1;
    end else begin
        pubkey_plaintext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_plaintext_we0 = grp_picnic_keygen_fu_322_pk_plaintext_we0;
    end else begin
        pubkey_plaintext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pubkey_plaintext_we1 = grp_picnic_keygen_fu_322_pk_plaintext_we1;
    end else begin
        pubkey_plaintext_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        secret_data_address0 = zext_ln632_fu_489_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_data_address0 = grp_picnic_keygen_fu_322_sk_data_address0;
    end else begin
        secret_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        secret_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_data_ce0 = grp_picnic_keygen_fu_322_sk_data_ce0;
    end else begin
        secret_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_data_ce1 = grp_picnic_keygen_fu_322_sk_data_ce1;
    end else begin
        secret_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_data_we0 = grp_picnic_keygen_fu_322_sk_data_we0;
    end else begin
        secret_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_data_we1 = grp_picnic_keygen_fu_322_sk_data_we1;
    end else begin
        secret_data_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        secret_pk_ciphertext_address0 = zext_ln632_fu_489_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_pk_ciphertext_address0 = grp_picnic_keygen_fu_322_sk_pk_ciphertext_address0;
    end else begin
        secret_pk_ciphertext_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        secret_pk_ciphertext_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_pk_ciphertext_ce0 = grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce0;
    end else begin
        secret_pk_ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_pk_ciphertext_ce1 = grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce1;
    end else begin
        secret_pk_ciphertext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_pk_ciphertext_we0 = grp_picnic_keygen_fu_322_sk_pk_ciphertext_we0;
    end else begin
        secret_pk_ciphertext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_pk_ciphertext_we1 = grp_picnic_keygen_fu_322_sk_pk_ciphertext_we1;
    end else begin
        secret_pk_ciphertext_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        secret_pk_plaintext_address0 = zext_ln632_fu_489_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_pk_plaintext_address0 = grp_picnic_keygen_fu_322_sk_pk_plaintext_address0;
    end else begin
        secret_pk_plaintext_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        secret_pk_plaintext_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_pk_plaintext_ce0 = grp_picnic_keygen_fu_322_sk_pk_plaintext_ce0;
    end else begin
        secret_pk_plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_pk_plaintext_ce1 = grp_picnic_keygen_fu_322_sk_pk_plaintext_ce1;
    end else begin
        secret_pk_plaintext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_pk_plaintext_we0 = grp_picnic_keygen_fu_322_sk_pk_plaintext_we0;
    end else begin
        secret_pk_plaintext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secret_pk_plaintext_we1 = grp_picnic_keygen_fu_322_sk_pk_plaintext_we1;
    end else begin
        secret_pk_plaintext_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        sk_address0 = zext_ln639_fu_519_p1;
    end else if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sk_address0 = zext_ln637_fu_500_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sk_address0 = 64'd0;
    end else begin
        sk_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        sk_ce0 = 1'b1;
    end else begin
        sk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sk_ce1 = 1'b1;
    end else begin
        sk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        sk_d0 = secret_pk_plaintext_1_reg_628;
    end else if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sk_d0 = secret_data_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sk_d0 = zext_ln627_fu_473_p1;
    end else begin
        sk_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln632_reg_597 == 1'd0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln632_reg_597 == 1'd0)))) begin
        sk_we0 = 1'b1;
    end else begin
        sk_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln632_reg_597 == 1'd0))) begin
        sk_we1 = 1'b1;
    end else begin
        sk_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_368_p2 == 1'd1) & (grp_picnic_keygen_fu_322_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln66_fu_368_p2 == 1'd0) & (grp_picnic_keygen_fu_322_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln549_fu_379_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln549_fu_379_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln556_fu_415_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln556_fu_415_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln632_fu_477_p2 == 1'd1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln632_fu_477_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DRBG_ctx_Key_address0 = grp_picnic_keygen_fu_322_DRBG_ctx_Key_address0;

assign DRBG_ctx_Key_address1 = grp_picnic_keygen_fu_322_DRBG_ctx_Key_address1;

assign DRBG_ctx_Key_ce0 = grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce0;

assign DRBG_ctx_Key_ce1 = grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce1;

assign DRBG_ctx_Key_d0 = grp_picnic_keygen_fu_322_DRBG_ctx_Key_d0;

assign DRBG_ctx_Key_d1 = grp_picnic_keygen_fu_322_DRBG_ctx_Key_d1;

assign DRBG_ctx_Key_we0 = grp_picnic_keygen_fu_322_DRBG_ctx_Key_we0;

assign DRBG_ctx_Key_we1 = grp_picnic_keygen_fu_322_DRBG_ctx_Key_we1;

assign DRBG_ctx_V_address0 = grp_picnic_keygen_fu_322_DRBG_ctx_V_address0;

assign DRBG_ctx_V_address1 = grp_picnic_keygen_fu_322_DRBG_ctx_V_address1;

assign DRBG_ctx_V_ce0 = grp_picnic_keygen_fu_322_DRBG_ctx_V_ce0;

assign DRBG_ctx_V_ce1 = grp_picnic_keygen_fu_322_DRBG_ctx_V_ce1;

assign DRBG_ctx_V_d0 = grp_picnic_keygen_fu_322_DRBG_ctx_V_d0;

assign DRBG_ctx_V_d1 = grp_picnic_keygen_fu_322_DRBG_ctx_V_d1;

assign DRBG_ctx_V_we0 = grp_picnic_keygen_fu_322_DRBG_ctx_V_we0;

assign DRBG_ctx_V_we1 = grp_picnic_keygen_fu_322_DRBG_ctx_V_we1;

assign DRBG_ctx_reseed_counter_o_ap_vld = grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o_ap_vld;

assign add_ln553_fu_405_p2 = (5'd2 + ap_phi_mux_loop_0_0_i_phi_fu_282_p4);

assign add_ln559_1_fu_451_p2 = (6'd18 + zext_ln556_fu_421_p1);

assign add_ln559_fu_445_p2 = (5'd2 + loop_1_0_i_reg_289);

assign add_ln638_fu_504_p2 = (sext_ln632_i_cast_reg_607 + 6'd17);

assign add_ln639_fu_514_p2 = ($signed(sext_ln632_i_cast_reg_607) + $signed(6'd33));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_return = UnifiedRetVal_reg_311;

assign grp_picnic_keygen_fu_322_ap_start = grp_picnic_keygen_fu_322_ap_start_reg;

assign icmp_ln549_fu_379_p2 = ((ap_phi_mux_loop_0_0_i_phi_fu_282_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln556_fu_415_p2 = ((loop_1_0_i_reg_289 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln632_fu_477_p2 = ((ap_phi_mux_loop_0_i_phi_fu_304_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_368_p2 = ((grp_picnic_keygen_fu_322_ap_return_0 == 32'd0) ? 1'b1 : 1'b0);

assign loop_fu_483_p2 = (ap_phi_mux_loop_0_i_phi_fu_304_p4 + 5'd1);

assign or_ln553_fu_394_p2 = (trunc_ln549_fu_385_p1 | 4'd1);

assign or_ln559_1_fu_457_p3 = {{1'd1}, {or_ln559_reg_577}};

assign or_ln559_fu_434_p2 = (trunc_ln556_fu_425_p1 | 4'd1);

assign sext_ln632_i_cast_fu_496_p1 = ap_phi_mux_loop_0_i_phi_fu_304_p4;

assign sk_address1 = zext_ln638_fu_509_p1;

assign sk_d1 = secret_pk_ciphertext_q0;

assign trunc_ln549_fu_385_p1 = ap_phi_mux_loop_0_0_i_phi_fu_282_p4[3:0];

assign trunc_ln556_fu_425_p1 = loop_1_0_i_reg_289[3:0];

assign zext_ln545_fu_374_p1 = grp_picnic_keygen_fu_322_ap_return_1;

assign zext_ln553_1_fu_400_p1 = or_ln553_fu_394_p2;

assign zext_ln553_2_fu_411_p1 = add_ln553_reg_562;

assign zext_ln553_fu_389_p1 = ap_phi_mux_loop_0_0_i_phi_fu_282_p4;

assign zext_ln556_fu_421_p1 = loop_1_0_i_reg_289;

assign zext_ln559_1_fu_464_p1 = or_ln559_1_fu_457_p3;

assign zext_ln559_2_fu_440_p1 = or_ln559_fu_434_p2;

assign zext_ln559_3_fu_469_p1 = add_ln559_1_reg_592;

assign zext_ln559_fu_429_p1 = loop_1_0_i_reg_289;

assign zext_ln627_fu_473_p1 = secret_params_reg_534;

assign zext_ln632_fu_489_p1 = ap_phi_mux_loop_0_i_phi_fu_304_p4;

assign zext_ln637_fu_500_p1 = loop_reg_601;

assign zext_ln638_fu_509_p1 = add_ln638_fu_504_p2;

assign zext_ln639_fu_519_p1 = add_ln639_fu_514_p2;

always @ (posedge ap_clk) begin
    zext_ln553_1_reg_552[0] <= 1'b1;
    zext_ln553_1_reg_552[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    or_ln559_reg_577[0] <= 1'b1;
    sext_ln632_i_cast_reg_607[5] <= 1'b0;
end

endmodule //crypto_sign_keypair
