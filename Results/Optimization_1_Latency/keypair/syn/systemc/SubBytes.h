// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _SubBytes_HH_
#define _SubBytes_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "KeyExpansion_sbox.h"

namespace ap_rtl {

struct SubBytes : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_in< sc_lv<8> > state_q0;
    sc_out< sc_lv<4> > state_address1;
    sc_out< sc_logic > state_ce1;
    sc_out< sc_logic > state_we1;
    sc_out< sc_lv<8> > state_d1;
    sc_in< sc_lv<8> > state_q1;


    // Module declarations
    SubBytes(sc_module_name name);
    SC_HAS_PROCESS(SubBytes);

    ~SubBytes();

    sc_trace_file* mVcdFile;

    KeyExpansion_sbox* sbox_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > sbox_address0;
    sc_signal< sc_logic > sbox_ce0;
    sc_signal< sc_lv<8> > sbox_q0;
    sc_signal< sc_lv<8> > sbox_address1;
    sc_signal< sc_logic > sbox_ce1;
    sc_signal< sc_lv<8> > sbox_q1;
    sc_signal< sc_lv<3> > i_fu_126_p2;
    sc_signal< sc_lv<3> > i_reg_188;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > state_addr_reg_193;
    sc_signal< sc_lv<1> > icmp_ln263_fu_120_p2;
    sc_signal< sc_lv<3> > xor_ln268_fu_137_p2;
    sc_signal< sc_lv<3> > xor_ln268_reg_198;
    sc_signal< sc_lv<4> > state_addr_1_reg_203;
    sc_signal< sc_lv<4> > state_addr_2_reg_208;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > state_addr_3_reg_213;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > i_0_reg_108;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > zext_ln268_fu_132_p1;
    sc_signal< sc_lv<64> > zext_ln268_5_fu_143_p1;
    sc_signal< sc_lv<64> > tmp_fu_148_p3;
    sc_signal< sc_lv<64> > zext_ln268_6_fu_160_p1;
    sc_signal< sc_lv<64> > zext_ln268_1_fu_165_p1;
    sc_signal< sc_lv<64> > zext_ln268_2_fu_170_p1;
    sc_signal< sc_lv<64> > zext_ln268_3_fu_175_p1;
    sc_signal< sc_lv<64> > zext_ln268_4_fu_180_p1;
    sc_signal< sc_lv<4> > sext_ln268_fu_157_p1;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<61> ap_const_lv61_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_126_p2();
    void thread_icmp_ln263_fu_120_p2();
    void thread_sbox_address0();
    void thread_sbox_address1();
    void thread_sbox_ce0();
    void thread_sbox_ce1();
    void thread_sext_ln268_fu_157_p1();
    void thread_state_address0();
    void thread_state_address1();
    void thread_state_ce0();
    void thread_state_ce1();
    void thread_state_d0();
    void thread_state_d1();
    void thread_state_we0();
    void thread_state_we1();
    void thread_tmp_fu_148_p3();
    void thread_xor_ln268_fu_137_p2();
    void thread_zext_ln268_1_fu_165_p1();
    void thread_zext_ln268_2_fu_170_p1();
    void thread_zext_ln268_3_fu_175_p1();
    void thread_zext_ln268_4_fu_180_p1();
    void thread_zext_ln268_5_fu_143_p1();
    void thread_zext_ln268_6_fu_160_p1();
    void thread_zext_ln268_fu_132_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
