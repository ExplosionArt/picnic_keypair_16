// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AddRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AddRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AddRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> AddRoundKey::ap_ST_fsm_state1 = "1";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state2 = "10";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state3 = "100";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state4 = "1000";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state5 = "10000";
const sc_lv<32> AddRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AddRoundKey::ap_const_lv32_2 = "10";
const sc_lv<32> AddRoundKey::ap_const_lv32_3 = "11";
const sc_lv<32> AddRoundKey::ap_const_lv32_1 = "1";
const sc_lv<1> AddRoundKey::ap_const_lv1_0 = "0";
const sc_lv<3> AddRoundKey::ap_const_lv3_0 = "000";
const sc_lv<32> AddRoundKey::ap_const_lv32_4 = "100";
const sc_lv<3> AddRoundKey::ap_const_lv3_4 = "100";
const sc_lv<3> AddRoundKey::ap_const_lv3_1 = "1";
const sc_lv<2> AddRoundKey::ap_const_lv2_0 = "00";
const sc_lv<5> AddRoundKey::ap_const_lv5_1 = "1";
const sc_lv<59> AddRoundKey::ap_const_lv59_0 = "00000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> AddRoundKey::ap_const_lv8_1 = "1";
const sc_lv<5> AddRoundKey::ap_const_lv5_2 = "10";
const sc_lv<5> AddRoundKey::ap_const_lv5_3 = "11";
const sc_lv<8> AddRoundKey::ap_const_lv8_2 = "10";
const sc_lv<8> AddRoundKey::ap_const_lv8_3 = "11";
const sc_lv<1> AddRoundKey::ap_const_lv1_1 = "1";
const bool AddRoundKey::ap_const_boolean_1 = true;

AddRoundKey::AddRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln253_1_fu_224_p1 );
    sensitive << ( zext_ln253_3_fu_273_p1 );

    SC_METHOD(thread_RoundKey_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln253_2_fu_235_p1 );
    sensitive << ( zext_ln253_4_fu_283_p1 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_add_ln_fu_214_p4);
    sensitive << ( trunc_ln253_1_fu_211_p1 );
    sensitive << ( trunc_ln253_fu_179_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln248_fu_167_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln248_fu_167_p2 );

    SC_METHOD(thread_grp_fu_145_p2);
    sensitive << ( state_q0 );
    sensitive << ( RoundKey_q0 );

    SC_METHOD(thread_grp_fu_151_p2);
    sensitive << ( state_q1 );
    sensitive << ( RoundKey_q1 );

    SC_METHOD(thread_i_fu_173_p2);
    sensitive << ( i_0_reg_134 );

    SC_METHOD(thread_icmp_ln248_fu_167_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_134 );

    SC_METHOD(thread_or_ln253_1_fu_268_p2);
    sensitive << ( add_ln_reg_317 );

    SC_METHOD(thread_or_ln253_2_fu_278_p2);
    sensitive << ( add_ln_reg_317 );

    SC_METHOD(thread_or_ln253_3_fu_196_p2);
    sensitive << ( tmp_s_fu_183_p3 );

    SC_METHOD(thread_or_ln253_4_fu_240_p2);
    sensitive << ( tmp_s_reg_301 );

    SC_METHOD(thread_or_ln253_5_fu_254_p2);
    sensitive << ( tmp_s_reg_301 );

    SC_METHOD(thread_or_ln253_fu_229_p2);
    sensitive << ( add_ln_fu_214_p4 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_addr_reg_307 );
    sensitive << ( state_addr_2_reg_333 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln253_fu_191_p1 );
    sensitive << ( tmp_2_fu_245_p3 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_addr_1_reg_312 );
    sensitive << ( state_addr_3_reg_338 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_1_fu_202_p3 );
    sensitive << ( tmp_3_fu_259_p3 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_d0);
    sensitive << ( reg_157 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_d1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( reg_162 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_1_fu_202_p3);
    sensitive << ( or_ln253_3_fu_196_p2 );

    SC_METHOD(thread_tmp_2_fu_245_p3);
    sensitive << ( or_ln253_4_fu_240_p2 );

    SC_METHOD(thread_tmp_3_fu_259_p3);
    sensitive << ( or_ln253_5_fu_254_p2 );

    SC_METHOD(thread_tmp_s_fu_183_p3);
    sensitive << ( i_0_reg_134 );

    SC_METHOD(thread_trunc_ln253_1_fu_211_p1);
    sensitive << ( round );

    SC_METHOD(thread_trunc_ln253_fu_179_p1);
    sensitive << ( i_0_reg_134 );

    SC_METHOD(thread_zext_ln253_1_fu_224_p1);
    sensitive << ( add_ln_fu_214_p4 );

    SC_METHOD(thread_zext_ln253_2_fu_235_p1);
    sensitive << ( or_ln253_fu_229_p2 );

    SC_METHOD(thread_zext_ln253_3_fu_273_p1);
    sensitive << ( or_ln253_1_fu_268_p2 );

    SC_METHOD(thread_zext_ln253_4_fu_283_p1);
    sensitive << ( or_ln253_2_fu_278_p2 );

    SC_METHOD(thread_zext_ln253_fu_191_p1);
    sensitive << ( tmp_s_fu_183_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln248_fu_167_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AddRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, round, "(port)round");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_address1, "(port)RoundKey_address1");
    sc_trace(mVcdFile, RoundKey_ce1, "(port)RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_q1, "(port)RoundKey_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_145_p2, "grp_fu_145_p2");
    sc_trace(mVcdFile, reg_157, "reg_157");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_151_p2, "grp_fu_151_p2");
    sc_trace(mVcdFile, reg_162, "reg_162");
    sc_trace(mVcdFile, i_fu_173_p2, "i_fu_173_p2");
    sc_trace(mVcdFile, i_reg_296, "i_reg_296");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_s_fu_183_p3, "tmp_s_fu_183_p3");
    sc_trace(mVcdFile, tmp_s_reg_301, "tmp_s_reg_301");
    sc_trace(mVcdFile, icmp_ln248_fu_167_p2, "icmp_ln248_fu_167_p2");
    sc_trace(mVcdFile, state_addr_reg_307, "state_addr_reg_307");
    sc_trace(mVcdFile, state_addr_1_reg_312, "state_addr_1_reg_312");
    sc_trace(mVcdFile, add_ln_fu_214_p4, "add_ln_fu_214_p4");
    sc_trace(mVcdFile, add_ln_reg_317, "add_ln_reg_317");
    sc_trace(mVcdFile, state_addr_2_reg_333, "state_addr_2_reg_333");
    sc_trace(mVcdFile, state_addr_3_reg_338, "state_addr_3_reg_338");
    sc_trace(mVcdFile, i_0_reg_134, "i_0_reg_134");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln253_fu_191_p1, "zext_ln253_fu_191_p1");
    sc_trace(mVcdFile, tmp_1_fu_202_p3, "tmp_1_fu_202_p3");
    sc_trace(mVcdFile, zext_ln253_1_fu_224_p1, "zext_ln253_1_fu_224_p1");
    sc_trace(mVcdFile, zext_ln253_2_fu_235_p1, "zext_ln253_2_fu_235_p1");
    sc_trace(mVcdFile, tmp_2_fu_245_p3, "tmp_2_fu_245_p3");
    sc_trace(mVcdFile, tmp_3_fu_259_p3, "tmp_3_fu_259_p3");
    sc_trace(mVcdFile, zext_ln253_3_fu_273_p1, "zext_ln253_3_fu_273_p1");
    sc_trace(mVcdFile, zext_ln253_4_fu_283_p1, "zext_ln253_4_fu_283_p1");
    sc_trace(mVcdFile, or_ln253_3_fu_196_p2, "or_ln253_3_fu_196_p2");
    sc_trace(mVcdFile, trunc_ln253_1_fu_211_p1, "trunc_ln253_1_fu_211_p1");
    sc_trace(mVcdFile, trunc_ln253_fu_179_p1, "trunc_ln253_fu_179_p1");
    sc_trace(mVcdFile, or_ln253_fu_229_p2, "or_ln253_fu_229_p2");
    sc_trace(mVcdFile, or_ln253_4_fu_240_p2, "or_ln253_4_fu_240_p2");
    sc_trace(mVcdFile, or_ln253_5_fu_254_p2, "or_ln253_5_fu_254_p2");
    sc_trace(mVcdFile, or_ln253_1_fu_268_p2, "or_ln253_1_fu_268_p2");
    sc_trace(mVcdFile, or_ln253_2_fu_278_p2, "or_ln253_2_fu_278_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AddRoundKey::~AddRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AddRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_134 = i_reg_296.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_134 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln248_fu_167_p2.read(), ap_const_lv1_0))) {
        add_ln_reg_317 = add_ln_fu_214_p4.read();
        state_addr_1_reg_312 =  (sc_lv<4>) (tmp_1_fu_202_p3.read());
        state_addr_reg_307 =  (sc_lv<4>) (zext_ln253_fu_191_p1.read());
        tmp_s_reg_301 = tmp_s_fu_183_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_296 = i_fu_173_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        reg_157 = grp_fu_145_p2.read();
        reg_162 = grp_fu_151_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_addr_2_reg_333 =  (sc_lv<4>) (tmp_2_fu_245_p3.read());
        state_addr_3_reg_338 =  (sc_lv<4>) (tmp_3_fu_259_p3.read());
    }
}

void AddRoundKey::thread_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln253_3_fu_273_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln253_1_fu_224_p1.read());
    } else {
        RoundKey_address0 = "XXXXXXXX";
    }
}

void AddRoundKey::thread_RoundKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln253_4_fu_283_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln253_2_fu_235_p1.read());
    } else {
        RoundKey_address1 = "XXXXXXXX";
    }
}

void AddRoundKey::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        RoundKey_ce0 = ap_const_logic_1;
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        RoundKey_ce1 = ap_const_logic_1;
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_add_ln_fu_214_p4() {
    add_ln_fu_214_p4 = esl_concat<6,2>(esl_concat<4,2>(trunc_ln253_1_fu_211_p1.read(), trunc_ln253_fu_179_p1.read()), ap_const_lv2_0);
}

void AddRoundKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AddRoundKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AddRoundKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AddRoundKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AddRoundKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AddRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln248_fu_167_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln248_fu_167_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AddRoundKey::thread_grp_fu_145_p2() {
    grp_fu_145_p2 = (state_q0.read() ^ RoundKey_q0.read());
}

void AddRoundKey::thread_grp_fu_151_p2() {
    grp_fu_151_p2 = (state_q1.read() ^ RoundKey_q1.read());
}

void AddRoundKey::thread_i_fu_173_p2() {
    i_fu_173_p2 = (!i_0_reg_134.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_134.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void AddRoundKey::thread_icmp_ln248_fu_167_p2() {
    icmp_ln248_fu_167_p2 = (!i_0_reg_134.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_134.read() == ap_const_lv3_4);
}

void AddRoundKey::thread_or_ln253_1_fu_268_p2() {
    or_ln253_1_fu_268_p2 = (add_ln_reg_317.read() | ap_const_lv8_2);
}

void AddRoundKey::thread_or_ln253_2_fu_278_p2() {
    or_ln253_2_fu_278_p2 = (add_ln_reg_317.read() | ap_const_lv8_3);
}

void AddRoundKey::thread_or_ln253_3_fu_196_p2() {
    or_ln253_3_fu_196_p2 = (tmp_s_fu_183_p3.read() | ap_const_lv5_1);
}

void AddRoundKey::thread_or_ln253_4_fu_240_p2() {
    or_ln253_4_fu_240_p2 = (tmp_s_reg_301.read() | ap_const_lv5_2);
}

void AddRoundKey::thread_or_ln253_5_fu_254_p2() {
    or_ln253_5_fu_254_p2 = (tmp_s_reg_301.read() | ap_const_lv5_3);
}

void AddRoundKey::thread_or_ln253_fu_229_p2() {
    or_ln253_fu_229_p2 = (add_ln_fu_214_p4.read() | ap_const_lv8_1);
}

void AddRoundKey::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address0 = state_addr_2_reg_333.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address0 = state_addr_reg_307.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 =  (sc_lv<4>) (tmp_2_fu_245_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address0 =  (sc_lv<4>) (zext_ln253_fu_191_p1.read());
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void AddRoundKey::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address1 = state_addr_3_reg_338.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address1 = state_addr_1_reg_312.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address1 =  (sc_lv<4>) (tmp_3_fu_259_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address1 =  (sc_lv<4>) (tmp_1_fu_202_p3.read());
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void AddRoundKey::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_state_d0() {
    state_d0 = reg_157.read();
}

void AddRoundKey::thread_state_d1() {
    state_d1 = reg_162.read();
}

void AddRoundKey::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_tmp_1_fu_202_p3() {
    tmp_1_fu_202_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln253_3_fu_196_p2.read());
}

void AddRoundKey::thread_tmp_2_fu_245_p3() {
    tmp_2_fu_245_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln253_4_fu_240_p2.read());
}

void AddRoundKey::thread_tmp_3_fu_259_p3() {
    tmp_3_fu_259_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln253_5_fu_254_p2.read());
}

void AddRoundKey::thread_tmp_s_fu_183_p3() {
    tmp_s_fu_183_p3 = esl_concat<3,2>(i_0_reg_134.read(), ap_const_lv2_0);
}

void AddRoundKey::thread_trunc_ln253_1_fu_211_p1() {
    trunc_ln253_1_fu_211_p1 = round.read().range(4-1, 0);
}

void AddRoundKey::thread_trunc_ln253_fu_179_p1() {
    trunc_ln253_fu_179_p1 = i_0_reg_134.read().range(2-1, 0);
}

void AddRoundKey::thread_zext_ln253_1_fu_224_p1() {
    zext_ln253_1_fu_224_p1 = esl_zext<64,8>(add_ln_fu_214_p4.read());
}

void AddRoundKey::thread_zext_ln253_2_fu_235_p1() {
    zext_ln253_2_fu_235_p1 = esl_zext<64,8>(or_ln253_fu_229_p2.read());
}

void AddRoundKey::thread_zext_ln253_3_fu_273_p1() {
    zext_ln253_3_fu_273_p1 = esl_zext<64,8>(or_ln253_1_fu_268_p2.read());
}

void AddRoundKey::thread_zext_ln253_4_fu_283_p1() {
    zext_ln253_4_fu_283_p1 = esl_zext<64,8>(or_ln253_2_fu_278_p2.read());
}

void AddRoundKey::thread_zext_ln253_fu_191_p1() {
    zext_ln253_fu_191_p1 = esl_zext<64,5>(tmp_s_fu_183_p3.read());
}

void AddRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln248_fu_167_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

