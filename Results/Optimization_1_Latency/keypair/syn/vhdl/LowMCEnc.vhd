-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LowMCEnc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce0 : OUT STD_LOGIC;
    plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    plaintext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce1 : OUT STD_LOGIC;
    plaintext_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    key_ce1 : OUT STD_LOGIC;
    key_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of LowMCEnc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv14_3E00 : STD_LOGIC_VECTOR (13 downto 0) := "11111000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_7C : STD_LOGIC_VECTOR (6 downto 0) := "1111100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal temp_matrix3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_matrix3_ce0 : STD_LOGIC;
    signal temp_matrix3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_matrix3_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_matrix3_ce1 : STD_LOGIC;
    signal temp_matrix3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_0_0_reg_360 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_36_fu_466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln174_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_reg_1020 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_1_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_1_reg_1030 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln171_fu_494_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal output_addr_6_reg_1048 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln110_1_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_7_reg_1058 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln110_1_fu_528_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln110_1_reg_1068 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_540_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_reg_1096 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln1_reg_1102 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2_reg_1107 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_addr_11_reg_1115 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln209_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln209_fu_612_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln209_reg_1121 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_addr_12_reg_1128 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_addr_13_reg_1134 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln209_fu_652_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln209_reg_1140 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_fu_673_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_reg_1145 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln55_3_fu_682_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln55_3_reg_1152 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_692_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_reg_1158 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln55_5_fu_701_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln55_5_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_711_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_reg_1170 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln223_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln223_reg_1176 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal temp_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_load_1_reg_1181 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln243_fu_868_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln243_reg_1186 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln244_fu_882_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln244_reg_1191 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_matrix_mul_fu_428_ap_ready : STD_LOGIC;
    signal grp_matrix_mul_fu_428_ap_done : STD_LOGIC;
    signal output_addr_4_reg_1200 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln110_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_5_reg_1210 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln110_fu_950_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln110_reg_1220 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_addr_8_reg_1228 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln110_2_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_9_reg_1238 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln110_2_fu_998_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln110_2_reg_1248 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_fu_1004_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal roundKey_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal roundKey_ce0 : STD_LOGIC;
    signal roundKey_we0 : STD_LOGIC;
    signal roundKey_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal roundKey_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal roundKey_ce1 : STD_LOGIC;
    signal roundKey_we1 : STD_LOGIC;
    signal roundKey_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_ce1 : STD_LOGIC;
    signal temp_we1 : STD_LOGIC;
    signal temp_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_matrix_mul_fu_428_ap_start : STD_LOGIC;
    signal grp_matrix_mul_fu_428_ap_idle : STD_LOGIC;
    signal grp_matrix_mul_fu_428_output_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matrix_mul_fu_428_output_r_ce0 : STD_LOGIC;
    signal grp_matrix_mul_fu_428_output_r_we0 : STD_LOGIC;
    signal grp_matrix_mul_fu_428_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_fu_428_output_r_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matrix_mul_fu_428_output_r_ce1 : STD_LOGIC;
    signal grp_matrix_mul_fu_428_output_r_we1 : STD_LOGIC;
    signal grp_matrix_mul_fu_428_output_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_1_fu_437_ap_start : STD_LOGIC;
    signal grp_matrix_mul_1_fu_437_ap_done : STD_LOGIC;
    signal grp_matrix_mul_1_fu_437_ap_idle : STD_LOGIC;
    signal grp_matrix_mul_1_fu_437_ap_ready : STD_LOGIC;
    signal grp_matrix_mul_1_fu_437_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_mul_1_fu_437_output_r_ce0 : STD_LOGIC;
    signal grp_matrix_mul_1_fu_437_output_r_we0 : STD_LOGIC;
    signal grp_matrix_mul_1_fu_437_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_1_fu_437_output_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_mul_1_fu_437_output_r_ce1 : STD_LOGIC;
    signal grp_matrix_mul_1_fu_437_output_r_we1 : STD_LOGIC;
    signal grp_matrix_mul_1_fu_437_output_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_1_fu_437_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matrix_mul_1_fu_437_state_ce0 : STD_LOGIC;
    signal grp_matrix_mul_1_fu_437_state_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matrix_mul_1_fu_437_state_ce1 : STD_LOGIC;
    signal grp_matrix_mul_1_fu_437_matrix_offset : STD_LOGIC_VECTOR (13 downto 0);
    signal i_0_0_i1_reg_371 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal r_0_reg_382 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitNumber_assign_2_reg_394 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_0_0_i_reg_406 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_0_0_i2_reg_417 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_matrix_mul_fu_428_ap_start_reg : STD_LOGIC := '0';
    signal grp_matrix_mul_1_fu_437_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln114_1_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_3_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_2_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_4_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_5_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_2_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_6_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_7_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_8_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal or_ln239_2_fu_856_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln114_fu_956_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln114_2_fu_963_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln194_fu_549_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln68_fu_755_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal or_ln68_1_fu_802_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal or_ln68_2_fu_849_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln171_fu_474_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln171_fu_483_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln110_fu_512_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln110_1_fu_516_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln218_fu_591_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln_fu_597_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln219_fu_616_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln55_2_fu_622_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln55_4_fu_637_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln55_fu_658_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln55_1_fu_663_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln55_fu_667_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln55_1_fu_677_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln55_1_fu_686_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln55_fu_696_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln55_3_fu_705_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln222_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_fu_731_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln222_fu_727_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln68_fu_737_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln68_fu_749_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_3_fu_743_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln223_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln223_1_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_4_fu_780_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln223_fu_776_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln68_3_fu_785_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln68_1_fu_796_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_5_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln224_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln224_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln224_1_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_6_fu_827_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln224_fu_823_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln68_4_fu_832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln68_2_fu_843_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_7_fu_838_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_874_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln114_4_fu_899_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln114_fu_903_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln110_1_fu_913_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln110_fu_917_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_928_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln114_1_fu_937_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln110_2_fu_982_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln110_2_fu_986_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln188_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component matrix_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matrix_offset : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component matrix_mul_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        matrix_offset : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component LowMCEnc_temp_matg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LowMCEnc_roundKey IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LowMCEnc_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    temp_matrix3_U : component LowMCEnc_temp_matg8j
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_matrix3_address0,
        ce0 => temp_matrix3_ce0,
        q0 => temp_matrix3_q0,
        address1 => temp_matrix3_address1,
        ce1 => temp_matrix3_ce1,
        q1 => temp_matrix3_q1);

    roundKey_U : component LowMCEnc_roundKey
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => roundKey_address0,
        ce0 => roundKey_ce0,
        we0 => roundKey_we0,
        d0 => grp_matrix_mul_1_fu_437_output_r_d0,
        q0 => roundKey_q0,
        address1 => roundKey_address1,
        ce1 => roundKey_ce1,
        we1 => roundKey_we1,
        d1 => grp_matrix_mul_1_fu_437_output_r_d1,
        q1 => roundKey_q1);

    temp_U : component LowMCEnc_temp
    generic map (
        DataWidth => 8,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0,
        address1 => temp_address1,
        ce1 => temp_ce1,
        we1 => temp_we1,
        d1 => temp_d1,
        q1 => temp_q1);

    grp_matrix_mul_fu_428 : component matrix_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mul_fu_428_ap_start,
        ap_done => grp_matrix_mul_fu_428_ap_done,
        ap_idle => grp_matrix_mul_fu_428_ap_idle,
        ap_ready => grp_matrix_mul_fu_428_ap_ready,
        output_r_address0 => grp_matrix_mul_fu_428_output_r_address0,
        output_r_ce0 => grp_matrix_mul_fu_428_output_r_ce0,
        output_r_we0 => grp_matrix_mul_fu_428_output_r_we0,
        output_r_d0 => grp_matrix_mul_fu_428_output_r_d0,
        output_r_q0 => output_r_q0,
        output_r_address1 => grp_matrix_mul_fu_428_output_r_address1,
        output_r_ce1 => grp_matrix_mul_fu_428_output_r_ce1,
        output_r_we1 => grp_matrix_mul_fu_428_output_r_we1,
        output_r_d1 => grp_matrix_mul_fu_428_output_r_d1,
        output_r_q1 => output_r_q1,
        matrix_offset => add_ln243_reg_1186);

    grp_matrix_mul_1_fu_437 : component matrix_mul_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mul_1_fu_437_ap_start,
        ap_done => grp_matrix_mul_1_fu_437_ap_done,
        ap_idle => grp_matrix_mul_1_fu_437_ap_idle,
        ap_ready => grp_matrix_mul_1_fu_437_ap_ready,
        output_r_address0 => grp_matrix_mul_1_fu_437_output_r_address0,
        output_r_ce0 => grp_matrix_mul_1_fu_437_output_r_ce0,
        output_r_we0 => grp_matrix_mul_1_fu_437_output_r_we0,
        output_r_d0 => grp_matrix_mul_1_fu_437_output_r_d0,
        output_r_address1 => grp_matrix_mul_1_fu_437_output_r_address1,
        output_r_ce1 => grp_matrix_mul_1_fu_437_output_r_ce1,
        output_r_we1 => grp_matrix_mul_1_fu_437_output_r_we1,
        output_r_d1 => grp_matrix_mul_1_fu_437_output_r_d1,
        state_address0 => grp_matrix_mul_1_fu_437_state_address0,
        state_ce0 => grp_matrix_mul_1_fu_437_state_ce0,
        state_q0 => key_q0,
        state_address1 => grp_matrix_mul_1_fu_437_state_address1,
        state_ce1 => grp_matrix_mul_1_fu_437_state_ce1,
        state_q1 => key_q1,
        matrix_offset => grp_matrix_mul_1_fu_437_matrix_offset);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_mul_1_fu_437_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mul_1_fu_437_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_matrix_mul_1_fu_437_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mul_1_fu_437_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mul_1_fu_437_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_mul_fu_428_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mul_fu_428_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_matrix_mul_fu_428_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mul_fu_428_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mul_fu_428_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bitNumber_assign_2_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                bitNumber_assign_2_reg_394 <= add_ln209_reg_1140;
            elsif (((grp_matrix_mul_1_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                bitNumber_assign_2_reg_394 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_0_i1_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_0_i1_reg_371 <= add_ln110_1_reg_1068;
            elsif (((grp_matrix_mul_1_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_0_i1_reg_371 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_0_i2_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln110_fu_888_p2 = ap_const_lv1_1))) then 
                i_0_0_i2_reg_417 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_0_0_i2_reg_417 <= add_ln110_2_reg_1248;
            end if; 
        end if;
    end process;

    i_0_0_i_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_0_0_i_reg_406 <= add_ln110_reg_1220;
            elsif (((grp_matrix_mul_fu_428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_0_0_i_reg_406 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    loop_0_0_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_36_fu_466_p3 = ap_const_lv1_0))) then 
                loop_0_0_reg_360 <= add_ln171_fu_494_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loop_0_0_reg_360 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_0_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln110_2_fu_970_p2 = ap_const_lv1_1))) then 
                r_0_reg_382 <= r_fu_1004_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln110_1_fu_500_p2 = ap_const_lv1_1))) then 
                r_0_reg_382 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                a_reg_1145 <= a_fu_673_p1;
                b_reg_1158 <= b_fu_692_p1;
                c_reg_1170 <= c_fu_711_p1;
                    zext_ln55_3_reg_1152(2 downto 0) <= zext_ln55_3_fu_682_p1(2 downto 0);
                    zext_ln55_5_reg_1164(2 downto 0) <= zext_ln55_5_fu_701_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln110_1_fu_500_p2 = ap_const_lv1_0))) then
                add_ln110_1_reg_1068 <= add_ln110_1_fu_528_p2;
                output_addr_6_reg_1048 <= zext_ln114_1_fu_506_p1(3 - 1 downto 0);
                    output_addr_7_reg_1058(1) <= zext_ln114_3_fu_522_p1(3 - 1 downto 0)(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln110_2_fu_970_p2 = ap_const_lv1_0))) then
                add_ln110_2_reg_1248 <= add_ln110_2_fu_998_p2;
                output_addr_8_reg_1228 <= zext_ln114_7_fu_976_p1(3 - 1 downto 0);
                    output_addr_9_reg_1238(1) <= zext_ln114_8_fu_992_p1(3 - 1 downto 0)(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln110_fu_888_p2 = ap_const_lv1_0))) then
                add_ln110_reg_1220 <= add_ln110_fu_950_p2;
                output_addr_4_reg_1200 <= zext_ln114_fu_894_p1(3 - 1 downto 0);
                    output_addr_5_reg_1210(1) <= zext_ln114_2_fu_923_p1(3 - 1 downto 0)(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln209_reg_1140 <= add_ln209_fu_652_p2;
                    temp_addr_12_reg_1128(1 downto 0) <= zext_ln55_2_fu_632_p1(7 - 1 downto 0)(1 downto 0);
                    temp_addr_13_reg_1134(1 downto 0) <= zext_ln55_4_fu_647_p1(7 - 1 downto 0)(1 downto 0);
                trunc_ln209_reg_1121 <= trunc_ln209_fu_612_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    add_ln243_reg_1186(13 downto 9) <= add_ln243_fu_868_p2(13 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_matrix_mul_fu_428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    add_ln244_reg_1191(6 downto 2) <= add_ln244_fu_882_p2(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_462 <= temp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    shl_ln_reg_1096(13 downto 9) <= shl_ln_fu_540_p3(13 downto 9);
                trunc_ln1_reg_1102 <= output_r_q0(23 downto 16);
                trunc_ln2_reg_1107 <= output_r_q0(31 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln209_fu_585_p2 = ap_const_lv1_1))) then
                    temp_addr_11_reg_1115(1 downto 0) <= zext_ln55_fu_607_p1(7 - 1 downto 0)(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                temp_load_1_reg_1181 <= temp_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_36_reg_1016 <= loop_0_0_reg_360(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                xor_ln223_reg_1176 <= xor_ln223_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_36_fu_466_p3 = ap_const_lv1_0))) then
                    zext_ln174_1_reg_1030(1) <= zext_ln174_1_fu_489_p1(1);
                    zext_ln174_reg_1020(2 downto 0) <= zext_ln174_fu_478_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln174_reg_1020(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln174_1_reg_1030(0) <= '1';
    zext_ln174_1_reg_1030(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    output_addr_7_reg_1058(0) <= '1';
    output_addr_7_reg_1058(2) <= '0';
    shl_ln_reg_1096(8 downto 0) <= "000000000";
    temp_addr_11_reg_1115(6 downto 2) <= "00000";
    temp_addr_12_reg_1128(6 downto 2) <= "00000";
    temp_addr_13_reg_1134(6 downto 2) <= "00000";
    zext_ln55_3_reg_1152(7 downto 3) <= "00000";
    zext_ln55_5_reg_1164(7 downto 3) <= "00000";
    add_ln243_reg_1186(8 downto 0) <= "000000000";
    add_ln244_reg_1191(1 downto 0) <= "00";
    output_addr_5_reg_1210(0) <= '1';
    output_addr_5_reg_1210(2) <= '0';
    output_addr_9_reg_1238(0) <= '1';
    output_addr_9_reg_1238(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_36_fu_466_p3, ap_enable_reg_pp0_iter0, ap_CS_fsm_state6, icmp_ln110_1_fu_500_p2, ap_CS_fsm_state11, icmp_ln209_fu_585_p2, ap_CS_fsm_state21, grp_matrix_mul_fu_428_ap_done, ap_CS_fsm_state22, icmp_ln110_fu_888_p2, ap_CS_fsm_state24, icmp_ln110_2_fu_970_p2, ap_block_pp0_stage0_subdone, grp_matrix_mul_1_fu_437_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state8, icmp_ln188_fu_534_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_36_fu_466_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_36_fu_466_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_matrix_mul_1_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln110_1_fu_500_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln188_fu_534_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_matrix_mul_1_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln209_fu_585_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_matrix_mul_fu_428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln110_fu_888_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln110_2_fu_970_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_fu_673_p1 <= lshr_ln55_fu_667_p2(1 - 1 downto 0);
    add_ln110_1_fu_528_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(i_0_0_i1_reg_371));
    add_ln110_2_fu_998_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(i_0_0_i2_reg_417));
    add_ln110_fu_950_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(i_0_0_i_reg_406));
    add_ln114_1_fu_937_p3 <= (tmp_3_fu_928_p4 & or_ln110_fu_917_p2);
    add_ln114_fu_903_p2 <= std_logic_vector(unsigned(add_ln244_reg_1191) + unsigned(zext_ln114_4_fu_899_p1));
    add_ln171_fu_494_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(loop_0_0_reg_360));
    add_ln209_fu_652_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(bitNumber_assign_2_reg_394));
    add_ln218_fu_591_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(bitNumber_assign_2_reg_394));
    add_ln219_fu_616_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(bitNumber_assign_2_reg_394));
    add_ln243_fu_868_p2 <= std_logic_vector(unsigned(shl_ln_reg_1096) + unsigned(ap_const_lv14_3E00));
    add_ln244_fu_882_p2 <= std_logic_vector(unsigned(shl_ln1_fu_874_p3) + unsigned(ap_const_lv7_7C));
    and_ln222_fu_715_p2 <= (c_fu_711_p1 and b_fu_692_p1);
    and_ln223_fu_762_p2 <= (c_reg_1170 and a_reg_1145);
    and_ln224_fu_809_p2 <= (b_reg_1158 and a_reg_1145);
    and_ln68_1_fu_796_p2 <= (xor_ln68_3_fu_785_p2 and temp_q0);
    and_ln68_2_fu_843_p2 <= (xor_ln68_4_fu_832_p2 and temp_q0);
    and_ln68_fu_749_p2 <= (xor_ln68_fu_737_p2 and reg_462);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_36_fu_466_p3)
    begin
        if ((tmp_36_fu_466_p3 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, icmp_ln188_fu_534_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln188_fu_534_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln188_fu_534_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln188_fu_534_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_692_p1 <= lshr_ln55_1_fu_686_p2(1 - 1 downto 0);
    c_fu_711_p1 <= lshr_ln55_3_fu_705_p2(1 - 1 downto 0);
    grp_fu_448_p2 <= (roundKey_q0 xor output_r_q0);
    grp_fu_455_p2 <= (roundKey_q1 xor output_r_q1);
    grp_matrix_mul_1_fu_437_ap_start <= grp_matrix_mul_1_fu_437_ap_start_reg;

    grp_matrix_mul_1_fu_437_matrix_offset_assign_proc : process(shl_ln_reg_1096, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_matrix_mul_1_fu_437_matrix_offset <= shl_ln_reg_1096;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_matrix_mul_1_fu_437_matrix_offset <= ap_const_lv14_0;
        else 
            grp_matrix_mul_1_fu_437_matrix_offset <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_matrix_mul_fu_428_ap_start <= grp_matrix_mul_fu_428_ap_start_reg;
    icmp_ln110_1_fu_500_p2 <= "1" when (i_0_0_i1_reg_371 = ap_const_lv3_4) else "0";
    icmp_ln110_2_fu_970_p2 <= "1" when (i_0_0_i2_reg_417 = ap_const_lv3_4) else "0";
    icmp_ln110_fu_888_p2 <= "1" when (i_0_0_i_reg_406 = ap_const_lv3_4) else "0";
    icmp_ln188_fu_534_p2 <= "1" when (r_0_reg_382 = ap_const_lv5_15) else "0";
    icmp_ln209_fu_585_p2 <= "1" when (unsigned(bitNumber_assign_2_reg_394) < unsigned(ap_const_lv5_1E)) else "0";
    key_address0 <= grp_matrix_mul_1_fu_437_state_address0;
    key_address1 <= grp_matrix_mul_1_fu_437_state_address1;

    key_ce0_assign_proc : process(grp_matrix_mul_1_fu_437_state_ce0, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            key_ce0 <= grp_matrix_mul_1_fu_437_state_ce0;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_ce1_assign_proc : process(grp_matrix_mul_1_fu_437_state_ce1, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            key_ce1 <= grp_matrix_mul_1_fu_437_state_ce1;
        else 
            key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln55_1_fu_686_p2 <= std_logic_vector(shift_right(unsigned(temp_q1),to_integer(unsigned('0' & zext_ln55_3_fu_682_p1(8-1 downto 0)))));
    lshr_ln55_2_fu_622_p4 <= add_ln219_fu_616_p2(4 downto 3);
    lshr_ln55_3_fu_705_p2 <= std_logic_vector(shift_right(unsigned(temp_q0),to_integer(unsigned('0' & zext_ln55_5_fu_701_p1(8-1 downto 0)))));
    lshr_ln55_4_fu_637_p4 <= bitNumber_assign_2_reg_394(4 downto 3);
    lshr_ln55_fu_667_p2 <= std_logic_vector(shift_right(unsigned(reg_462),to_integer(unsigned('0' & zext_ln55_1_fu_663_p1(8-1 downto 0)))));
    lshr_ln_fu_597_p4 <= add_ln218_fu_591_p2(4 downto 3);
    or_ln110_1_fu_516_p2 <= (trunc_ln110_fu_512_p1 or ap_const_lv2_1);
    or_ln110_2_fu_986_p2 <= (trunc_ln110_2_fu_982_p1 or ap_const_lv2_1);
    or_ln110_fu_917_p2 <= (trunc_ln110_1_fu_913_p1 or ap_const_lv2_1);
    or_ln171_fu_483_p2 <= (trunc_ln171_fu_474_p1 or ap_const_lv2_1);
    or_ln239_2_fu_856_p5 <= (((temp_q1 & temp_q0) & temp_load_1_reg_1181) & reg_462);
    or_ln68_1_fu_802_p2 <= (shl_ln68_5_fu_791_p2 or and_ln68_1_fu_796_p2);
    or_ln68_2_fu_849_p2 <= (shl_ln68_7_fu_838_p2 or and_ln68_2_fu_843_p2);
    or_ln68_fu_755_p2 <= (shl_ln68_3_fu_743_p2 or and_ln68_fu_749_p2);

    output_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln174_reg_1020, output_addr_6_reg_1048, ap_CS_fsm_state6, ap_CS_fsm_state21, output_addr_4_reg_1200, ap_CS_fsm_state22, output_addr_8_reg_1228, ap_CS_fsm_state24, ap_enable_reg_pp0_iter1, grp_matrix_mul_fu_428_output_r_address0, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_block_pp0_stage0, zext_ln114_1_fu_506_p1, zext_ln114_fu_894_p1, zext_ln114_7_fu_976_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_address0 <= output_addr_8_reg_1228;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_address0 <= zext_ln114_7_fu_976_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_address0 <= output_addr_4_reg_1200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_r_address0 <= zext_ln114_fu_894_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= output_addr_6_reg_1048;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= zext_ln114_1_fu_506_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_address0 <= zext_ln174_reg_1020(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_address0 <= grp_matrix_mul_fu_428_output_r_address0;
        else 
            output_r_address0 <= "XXX";
        end if; 
    end process;


    output_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln174_1_reg_1030, ap_CS_fsm_state6, output_addr_7_reg_1058, ap_CS_fsm_state21, ap_CS_fsm_state22, output_addr_5_reg_1210, ap_CS_fsm_state24, output_addr_9_reg_1238, ap_enable_reg_pp0_iter1, grp_matrix_mul_fu_428_output_r_address1, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_block_pp0_stage0, zext_ln114_3_fu_522_p1, zext_ln114_2_fu_923_p1, zext_ln114_8_fu_992_p1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_address1 <= output_addr_9_reg_1238;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_address1 <= zext_ln114_8_fu_992_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_address1 <= output_addr_5_reg_1210;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_r_address1 <= zext_ln114_2_fu_923_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address1 <= output_addr_7_reg_1058;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address1 <= zext_ln114_3_fu_522_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_address1 <= zext_ln174_1_reg_1030(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_address1 <= grp_matrix_mul_fu_428_output_r_address1;
        else 
            output_r_address1 <= "XXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state6, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_enable_reg_pp0_iter1, grp_matrix_mul_fu_428_output_r_ce0, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_ce0 <= grp_matrix_mul_fu_428_output_r_ce0;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state6, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_enable_reg_pp0_iter1, grp_matrix_mul_fu_428_output_r_ce1, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_r_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_ce1 <= grp_matrix_mul_fu_428_output_r_ce1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(plaintext_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state21, ap_enable_reg_pp0_iter1, grp_matrix_mul_fu_428_output_r_d0, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_block_pp0_stage0, grp_fu_448_p2, xor_ln114_fu_956_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_d0 <= xor_ln114_fu_956_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_d0 <= grp_fu_448_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_d0 <= plaintext_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_d0 <= grp_matrix_mul_fu_428_output_r_d0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_d1_assign_proc : process(plaintext_q1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state21, ap_enable_reg_pp0_iter1, grp_matrix_mul_fu_428_output_r_d1, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_block_pp0_stage0, grp_fu_455_p2, ap_CS_fsm_state19, or_ln239_2_fu_856_p5, xor_ln114_2_fu_963_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_d1 <= xor_ln114_2_fu_963_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_d1 <= or_ln239_2_fu_856_p5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_d1 <= grp_fu_455_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_d1 <= plaintext_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_d1 <= grp_matrix_mul_fu_428_output_r_d1;
        else 
            output_r_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(tmp_36_reg_1016, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state21, ap_enable_reg_pp0_iter1, grp_matrix_mul_fu_428_output_r_we0, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_36_reg_1016 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_we0 <= grp_matrix_mul_fu_428_output_r_we0;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we1_assign_proc : process(tmp_36_reg_1016, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state21, ap_enable_reg_pp0_iter1, grp_matrix_mul_fu_428_output_r_we1, ap_CS_fsm_state7, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_36_reg_1016 = ap_const_lv1_0)))) then 
            output_r_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_we1 <= grp_matrix_mul_fu_428_output_r_we1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    plaintext_address0 <= zext_ln174_fu_478_p1(3 - 1 downto 0);
    plaintext_address1 <= zext_ln174_1_fu_489_p1(3 - 1 downto 0);

    plaintext_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            plaintext_ce0 <= ap_const_logic_1;
        else 
            plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    plaintext_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            plaintext_ce1 <= ap_const_logic_1;
        else 
            plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_1004_p2 <= std_logic_vector(unsigned(r_0_reg_382) + unsigned(ap_const_lv5_1));

    roundKey_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state24, grp_matrix_mul_1_fu_437_output_r_address0, ap_CS_fsm_state5, ap_CS_fsm_state10, zext_ln114_1_fu_506_p1, zext_ln114_7_fu_976_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            roundKey_address0 <= zext_ln114_7_fu_976_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            roundKey_address0 <= zext_ln114_1_fu_506_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            roundKey_address0 <= grp_matrix_mul_1_fu_437_output_r_address0;
        else 
            roundKey_address0 <= "XXXX";
        end if; 
    end process;


    roundKey_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state24, grp_matrix_mul_1_fu_437_output_r_address1, ap_CS_fsm_state5, ap_CS_fsm_state10, zext_ln114_3_fu_522_p1, zext_ln114_8_fu_992_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            roundKey_address1 <= zext_ln114_8_fu_992_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            roundKey_address1 <= zext_ln114_3_fu_522_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            roundKey_address1 <= grp_matrix_mul_1_fu_437_output_r_address1;
        else 
            roundKey_address1 <= "XXXX";
        end if; 
    end process;


    roundKey_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state24, grp_matrix_mul_1_fu_437_output_r_ce0, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            roundKey_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            roundKey_ce0 <= grp_matrix_mul_1_fu_437_output_r_ce0;
        else 
            roundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    roundKey_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state24, grp_matrix_mul_1_fu_437_output_r_ce1, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            roundKey_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            roundKey_ce1 <= grp_matrix_mul_1_fu_437_output_r_ce1;
        else 
            roundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    roundKey_we0_assign_proc : process(grp_matrix_mul_1_fu_437_output_r_we0, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            roundKey_we0 <= grp_matrix_mul_1_fu_437_output_r_we0;
        else 
            roundKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    roundKey_we1_assign_proc : process(grp_matrix_mul_1_fu_437_output_r_we1, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            roundKey_we1 <= grp_matrix_mul_1_fu_437_output_r_we1;
        else 
            roundKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_874_p3 <= (r_0_reg_382 & ap_const_lv2_0);
    shl_ln68_3_fu_743_p2 <= std_logic_vector(shift_left(unsigned(zext_ln222_fu_727_p1),to_integer(unsigned('0' & zext_ln55_1_fu_663_p1(8-1 downto 0)))));
    shl_ln68_4_fu_780_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln55_3_reg_1152(8-1 downto 0)))));
    shl_ln68_5_fu_791_p2 <= std_logic_vector(shift_left(unsigned(zext_ln223_fu_776_p1),to_integer(unsigned('0' & zext_ln55_3_reg_1152(8-1 downto 0)))));
    shl_ln68_6_fu_827_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln55_5_reg_1164(8-1 downto 0)))));
    shl_ln68_7_fu_838_p2 <= std_logic_vector(shift_left(unsigned(zext_ln224_fu_823_p1),to_integer(unsigned('0' & zext_ln55_5_reg_1164(8-1 downto 0)))));
    shl_ln68_fu_731_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln55_1_fu_663_p1(8-1 downto 0)))));
    shl_ln_fu_540_p3 <= (r_0_reg_382 & ap_const_lv9_0);
    sub_ln55_1_fu_677_p2 <= std_logic_vector(signed(ap_const_lv3_6) - signed(trunc_ln209_reg_1121));
    sub_ln55_fu_658_p2 <= std_logic_vector(signed(ap_const_lv3_5) - signed(trunc_ln209_reg_1121));

    temp_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln209_fu_585_p2, temp_addr_12_reg_1128, temp_addr_13_reg_1134, ap_CS_fsm_state10, zext_ln55_fu_607_p1, zext_ln55_4_fu_647_p1, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_address0 <= temp_addr_13_reg_1134;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_address0 <= temp_addr_12_reg_1128;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_address0 <= zext_ln55_4_fu_647_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln209_fu_585_p2 = ap_const_lv1_1))) then 
            temp_address0 <= zext_ln55_fu_607_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            temp_address0 <= ap_const_lv64_2(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln209_fu_585_p2 = ap_const_lv1_0)))) then 
            temp_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXXX";
        end if; 
    end process;


    temp_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state9, temp_addr_11_reg_1115, ap_CS_fsm_state11, temp_addr_12_reg_1128, temp_addr_13_reg_1134, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state17, zext_ln55_2_fu_632_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp_address1 <= temp_addr_13_reg_1134;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_address1 <= temp_addr_12_reg_1128;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_address1 <= temp_addr_11_reg_1115;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_address1 <= zext_ln55_2_fu_632_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            temp_address1 <= ap_const_lv64_3(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            temp_address1 <= ap_const_lv64_1(7 - 1 downto 0);
        else 
            temp_address1 <= "XXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln209_fu_585_p2, grp_matrix_mul_1_fu_437_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_matrix_mul_1_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln209_fu_585_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln209_fu_585_p2 = ap_const_lv1_1)))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, grp_matrix_mul_1_fu_437_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_matrix_mul_1_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            temp_ce1 <= ap_const_logic_1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_state9, trunc_ln1_reg_1102, ap_CS_fsm_state10, trunc_ln194_fu_549_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_d0 <= trunc_ln1_reg_1102;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_d0 <= trunc_ln194_fu_549_p1;
        else 
            temp_d0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_d1_assign_proc : process(output_r_q0, ap_CS_fsm_state9, trunc_ln2_reg_1107, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state17, or_ln68_fu_755_p2, or_ln68_1_fu_802_p2, or_ln68_2_fu_849_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp_d1 <= or_ln68_2_fu_849_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_d1 <= or_ln68_1_fu_802_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_d1 <= or_ln68_fu_755_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_d1 <= trunc_ln2_reg_1107;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_d1 <= output_r_q0(15 downto 8);
        else 
            temp_d1 <= "XXXXXXXX";
        end if; 
    end process;

    temp_matrix3_address0 <= zext_ln114_5_fu_908_p1(7 - 1 downto 0);
    temp_matrix3_address1 <= zext_ln114_6_fu_945_p1(7 - 1 downto 0);

    temp_matrix3_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            temp_matrix3_ce0 <= ap_const_logic_1;
        else 
            temp_matrix3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_matrix3_ce1_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            temp_matrix3_ce1 <= ap_const_logic_1;
        else 
            temp_matrix3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state9, grp_matrix_mul_1_fu_437_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_matrix_mul_1_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state15, grp_matrix_mul_1_fu_437_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_matrix_mul_1_fu_437_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            temp_we1 <= ap_const_logic_1;
        else 
            temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_36_fu_466_p3 <= loop_0_0_reg_360(2 downto 2);
    tmp_3_fu_928_p4 <= add_ln244_reg_1191(6 downto 2);
    trunc_ln110_1_fu_913_p1 <= i_0_0_i_reg_406(2 - 1 downto 0);
    trunc_ln110_2_fu_982_p1 <= i_0_0_i2_reg_417(2 - 1 downto 0);
    trunc_ln110_fu_512_p1 <= i_0_0_i1_reg_371(2 - 1 downto 0);
    trunc_ln171_fu_474_p1 <= loop_0_0_reg_360(2 - 1 downto 0);
    trunc_ln194_fu_549_p1 <= output_r_q0(8 - 1 downto 0);
    trunc_ln209_fu_612_p1 <= bitNumber_assign_2_reg_394(3 - 1 downto 0);
    xor_ln114_2_fu_963_p2 <= (temp_matrix3_q1 xor output_r_q1);
    xor_ln114_fu_956_p2 <= (temp_matrix3_q0 xor output_r_q0);
    xor_ln222_fu_721_p2 <= (and_ln222_fu_715_p2 xor a_fu_673_p1);
    xor_ln223_1_fu_770_p2 <= (xor_ln223_fu_766_p2 xor and_ln223_fu_762_p2);
    xor_ln223_fu_766_p2 <= (b_reg_1158 xor a_reg_1145);
    xor_ln224_1_fu_817_p2 <= (xor_ln224_fu_813_p2 xor and_ln224_fu_809_p2);
    xor_ln224_fu_813_p2 <= (xor_ln223_reg_1176 xor c_reg_1170);
    xor_ln55_fu_696_p2 <= (trunc_ln209_reg_1121 xor ap_const_lv3_7);
    xor_ln68_3_fu_785_p2 <= (shl_ln68_4_fu_780_p2 xor ap_const_lv8_FF);
    xor_ln68_4_fu_832_p2 <= (shl_ln68_6_fu_827_p2 xor ap_const_lv8_FF);
    xor_ln68_fu_737_p2 <= (shl_ln68_fu_731_p2 xor ap_const_lv8_FF);
    zext_ln114_1_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_0_i1_reg_371),64));
    zext_ln114_2_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln110_fu_917_p2),64));
    zext_ln114_3_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln110_1_fu_516_p2),64));
    zext_ln114_4_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_0_i_reg_406),7));
    zext_ln114_5_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_fu_903_p2),64));
    zext_ln114_6_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_1_fu_937_p3),64));
    zext_ln114_7_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_0_i2_reg_417),64));
    zext_ln114_8_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln110_2_fu_986_p2),64));
    zext_ln114_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_0_i_reg_406),64));
    zext_ln174_1_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln171_fu_483_p2),64));
    zext_ln174_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_0_reg_360),64));
    zext_ln222_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln222_fu_721_p2),8));
    zext_ln223_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln223_1_fu_770_p2),8));
    zext_ln224_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln224_1_fu_817_p2),8));
    zext_ln55_1_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln55_fu_658_p2),8));
    zext_ln55_2_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln55_2_fu_622_p4),64));
    zext_ln55_3_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln55_1_fu_677_p2),8));
    zext_ln55_4_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln55_4_fu_637_p4),64));
    zext_ln55_5_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln55_fu_696_p2),8));
    zext_ln55_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_597_p4),64));
end behav;
