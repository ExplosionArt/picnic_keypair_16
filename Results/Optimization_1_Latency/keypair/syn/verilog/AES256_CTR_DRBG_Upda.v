// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES256_CTR_DRBG_Upda (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        V_address0,
        V_ce0,
        V_we0,
        V_d0,
        V_q0,
        V_address1,
        V_ce1,
        V_we1,
        V_d1,
        V_q1,
        DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_we1,
        DRBG_ctx_Key_d1,
        DRBG_ctx_Key_q1
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] V_address0;
output   V_ce0;
output   V_we0;
output  [7:0] V_d0;
input  [7:0] V_q0;
output  [3:0] V_address1;
output   V_ce1;
output   V_we1;
output  [7:0] V_d1;
input  [7:0] V_q1;
output  [4:0] DRBG_ctx_Key_address0;
output   DRBG_ctx_Key_ce0;
output   DRBG_ctx_Key_we0;
output  [7:0] DRBG_ctx_Key_d0;
input  [7:0] DRBG_ctx_Key_q0;
output  [4:0] DRBG_ctx_Key_address1;
output   DRBG_ctx_Key_ce1;
output   DRBG_ctx_Key_we1;
output  [7:0] DRBG_ctx_Key_d1;
input  [7:0] DRBG_ctx_Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] V_address0;
reg V_ce0;
reg V_we0;
reg[7:0] V_d0;
reg[3:0] V_address1;
reg V_ce1;
reg V_we1;
reg[7:0] V_d1;
reg[4:0] DRBG_ctx_Key_address0;
reg DRBG_ctx_Key_ce0;
reg DRBG_ctx_Key_we0;
reg[4:0] DRBG_ctx_Key_address1;
reg DRBG_ctx_Key_ce1;
reg DRBG_ctx_Key_we1;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_947_p2;
reg   [1:0] i_reg_1078;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln322_fu_941_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire   [5:0] shl_ln_fu_971_p3;
reg   [5:0] shl_ln_reg_1221;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
reg   [5:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
wire   [7:0] temp_q0;
reg   [5:0] temp_address1;
reg    temp_ce1;
reg    temp_we1;
wire   [7:0] temp_q1;
wire    grp_AES256_ECB_fu_923_ap_start;
wire    grp_AES256_ECB_fu_923_ap_done;
wire    grp_AES256_ECB_fu_923_ap_idle;
wire    grp_AES256_ECB_fu_923_ap_ready;
wire   [4:0] grp_AES256_ECB_fu_923_key_address0;
wire    grp_AES256_ECB_fu_923_key_ce0;
wire   [4:0] grp_AES256_ECB_fu_923_key_address1;
wire    grp_AES256_ECB_fu_923_key_ce1;
wire   [3:0] grp_AES256_ECB_fu_923_ctr_address0;
wire    grp_AES256_ECB_fu_923_ctr_ce0;
wire   [3:0] grp_AES256_ECB_fu_923_ctr_address1;
wire    grp_AES256_ECB_fu_923_ctr_ce1;
wire   [5:0] grp_AES256_ECB_fu_923_buffer_r_address0;
wire    grp_AES256_ECB_fu_923_buffer_r_ce0;
wire    grp_AES256_ECB_fu_923_buffer_r_we0;
wire   [7:0] grp_AES256_ECB_fu_923_buffer_r_d0;
wire   [5:0] grp_AES256_ECB_fu_923_buffer_r_address1;
wire    grp_AES256_ECB_fu_923_buffer_r_ce1;
wire    grp_AES256_ECB_fu_923_buffer_r_we1;
wire   [7:0] grp_AES256_ECB_fu_923_buffer_r_d1;
reg   [1:0] i_0_reg_805;
wire    ap_CS_fsm_state21;
reg   [7:0] V_load_lcssa_reg_817;
wire   [0:0] grp_fu_935_p2;
wire   [0:0] icmp_ln328_2_fu_953_p2;
reg   [3:0] V_addr4_lcssa18_reg_854;
reg    grp_AES256_ECB_fu_923_ap_start_reg;
wire   [63:0] zext_ln328_fu_959_p1;
wire    ap_CS_fsm_state19;
wire   [7:0] add_ln331_fu_964_p2;
wire    ap_CS_fsm_state45;
reg   [44:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 grp_AES256_ECB_fu_923_ap_start_reg = 1'b0;
end

AES256_CTR_DRBG_UdEe #(
    .DataWidth( 8 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(grp_AES256_ECB_fu_923_buffer_r_d0),
    .q0(temp_q0),
    .address1(temp_address1),
    .ce1(temp_ce1),
    .we1(temp_we1),
    .d1(grp_AES256_ECB_fu_923_buffer_r_d1),
    .q1(temp_q1)
);

AES256_ECB grp_AES256_ECB_fu_923(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES256_ECB_fu_923_ap_start),
    .ap_done(grp_AES256_ECB_fu_923_ap_done),
    .ap_idle(grp_AES256_ECB_fu_923_ap_idle),
    .ap_ready(grp_AES256_ECB_fu_923_ap_ready),
    .key_address0(grp_AES256_ECB_fu_923_key_address0),
    .key_ce0(grp_AES256_ECB_fu_923_key_ce0),
    .key_q0(DRBG_ctx_Key_q0),
    .key_address1(grp_AES256_ECB_fu_923_key_address1),
    .key_ce1(grp_AES256_ECB_fu_923_key_ce1),
    .key_q1(DRBG_ctx_Key_q1),
    .ctr_address0(grp_AES256_ECB_fu_923_ctr_address0),
    .ctr_ce0(grp_AES256_ECB_fu_923_ctr_ce0),
    .ctr_q0(V_q0),
    .ctr_address1(grp_AES256_ECB_fu_923_ctr_address1),
    .ctr_ce1(grp_AES256_ECB_fu_923_ctr_ce1),
    .ctr_q1(V_q1),
    .buffer_r_address0(grp_AES256_ECB_fu_923_buffer_r_address0),
    .buffer_r_ce0(grp_AES256_ECB_fu_923_buffer_r_ce0),
    .buffer_r_we0(grp_AES256_ECB_fu_923_buffer_r_we0),
    .buffer_r_d0(grp_AES256_ECB_fu_923_buffer_r_d0),
    .buffer_r_address1(grp_AES256_ECB_fu_923_buffer_r_address1),
    .buffer_r_ce1(grp_AES256_ECB_fu_923_buffer_r_ce1),
    .buffer_r_we1(grp_AES256_ECB_fu_923_buffer_r_we1),
    .buffer_r_d1(grp_AES256_ECB_fu_923_buffer_r_d1),
    .buffer_offset(shl_ln_reg_1221)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AES256_ECB_fu_923_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            grp_AES256_ECB_fu_923_ap_start_reg <= 1'b1;
        end else if ((grp_AES256_ECB_fu_923_ap_ready == 1'b1)) begin
            grp_AES256_ECB_fu_923_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        V_addr4_lcssa18_reg_854 <= 4'd0;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        V_addr4_lcssa18_reg_854 <= 4'd1;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        V_addr4_lcssa18_reg_854 <= 4'd2;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        V_addr4_lcssa18_reg_854 <= 4'd3;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        V_addr4_lcssa18_reg_854 <= 4'd4;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        V_addr4_lcssa18_reg_854 <= 4'd5;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        V_addr4_lcssa18_reg_854 <= 4'd6;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        V_addr4_lcssa18_reg_854 <= 4'd7;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        V_addr4_lcssa18_reg_854 <= 4'd8;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        V_addr4_lcssa18_reg_854 <= 4'd9;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        V_addr4_lcssa18_reg_854 <= 4'd10;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        V_addr4_lcssa18_reg_854 <= 4'd11;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        V_addr4_lcssa18_reg_854 <= 4'd12;
    end else if (((icmp_ln328_2_fu_953_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        V_addr4_lcssa18_reg_854 <= 4'd13;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        V_addr4_lcssa18_reg_854 <= 4'd14;
    end else if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        V_addr4_lcssa18_reg_854 <= 4'd15;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln328_2_fu_953_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        V_load_lcssa_reg_817 <= V_q1;
    end else if ((((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        V_load_lcssa_reg_817 <= V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_AES256_ECB_fu_923_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        i_0_reg_805 <= i_reg_1078;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_805 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1078 <= i_fu_947_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        shl_ln_reg_1221[5 : 4] <= shl_ln_fu_971_p3[5 : 4];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        DRBG_ctx_Key_address0 = 5'd30;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        DRBG_ctx_Key_address0 = 5'd28;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        DRBG_ctx_Key_address0 = 5'd26;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        DRBG_ctx_Key_address0 = 5'd24;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        DRBG_ctx_Key_address0 = 5'd22;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        DRBG_ctx_Key_address0 = 5'd20;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        DRBG_ctx_Key_address0 = 5'd18;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        DRBG_ctx_Key_address0 = 5'd16;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_Key_address0 = 5'd14;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        DRBG_ctx_Key_address0 = 5'd12;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_Key_address0 = 5'd10;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        DRBG_ctx_Key_address0 = 5'd8;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        DRBG_ctx_Key_address0 = 5'd6;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        DRBG_ctx_Key_address0 = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        DRBG_ctx_Key_address0 = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        DRBG_ctx_Key_address0 = 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        DRBG_ctx_Key_address0 = grp_AES256_ECB_fu_923_key_address0;
    end else begin
        DRBG_ctx_Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        DRBG_ctx_Key_address1 = 5'd31;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        DRBG_ctx_Key_address1 = 5'd29;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        DRBG_ctx_Key_address1 = 5'd27;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        DRBG_ctx_Key_address1 = 5'd25;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        DRBG_ctx_Key_address1 = 5'd23;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        DRBG_ctx_Key_address1 = 5'd21;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        DRBG_ctx_Key_address1 = 5'd19;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        DRBG_ctx_Key_address1 = 5'd17;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        DRBG_ctx_Key_address1 = 5'd15;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        DRBG_ctx_Key_address1 = 5'd13;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_Key_address1 = 5'd11;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        DRBG_ctx_Key_address1 = 5'd9;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        DRBG_ctx_Key_address1 = 5'd7;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        DRBG_ctx_Key_address1 = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        DRBG_ctx_Key_address1 = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        DRBG_ctx_Key_address1 = 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        DRBG_ctx_Key_address1 = grp_AES256_ECB_fu_923_key_address1;
    end else begin
        DRBG_ctx_Key_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        DRBG_ctx_Key_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        DRBG_ctx_Key_ce0 = grp_AES256_ECB_fu_923_key_ce0;
    end else begin
        DRBG_ctx_Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        DRBG_ctx_Key_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        DRBG_ctx_Key_ce1 = grp_AES256_ECB_fu_923_key_ce1;
    end else begin
        DRBG_ctx_Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        DRBG_ctx_Key_we0 = 1'b1;
    end else begin
        DRBG_ctx_Key_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        DRBG_ctx_Key_we1 = 1'b1;
    end else begin
        DRBG_ctx_Key_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        V_address0 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        V_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state16))) begin
        V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        V_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state14))) begin
        V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        V_address0 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state12))) begin
        V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        V_address0 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state10))) begin
        V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        V_address0 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state8))) begin
        V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        V_address0 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state6))) begin
        V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        V_address0 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        V_address0 = grp_AES256_ECB_fu_923_ctr_address0;
    end else begin
        V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        V_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        V_address1 = zext_ln328_fu_959_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        V_address1 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state17))) begin
        V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        V_address1 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state15))) begin
        V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        V_address1 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state13))) begin
        V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        V_address1 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state11))) begin
        V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        V_address1 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state9))) begin
        V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        V_address1 = 64'd11;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state7))) begin
        V_address1 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state5))) begin
        V_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        V_address1 = grp_AES256_ECB_fu_923_ctr_address1;
    end else begin
        V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        V_ce0 = grp_AES256_ECB_fu_923_ctr_ce0;
    end else begin
        V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        V_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        V_ce1 = grp_AES256_ECB_fu_923_ctr_ce1;
    end else begin
        V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38))) begin
        V_d0 = temp_q1;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state4))) begin
        V_d0 = 8'd0;
    end else begin
        V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38))) begin
        V_d1 = temp_q0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        V_d1 = add_ln331_fu_964_p2;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        V_d1 = 8'd0;
    end else begin
        V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state18) & (grp_fu_935_p2 == 1'd1)))) begin
        V_we0 = 1'b1;
    end else begin
        V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        V_we1 = 1'b1;
    end else begin
        V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        temp_address0 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        temp_address0 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_address0 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_address0 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        temp_address0 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        temp_address0 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        temp_address0 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        temp_address0 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        temp_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        temp_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        temp_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        temp_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        temp_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_address0 = grp_AES256_ECB_fu_923_buffer_r_address0;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        temp_address1 = 64'd47;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        temp_address1 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_address1 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        temp_address1 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        temp_address1 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        temp_address1 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        temp_address1 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        temp_address1 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        temp_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        temp_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        temp_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        temp_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        temp_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        temp_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        temp_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_address1 = grp_AES256_ECB_fu_923_buffer_r_address1;
    end else begin
        temp_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state2))) begin
        temp_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_ce0 = grp_AES256_ECB_fu_923_buffer_r_ce0;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state2))) begin
        temp_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_ce1 = grp_AES256_ECB_fu_923_buffer_r_ce1;
    end else begin
        temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_we0 = grp_AES256_ECB_fu_923_buffer_r_we0;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        temp_we1 = grp_AES256_ECB_fu_923_buffer_r_we1;
    end else begin
        temp_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln322_fu_941_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln328_2_fu_953_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((grp_fu_935_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (grp_fu_935_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_AES256_ECB_fu_923_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DRBG_ctx_Key_d0 = temp_q0;

assign DRBG_ctx_Key_d1 = temp_q1;

assign add_ln331_fu_964_p2 = (V_load_lcssa_reg_817 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_AES256_ECB_fu_923_ap_start = grp_AES256_ECB_fu_923_ap_start_reg;

assign grp_fu_935_p2 = ((V_q0 == 8'd255) ? 1'b1 : 1'b0);

assign i_fu_947_p2 = (i_0_reg_805 + 2'd1);

assign icmp_ln322_fu_941_p2 = ((i_0_reg_805 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln328_2_fu_953_p2 = ((V_q1 == 8'd255) ? 1'b1 : 1'b0);

assign shl_ln_fu_971_p3 = {{i_0_reg_805}, {4'd0}};

assign zext_ln328_fu_959_p1 = V_addr4_lcssa18_reg_854;

always @ (posedge ap_clk) begin
    shl_ln_reg_1221[3:0] <= 4'b0000;
end

endmodule //AES256_CTR_DRBG_Upda
