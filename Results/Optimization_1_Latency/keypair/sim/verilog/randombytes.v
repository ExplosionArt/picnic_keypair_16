// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module randombytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        x_address1,
        x_ce1,
        x_we1,
        x_d1,
        DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0,
        DRBG_ctx_V_d0,
        DRBG_ctx_V_q0,
        DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1,
        DRBG_ctx_V_we1,
        DRBG_ctx_V_d1,
        DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_we1,
        DRBG_ctx_Key_d1,
        DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] x_address0;
output   x_ce0;
output   x_we0;
output  [7:0] x_d0;
output  [4:0] x_address1;
output   x_ce1;
output   x_we1;
output  [7:0] x_d1;
output  [3:0] DRBG_ctx_V_address0;
output   DRBG_ctx_V_ce0;
output   DRBG_ctx_V_we0;
output  [7:0] DRBG_ctx_V_d0;
input  [7:0] DRBG_ctx_V_q0;
output  [3:0] DRBG_ctx_V_address1;
output   DRBG_ctx_V_ce1;
output   DRBG_ctx_V_we1;
output  [7:0] DRBG_ctx_V_d1;
input  [7:0] DRBG_ctx_V_q1;
output  [4:0] DRBG_ctx_Key_address0;
output   DRBG_ctx_Key_ce0;
output   DRBG_ctx_Key_we0;
output  [7:0] DRBG_ctx_Key_d0;
input  [7:0] DRBG_ctx_Key_q0;
output  [4:0] DRBG_ctx_Key_address1;
output   DRBG_ctx_Key_ce1;
output   DRBG_ctx_Key_we1;
output  [7:0] DRBG_ctx_Key_d1;
input  [7:0] DRBG_ctx_Key_q1;
input  [31:0] DRBG_ctx_reseed_counter_i;
output  [31:0] DRBG_ctx_reseed_counter_o;
output   DRBG_ctx_reseed_counter_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] x_address0;
reg x_ce0;
reg x_we0;
reg[7:0] x_d0;
reg[4:0] x_address1;
reg x_ce1;
reg x_we1;
reg[7:0] x_d1;
reg[3:0] DRBG_ctx_V_address0;
reg DRBG_ctx_V_ce0;
reg DRBG_ctx_V_we0;
reg[7:0] DRBG_ctx_V_d0;
reg[3:0] DRBG_ctx_V_address1;
reg DRBG_ctx_V_ce1;
reg DRBG_ctx_V_we1;
reg[7:0] DRBG_ctx_V_d1;
reg[4:0] DRBG_ctx_Key_address0;
reg DRBG_ctx_Key_ce0;
reg DRBG_ctx_Key_we0;
reg[4:0] DRBG_ctx_Key_address1;
reg DRBG_ctx_Key_ce1;
reg DRBG_ctx_Key_we1;
reg[31:0] DRBG_ctx_reseed_counter_o;
reg DRBG_ctx_reseed_counter_o_ap_vld;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [0:0] grp_fu_445_p2;
reg   [0:0] icmp_ln228_reg_556;
wire    ap_CS_fsm_state3;
reg   [0:0] icmp_ln228_1_reg_565;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln228_2_fu_451_p2;
reg   [0:0] icmp_ln228_2_reg_574;
wire    ap_CS_fsm_state5;
reg   [0:0] icmp_ln228_3_reg_583;
wire    ap_CS_fsm_state6;
reg   [0:0] icmp_ln228_4_reg_592;
wire    ap_CS_fsm_state7;
reg   [0:0] icmp_ln228_5_reg_601;
wire    ap_CS_fsm_state8;
reg   [0:0] icmp_ln228_6_reg_610;
wire    ap_CS_fsm_state9;
reg   [0:0] icmp_ln228_7_reg_619;
wire    ap_CS_fsm_state10;
reg   [0:0] icmp_ln228_8_reg_628;
wire    ap_CS_fsm_state11;
reg   [0:0] icmp_ln228_9_reg_637;
wire    ap_CS_fsm_state12;
reg   [0:0] icmp_ln228_10_reg_646;
wire    ap_CS_fsm_state13;
reg   [0:0] icmp_ln228_11_reg_655;
wire    ap_CS_fsm_state14;
reg   [0:0] icmp_ln228_12_reg_664;
wire    ap_CS_fsm_state15;
reg   [0:0] icmp_ln228_13_reg_673;
wire    ap_CS_fsm_state16;
reg   [0:0] icmp_ln228_14_reg_682;
wire    ap_CS_fsm_state17;
reg   [0:0] icmp_ln228_15_reg_691;
reg   [7:0] block_2_reg_695;
wire    ap_CS_fsm_state20;
wire    grp_AES256_ECB_1_fu_435_ap_ready;
wire    grp_AES256_ECB_1_fu_435_ap_done;
reg   [7:0] block_3_reg_700;
reg   [7:0] block_4_reg_705;
reg   [7:0] block_5_reg_710;
reg   [7:0] block_6_reg_715;
reg   [7:0] block_7_reg_720;
reg   [7:0] block_8_reg_725;
reg   [7:0] block_9_reg_730;
reg   [7:0] block_s_reg_735;
reg   [7:0] block_10_reg_740;
reg   [7:0] block_11_reg_745;
reg   [7:0] block_12_reg_750;
reg   [7:0] block_13_reg_755;
reg   [7:0] block_14_reg_760;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_ap_start;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_ap_done;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_ap_idle;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_ap_ready;
wire   [3:0] grp_AES256_CTR_DRBG_Upda_fu_425_V_address0;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_V_ce0;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_V_we0;
wire   [7:0] grp_AES256_CTR_DRBG_Upda_fu_425_V_d0;
wire   [3:0] grp_AES256_CTR_DRBG_Upda_fu_425_V_address1;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_V_ce1;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_V_we1;
wire   [7:0] grp_AES256_CTR_DRBG_Upda_fu_425_V_d1;
wire   [4:0] grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_address0;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_ce0;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_we0;
wire   [7:0] grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_d0;
wire   [4:0] grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_address1;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_ce1;
wire    grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_we1;
wire   [7:0] grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_d1;
wire    grp_AES256_ECB_1_fu_435_ap_start;
wire    grp_AES256_ECB_1_fu_435_ap_idle;
wire   [4:0] grp_AES256_ECB_1_fu_435_key_address0;
wire    grp_AES256_ECB_1_fu_435_key_ce0;
wire   [4:0] grp_AES256_ECB_1_fu_435_key_address1;
wire    grp_AES256_ECB_1_fu_435_key_ce1;
wire   [3:0] grp_AES256_ECB_1_fu_435_ctr_address0;
wire    grp_AES256_ECB_1_fu_435_ctr_ce0;
wire   [3:0] grp_AES256_ECB_1_fu_435_ctr_address1;
wire    grp_AES256_ECB_1_fu_435_ctr_ce1;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_0;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_1;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_2;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_3;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_4;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_5;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_6;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_7;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_8;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_9;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_10;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_11;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_12;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_13;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_14;
wire   [7:0] grp_AES256_ECB_1_fu_435_ap_return_15;
reg   [7:0] DRBG_ctx_V_load_lcss_reg_319;
reg   [3:0] DRBG_ctx_V_addr_lcss_reg_356;
reg    grp_AES256_CTR_DRBG_Upda_fu_425_ap_start_reg;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
reg    grp_AES256_ECB_1_fu_435_ap_start_reg;
wire    ap_CS_fsm_state19;
wire   [63:0] DRBG_ctx_V_addr_lcss_1_fu_457_p1;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire   [31:0] add_ln263_fu_539_p2;
wire   [7:0] add_ln232_fu_462_p2;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 grp_AES256_CTR_DRBG_Upda_fu_425_ap_start_reg = 1'b0;
#0 grp_AES256_ECB_1_fu_435_ap_start_reg = 1'b0;
end

AES256_CTR_DRBG_Upda grp_AES256_CTR_DRBG_Upda_fu_425(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES256_CTR_DRBG_Upda_fu_425_ap_start),
    .ap_done(grp_AES256_CTR_DRBG_Upda_fu_425_ap_done),
    .ap_idle(grp_AES256_CTR_DRBG_Upda_fu_425_ap_idle),
    .ap_ready(grp_AES256_CTR_DRBG_Upda_fu_425_ap_ready),
    .V_address0(grp_AES256_CTR_DRBG_Upda_fu_425_V_address0),
    .V_ce0(grp_AES256_CTR_DRBG_Upda_fu_425_V_ce0),
    .V_we0(grp_AES256_CTR_DRBG_Upda_fu_425_V_we0),
    .V_d0(grp_AES256_CTR_DRBG_Upda_fu_425_V_d0),
    .V_q0(DRBG_ctx_V_q0),
    .V_address1(grp_AES256_CTR_DRBG_Upda_fu_425_V_address1),
    .V_ce1(grp_AES256_CTR_DRBG_Upda_fu_425_V_ce1),
    .V_we1(grp_AES256_CTR_DRBG_Upda_fu_425_V_we1),
    .V_d1(grp_AES256_CTR_DRBG_Upda_fu_425_V_d1),
    .V_q1(DRBG_ctx_V_q1),
    .DRBG_ctx_Key_address0(grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_address0),
    .DRBG_ctx_Key_ce0(grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_ce0),
    .DRBG_ctx_Key_we0(grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_we0),
    .DRBG_ctx_Key_d0(grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_d0),
    .DRBG_ctx_Key_q0(DRBG_ctx_Key_q0),
    .DRBG_ctx_Key_address1(grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_address1),
    .DRBG_ctx_Key_ce1(grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_ce1),
    .DRBG_ctx_Key_we1(grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_we1),
    .DRBG_ctx_Key_d1(grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_d1),
    .DRBG_ctx_Key_q1(DRBG_ctx_Key_q1)
);

AES256_ECB_1 grp_AES256_ECB_1_fu_435(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES256_ECB_1_fu_435_ap_start),
    .ap_done(grp_AES256_ECB_1_fu_435_ap_done),
    .ap_idle(grp_AES256_ECB_1_fu_435_ap_idle),
    .ap_ready(grp_AES256_ECB_1_fu_435_ap_ready),
    .key_address0(grp_AES256_ECB_1_fu_435_key_address0),
    .key_ce0(grp_AES256_ECB_1_fu_435_key_ce0),
    .key_q0(DRBG_ctx_Key_q0),
    .key_address1(grp_AES256_ECB_1_fu_435_key_address1),
    .key_ce1(grp_AES256_ECB_1_fu_435_key_ce1),
    .key_q1(DRBG_ctx_Key_q1),
    .ctr_address0(grp_AES256_ECB_1_fu_435_ctr_address0),
    .ctr_ce0(grp_AES256_ECB_1_fu_435_ctr_ce0),
    .ctr_q0(DRBG_ctx_V_q0),
    .ctr_address1(grp_AES256_ECB_1_fu_435_ctr_address1),
    .ctr_ce1(grp_AES256_ECB_1_fu_435_ctr_ce1),
    .ctr_q1(DRBG_ctx_V_q1),
    .ap_return_0(grp_AES256_ECB_1_fu_435_ap_return_0),
    .ap_return_1(grp_AES256_ECB_1_fu_435_ap_return_1),
    .ap_return_2(grp_AES256_ECB_1_fu_435_ap_return_2),
    .ap_return_3(grp_AES256_ECB_1_fu_435_ap_return_3),
    .ap_return_4(grp_AES256_ECB_1_fu_435_ap_return_4),
    .ap_return_5(grp_AES256_ECB_1_fu_435_ap_return_5),
    .ap_return_6(grp_AES256_ECB_1_fu_435_ap_return_6),
    .ap_return_7(grp_AES256_ECB_1_fu_435_ap_return_7),
    .ap_return_8(grp_AES256_ECB_1_fu_435_ap_return_8),
    .ap_return_9(grp_AES256_ECB_1_fu_435_ap_return_9),
    .ap_return_10(grp_AES256_ECB_1_fu_435_ap_return_10),
    .ap_return_11(grp_AES256_ECB_1_fu_435_ap_return_11),
    .ap_return_12(grp_AES256_ECB_1_fu_435_ap_return_12),
    .ap_return_13(grp_AES256_ECB_1_fu_435_ap_return_13),
    .ap_return_14(grp_AES256_ECB_1_fu_435_ap_return_14),
    .ap_return_15(grp_AES256_ECB_1_fu_435_ap_return_15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AES256_CTR_DRBG_Upda_fu_425_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            grp_AES256_CTR_DRBG_Upda_fu_425_ap_start_reg <= 1'b1;
        end else if ((grp_AES256_CTR_DRBG_Upda_fu_425_ap_ready == 1'b1)) begin
            grp_AES256_CTR_DRBG_Upda_fu_425_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AES256_ECB_1_fu_435_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            grp_AES256_ECB_1_fu_435_ap_start_reg <= 1'b1;
        end else if ((grp_AES256_ECB_1_fu_435_ap_ready == 1'b1)) begin
            grp_AES256_ECB_1_fu_435_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd0;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd1;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd2;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd3;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd4;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd5;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd6;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd7;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd8;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd9;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd10;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd11;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd12;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln228_2_fu_451_p2 == 1'd0))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd13;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd14;
    end else if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        DRBG_ctx_V_addr_lcss_reg_356 <= 4'd15;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln228_2_fu_451_p2 == 1'd0))) begin
        DRBG_ctx_V_load_lcss_reg_319 <= DRBG_ctx_V_q1;
    end else if ((((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        DRBG_ctx_V_load_lcss_reg_319 <= DRBG_ctx_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_AES256_ECB_1_fu_435_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        block_10_reg_740 <= grp_AES256_ECB_1_fu_435_ap_return_11;
        block_11_reg_745 <= grp_AES256_ECB_1_fu_435_ap_return_12;
        block_12_reg_750 <= grp_AES256_ECB_1_fu_435_ap_return_13;
        block_13_reg_755 <= grp_AES256_ECB_1_fu_435_ap_return_14;
        block_14_reg_760 <= grp_AES256_ECB_1_fu_435_ap_return_15;
        block_2_reg_695 <= grp_AES256_ECB_1_fu_435_ap_return_2;
        block_3_reg_700 <= grp_AES256_ECB_1_fu_435_ap_return_3;
        block_4_reg_705 <= grp_AES256_ECB_1_fu_435_ap_return_4;
        block_5_reg_710 <= grp_AES256_ECB_1_fu_435_ap_return_5;
        block_6_reg_715 <= grp_AES256_ECB_1_fu_435_ap_return_6;
        block_7_reg_720 <= grp_AES256_ECB_1_fu_435_ap_return_7;
        block_8_reg_725 <= grp_AES256_ECB_1_fu_435_ap_return_8;
        block_9_reg_730 <= grp_AES256_ECB_1_fu_435_ap_return_9;
        block_s_reg_735 <= grp_AES256_ECB_1_fu_435_ap_return_10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln228_10_reg_646 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln228_11_reg_655 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        icmp_ln228_12_reg_664 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        icmp_ln228_13_reg_673 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        icmp_ln228_14_reg_682 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        icmp_ln228_15_reg_691 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln228_1_reg_565 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln228_2_reg_574 <= icmp_ln228_2_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln228_3_reg_583 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln228_4_reg_592 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln228_5_reg_601 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln228_6_reg_610 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        icmp_ln228_7_reg_619 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln228_8_reg_628 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        icmp_ln228_9_reg_637 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln228_reg_556 <= grp_fu_445_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        DRBG_ctx_Key_address0 = grp_AES256_ECB_1_fu_435_key_address0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_Key_address0 = grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_address0;
    end else begin
        DRBG_ctx_Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        DRBG_ctx_Key_address1 = grp_AES256_ECB_1_fu_435_key_address1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_Key_address1 = grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_address1;
    end else begin
        DRBG_ctx_Key_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        DRBG_ctx_Key_ce0 = grp_AES256_ECB_1_fu_435_key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_Key_ce0 = grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_ce0;
    end else begin
        DRBG_ctx_Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        DRBG_ctx_Key_ce1 = grp_AES256_ECB_1_fu_435_key_ce1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_Key_ce1 = grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_ce1;
    end else begin
        DRBG_ctx_Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_Key_we0 = grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_we0;
    end else begin
        DRBG_ctx_Key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_Key_we1 = grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_we1;
    end else begin
        DRBG_ctx_Key_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        DRBG_ctx_V_address0 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        DRBG_ctx_V_address0 = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_V_address0 = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        DRBG_ctx_V_address0 = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_V_address0 = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        DRBG_ctx_V_address0 = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_V_address0 = 4'd6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        DRBG_ctx_V_address0 = 4'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        DRBG_ctx_V_address0 = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        DRBG_ctx_V_address0 = 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_address0 = 4'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        DRBG_ctx_V_address0 = 4'd11;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        DRBG_ctx_V_address0 = 4'd12;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_V_address0 = 4'd14;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state1))) begin
        DRBG_ctx_V_address0 = 4'd15;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        DRBG_ctx_V_address0 = grp_AES256_ECB_1_fu_435_ctr_address0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_V_address0 = grp_AES256_CTR_DRBG_Upda_fu_425_V_address0;
    end else begin
        DRBG_ctx_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        DRBG_ctx_V_address1 = DRBG_ctx_V_addr_lcss_1_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        DRBG_ctx_V_address1 = 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        DRBG_ctx_V_address1 = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        DRBG_ctx_V_address1 = 4'd3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_V_address1 = 4'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        DRBG_ctx_V_address1 = 4'd5;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_V_address1 = 4'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        DRBG_ctx_V_address1 = 4'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        DRBG_ctx_V_address1 = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        DRBG_ctx_V_address1 = 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        DRBG_ctx_V_address1 = 4'd10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        DRBG_ctx_V_address1 = 4'd11;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_address1 = 4'd12;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        DRBG_ctx_V_address1 = 4'd14;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        DRBG_ctx_V_address1 = 4'd13;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        DRBG_ctx_V_address1 = grp_AES256_ECB_1_fu_435_ctr_address1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_V_address1 = grp_AES256_CTR_DRBG_Upda_fu_425_V_address1;
    end else begin
        DRBG_ctx_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        DRBG_ctx_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        DRBG_ctx_V_ce0 = grp_AES256_ECB_1_fu_435_ctr_ce0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_V_ce0 = grp_AES256_CTR_DRBG_Upda_fu_425_V_ce0;
    end else begin
        DRBG_ctx_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DRBG_ctx_V_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        DRBG_ctx_V_ce1 = grp_AES256_ECB_1_fu_435_ctr_ce1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_V_ce1 = grp_AES256_CTR_DRBG_Upda_fu_425_V_ce1;
    end else begin
        DRBG_ctx_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state17))) begin
        DRBG_ctx_V_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_V_d0 = grp_AES256_CTR_DRBG_Upda_fu_425_V_d0;
    end else begin
        DRBG_ctx_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        DRBG_ctx_V_d1 = add_ln232_fu_462_p2;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        DRBG_ctx_V_d1 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_V_d1 = grp_AES256_CTR_DRBG_Upda_fu_425_V_d1;
    end else begin
        DRBG_ctx_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((grp_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        DRBG_ctx_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_V_we0 = grp_AES256_CTR_DRBG_Upda_fu_425_V_we0;
    end else begin
        DRBG_ctx_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state18) & ((icmp_ln228_reg_556 == 1'd0) | ((icmp_ln228_1_reg_565 == 1'd0) | ((icmp_ln228_2_reg_574 == 1'd0) | ((icmp_ln228_3_reg_583 == 1'd0) | ((icmp_ln228_4_reg_592 == 1'd0) | ((icmp_ln228_5_reg_601 == 1'd0) | ((icmp_ln228_6_reg_610 == 1'd0) | ((icmp_ln228_7_reg_619 == 1'd0) | ((icmp_ln228_8_reg_628 == 1'd0) | ((icmp_ln228_9_reg_637 == 1'd0) | ((icmp_ln228_10_reg_646 == 1'd0) | ((icmp_ln228_11_reg_655 == 1'd0) | ((icmp_ln228_12_reg_664 == 1'd0) | ((icmp_ln228_13_reg_673 == 1'd0) | ((icmp_ln228_15_reg_691 == 1'd0) | (icmp_ln228_14_reg_682 == 1'd0))))))))))))))))))) begin
        DRBG_ctx_V_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        DRBG_ctx_V_we1 = grp_AES256_CTR_DRBG_Upda_fu_425_V_we1;
    end else begin
        DRBG_ctx_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_AES256_CTR_DRBG_Upda_fu_425_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        DRBG_ctx_reseed_counter_o = add_ln263_fu_539_p2;
    end else begin
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i;
    end
end

always @ (*) begin
    if (((grp_AES256_CTR_DRBG_Upda_fu_425_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        DRBG_ctx_reseed_counter_o_ap_vld = 1'b1;
    end else begin
        DRBG_ctx_reseed_counter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_AES256_CTR_DRBG_Upda_fu_425_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_AES256_CTR_DRBG_Upda_fu_425_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        x_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        x_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        x_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        x_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        x_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        x_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        x_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        x_address0 = 64'd0;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        x_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        x_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        x_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        x_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        x_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        x_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        x_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        x_address1 = 64'd1;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((grp_AES256_CTR_DRBG_Upda_fu_425_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((grp_AES256_ECB_1_fu_435_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((grp_AES256_CTR_DRBG_Upda_fu_425_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((grp_AES256_ECB_1_fu_435_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        x_d0 = block_13_reg_755;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        x_d0 = block_11_reg_745;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        x_d0 = block_s_reg_735;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        x_d0 = block_8_reg_725;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        x_d0 = block_6_reg_715;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        x_d0 = block_4_reg_705;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        x_d0 = block_2_reg_695;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        x_d0 = grp_AES256_ECB_1_fu_435_ap_return_0;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        x_d1 = block_14_reg_760;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        x_d1 = block_12_reg_750;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        x_d1 = block_10_reg_740;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        x_d1 = block_9_reg_730;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        x_d1 = block_7_reg_720;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        x_d1 = block_5_reg_710;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        x_d1 = block_3_reg_700;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        x_d1 = grp_AES256_ECB_1_fu_435_ap_return_1;
    end else begin
        x_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((grp_AES256_CTR_DRBG_Upda_fu_425_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((grp_AES256_ECB_1_fu_435_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((grp_AES256_CTR_DRBG_Upda_fu_425_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((grp_AES256_ECB_1_fu_435_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)))) begin
        x_we1 = 1'b1;
    end else begin
        x_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln228_2_fu_451_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((grp_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_AES256_ECB_1_fu_435_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_AES256_CTR_DRBG_Upda_fu_425_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DRBG_ctx_Key_d0 = grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_d0;

assign DRBG_ctx_Key_d1 = grp_AES256_CTR_DRBG_Upda_fu_425_DRBG_ctx_Key_d1;

assign DRBG_ctx_V_addr_lcss_1_fu_457_p1 = DRBG_ctx_V_addr_lcss_reg_356;

assign add_ln232_fu_462_p2 = (DRBG_ctx_V_load_lcss_reg_319 + 8'd1);

assign add_ln263_fu_539_p2 = (DRBG_ctx_reseed_counter_i + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_AES256_CTR_DRBG_Upda_fu_425_ap_start = grp_AES256_CTR_DRBG_Upda_fu_425_ap_start_reg;

assign grp_AES256_ECB_1_fu_435_ap_start = grp_AES256_ECB_1_fu_435_ap_start_reg;

assign grp_fu_445_p2 = ((DRBG_ctx_V_q0 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln228_2_fu_451_p2 = ((DRBG_ctx_V_q1 == 8'd255) ? 1'b1 : 1'b0);

endmodule //randombytes
