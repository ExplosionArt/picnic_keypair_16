// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        matrix_offset
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
input  [13:0] matrix_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] temp_matrix2_address0;
reg    temp_matrix2_ce0;
wire   [31:0] temp_matrix2_q0;
wire   [2:0] trunc_ln127_fu_258_p1;
reg   [2:0] trunc_ln127_reg_889;
wire    ap_CS_fsm_state2;
wire   [7:0] i_fu_268_p2;
reg   [7:0] i_reg_897;
wire   [8:0] shl_ln_fu_278_p3;
reg   [8:0] shl_ln_reg_902;
wire   [0:0] icmp_ln127_fu_262_p2;
wire   [2:0] j_fu_296_p2;
reg   [2:0] j_reg_910;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln133_fu_311_p1;
reg   [63:0] zext_ln133_reg_915;
wire   [0:0] icmp_ln129_fu_290_p2;
wire   [31:0] prod_q0;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln87_fu_338_p2;
wire   [2:0] i_6_fu_344_p2;
reg   [2:0] i_6_reg_943;
reg   [1:0] tmp_16_reg_948;
reg   [5:0] temp_addr_5_reg_954;
wire   [31:0] x_2_fu_375_p2;
wire    ap_CS_fsm_state7;
wire   [4:0] zext_ln68_cast_fu_587_p3;
reg   [4:0] zext_ln68_cast_reg_964;
wire    ap_CS_fsm_state8;
wire   [5:0] add_ln68_fu_602_p2;
reg   [5:0] add_ln68_reg_969;
wire   [7:0] or_ln68_fu_743_p2;
reg   [7:0] or_ln68_reg_975;
wire   [0:0] icmp_ln68_2_fu_749_p2;
reg   [0:0] icmp_ln68_2_reg_980;
wire   [2:0] loop_fu_868_p2;
reg   [2:0] loop_reg_991;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln140_fu_874_p1;
reg   [63:0] zext_ln140_reg_996;
wire   [0:0] icmp_ln139_fu_862_p2;
reg   [5:0] prod_address0;
reg    prod_ce0;
reg    prod_we0;
wire   [31:0] prod_d0;
reg   [5:0] temp_address0;
reg    temp_ce0;
reg   [3:0] temp_we0;
wire   [31:0] temp_d0;
wire   [31:0] temp_q0;
reg   [7:0] bitNumber_assign_reg_203;
wire    ap_CS_fsm_state9;
reg   [2:0] j_0_reg_215;
wire    ap_CS_fsm_state4;
reg   [31:0] x_0_i_reg_226;
reg   [2:0] i_0_i_reg_236;
reg   [2:0] loop_0_reg_247;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln133_2_fu_321_p1;
wire   [63:0] zext_ln87_fu_333_p1;
wire   [63:0] zext_ln68_15_fu_370_p1;
wire   [3:0] shl_ln68_7_fu_855_p2;
wire   [6:0] trunc_ln132_fu_274_p1;
wire   [8:0] zext_ln129_fu_286_p1;
wire   [8:0] add_ln132_fu_302_p2;
wire   [13:0] zext_ln132_fu_307_p1;
wire   [13:0] add_ln133_fu_316_p2;
wire   [1:0] tmp_17_fu_360_p4;
wire   [30:0] lshr_ln_fu_381_p4;
wire   [31:0] zext_ln96_fu_391_p1;
wire   [31:0] y_fu_421_p2;
wire   [29:0] lshr_ln5_fu_427_p4;
wire   [23:0] trunc_ln96_6_fu_411_p4;
wire   [23:0] trunc_ln96_2_fu_407_p1;
wire   [31:0] zext_ln97_fu_437_p1;
wire   [31:0] y_4_fu_465_p2;
wire   [27:0] lshr_ln6_fu_471_p4;
wire   [23:0] trunc_ln97_2_fu_455_p4;
wire   [23:0] xor_ln97_fu_449_p2;
wire   [31:0] zext_ln98_fu_481_p1;
wire   [23:0] trunc_ln98_2_fu_499_p4;
wire   [23:0] xor_ln98_fu_493_p2;
wire   [31:0] y_5_fu_509_p2;
wire   [23:0] trunc_ln_fu_521_p4;
wire   [23:0] xor_ln98_4_fu_515_p2;
wire   [23:0] y_6_fu_539_p2;
wire   [0:0] trunc_ln96_fu_395_p1;
wire   [0:0] tmp_12_fu_441_p3;
wire   [0:0] xor_ln101_fu_553_p2;
wire   [0:0] tmp_11_fu_399_p3;
wire   [0:0] tmp_14_fu_531_p3;
wire   [0:0] tmp_15_fu_545_p3;
wire   [0:0] xor_ln101_6_fu_565_p2;
wire   [0:0] tmp_13_fu_485_p3;
wire   [0:0] xor_ln101_7_fu_571_p2;
wire   [0:0] xor_ln101_5_fu_559_p2;
wire   [0:0] xor_ln101_8_fu_577_p2;
wire   [5:0] zext_ln68_fu_594_p1;
wire   [63:0] zext_ln68_14_fu_598_p1;
wire   [63:0] zext_ln68_16_fu_608_p1;
wire   [5:0] zext_ln68_17_fu_618_p1;
wire   [0:0] icmp_ln68_fu_612_p2;
wire   [5:0] sub_ln68_fu_632_p2;
wire   [5:0] sub_ln68_4_fu_644_p2;
reg   [31:0] tmp_18_fu_622_p4;
wire   [5:0] xor_ln68_4_fu_638_p2;
wire   [5:0] select_ln68_fu_650_p3;
wire   [5:0] select_ln68_8_fu_666_p3;
wire   [5:0] sub_ln68_5_fu_674_p2;
wire   [31:0] select_ln68_7_fu_658_p3;
wire   [31:0] zext_ln68_18_fu_680_p1;
wire   [31:0] zext_ln68_19_fu_684_p1;
wire   [31:0] lshr_ln68_fu_688_p2;
wire   [31:0] lshr_ln68_3_fu_694_p2;
wire   [31:0] and_ln68_4_fu_700_p2;
wire   [2:0] xor_ln68_fu_710_p2;
wire   [7:0] zext_ln68_2_fu_715_p1;
wire   [7:0] shl_ln68_fu_719_p2;
wire   [7:0] zext_ln101_fu_583_p1;
wire   [7:0] trunc_ln68_fu_706_p1;
wire   [7:0] xor_ln68_2_fu_725_p2;
wire   [7:0] and_ln68_fu_737_p2;
wire   [7:0] shl_ln68_2_fu_731_p2;
wire   [5:0] zext_ln68_20_fu_755_p1;
wire   [5:0] xor_ln68_5_fu_761_p2;
wire   [5:0] select_ln68_9_fu_767_p3;
wire   [5:0] select_ln68_11_fu_779_p3;
wire   [5:0] select_ln68_10_fu_773_p3;
wire   [5:0] sub_ln68_6_fu_786_p2;
wire   [31:0] zext_ln68_21_fu_758_p1;
wire   [31:0] zext_ln68_22_fu_792_p1;
wire   [31:0] shl_ln68_5_fu_804_p2;
reg   [31:0] tmp_19_fu_810_p4;
wire   [31:0] zext_ln68_23_fu_796_p1;
wire   [31:0] zext_ln68_24_fu_800_p1;
wire   [31:0] shl_ln68_6_fu_827_p2;
wire   [31:0] lshr_ln68_4_fu_833_p2;
wire   [31:0] select_ln68_12_fu_820_p3;
wire   [31:0] and_ln68_5_fu_839_p2;
wire   [3:0] zext_ln68_25_fu_852_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

matrix_mul_temp_mfYi #(
    .DataWidth( 32 ),
    .AddressRange( 10240 ),
    .AddressWidth( 14 ))
temp_matrix2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_matrix2_address0),
    .ce0(temp_matrix2_ce0),
    .q0(temp_matrix2_q0)
);

matrix_mul_1_prod #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
prod_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(prod_address0),
    .ce0(prod_ce0),
    .we0(prod_we0),
    .d0(prod_d0),
    .q0(prod_q0)
);

matrix_mul_1_temp #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bitNumber_assign_reg_203 <= i_reg_897;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bitNumber_assign_reg_203 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_i_reg_236 <= i_6_reg_943;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_i_reg_236 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_215 <= j_reg_910;
    end else if (((icmp_ln127_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_215 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        loop_0_reg_247 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        loop_0_reg_247 <= loop_reg_991;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_0_i_reg_226 <= x_2_fu_375_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_0_i_reg_226 <= prod_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln68_reg_969[5 : 3] <= add_ln68_fu_602_p2[5 : 3];
        icmp_ln68_2_reg_980 <= icmp_ln68_2_fu_749_p2;
        or_ln68_reg_975 <= or_ln68_fu_743_p2;
        zext_ln68_cast_reg_964[4 : 3] <= zext_ln68_cast_fu_587_p3[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i_6_reg_943 <= i_6_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_897 <= i_fu_268_p2;
        trunc_ln127_reg_889 <= trunc_ln127_fu_258_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_910 <= j_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        loop_reg_991 <= loop_fu_868_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_902[8 : 2] <= shl_ln_fu_278_p3[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_338_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        temp_addr_5_reg_954[1 : 0] <= zext_ln68_15_fu_370_p1[1 : 0];
        tmp_16_reg_948 <= {{bitNumber_assign_reg_203[4:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln133_reg_915[2 : 0] <= zext_ln133_fu_311_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln139_fu_862_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        zext_ln140_reg_996[2 : 0] <= zext_ln140_fu_874_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln139_fu_862_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln139_fu_862_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_address0 = zext_ln140_reg_996;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = zext_ln133_fu_311_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        prod_address0 = zext_ln87_fu_333_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        prod_address0 = zext_ln133_reg_915;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        prod_address0 = 64'd0;
    end else begin
        prod_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_address0 = zext_ln140_fu_874_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_address0 = temp_addr_5_reg_954;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_address0 = zext_ln68_15_fu_370_p1;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        temp_matrix2_ce0 = 1'b1;
    end else begin
        temp_matrix2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_we0 = shl_ln68_7_fu_855_p2;
    end else begin
        temp_we0 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln127_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln129_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln87_fu_338_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln139_fu_862_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln132_fu_302_p2 = (shl_ln_reg_902 + zext_ln129_fu_286_p1);

assign add_ln133_fu_316_p2 = (zext_ln132_fu_307_p1 + matrix_offset);

assign add_ln68_fu_602_p2 = (6'd7 + zext_ln68_fu_594_p1);

assign and_ln68_4_fu_700_p2 = (lshr_ln68_fu_688_p2 & lshr_ln68_3_fu_694_p2);

assign and_ln68_5_fu_839_p2 = (shl_ln68_6_fu_827_p2 & lshr_ln68_4_fu_833_p2);

assign and_ln68_fu_737_p2 = (xor_ln68_2_fu_725_p2 & trunc_ln68_fu_706_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_6_fu_344_p2 = (i_0_i_reg_236 + 3'd1);

assign i_fu_268_p2 = (8'd1 + bitNumber_assign_reg_203);

assign icmp_ln127_fu_262_p2 = ((bitNumber_assign_reg_203 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_290_p2 = ((j_0_reg_215 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_862_p2 = ((loop_0_reg_247 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln68_2_fu_749_p2 = ((zext_ln68_14_fu_598_p1 > zext_ln68_16_fu_608_p1) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_612_p2 = ((zext_ln68_14_fu_598_p1 > zext_ln68_16_fu_608_p1) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_338_p2 = ((i_0_i_reg_236 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_296_p2 = (j_0_reg_215 + 3'd1);

assign loop_fu_868_p2 = (loop_0_reg_247 + 3'd1);

assign lshr_ln5_fu_427_p4 = {{y_fu_421_p2[31:2]}};

assign lshr_ln68_3_fu_694_p2 = 32'd4294967295 >> zext_ln68_19_fu_684_p1;

assign lshr_ln68_4_fu_833_p2 = 32'd4294967295 >> zext_ln68_24_fu_800_p1;

assign lshr_ln68_fu_688_p2 = select_ln68_7_fu_658_p3 >> zext_ln68_18_fu_680_p1;

assign lshr_ln6_fu_471_p4 = {{y_4_fu_465_p2[31:4]}};

assign lshr_ln_fu_381_p4 = {{x_0_i_reg_226[31:1]}};

assign or_ln68_fu_743_p2 = (shl_ln68_2_fu_731_p2 | and_ln68_fu_737_p2);

assign output_r_d0 = temp_q0;

assign prod_d0 = (temp_matrix2_q0 & output_r_q0);

assign select_ln68_10_fu_773_p3 = ((icmp_ln68_2_reg_980[0:0] === 1'b1) ? add_ln68_reg_969 : zext_ln68_20_fu_755_p1);

assign select_ln68_11_fu_779_p3 = ((icmp_ln68_2_reg_980[0:0] === 1'b1) ? xor_ln68_5_fu_761_p2 : zext_ln68_20_fu_755_p1);

assign select_ln68_12_fu_820_p3 = ((icmp_ln68_2_reg_980[0:0] === 1'b1) ? tmp_19_fu_810_p4 : shl_ln68_5_fu_804_p2);

assign select_ln68_7_fu_658_p3 = ((icmp_ln68_fu_612_p2[0:0] === 1'b1) ? tmp_18_fu_622_p4 : temp_q0);

assign select_ln68_8_fu_666_p3 = ((icmp_ln68_fu_612_p2[0:0] === 1'b1) ? xor_ln68_4_fu_638_p2 : zext_ln68_17_fu_618_p1);

assign select_ln68_9_fu_767_p3 = ((icmp_ln68_2_reg_980[0:0] === 1'b1) ? zext_ln68_20_fu_755_p1 : add_ln68_reg_969);

assign select_ln68_fu_650_p3 = ((icmp_ln68_fu_612_p2[0:0] === 1'b1) ? sub_ln68_fu_632_p2 : sub_ln68_4_fu_644_p2);

assign shl_ln68_2_fu_731_p2 = zext_ln101_fu_583_p1 << zext_ln68_2_fu_715_p1;

assign shl_ln68_5_fu_804_p2 = zext_ln68_21_fu_758_p1 << zext_ln68_22_fu_792_p1;

assign shl_ln68_6_fu_827_p2 = 32'd4294967295 << zext_ln68_23_fu_796_p1;

assign shl_ln68_7_fu_855_p2 = 4'd1 << zext_ln68_25_fu_852_p1;

assign shl_ln68_fu_719_p2 = 8'd1 << zext_ln68_2_fu_715_p1;

assign shl_ln_fu_278_p3 = {{trunc_ln132_fu_274_p1}, {2'd0}};

assign sub_ln68_4_fu_644_p2 = (add_ln68_fu_602_p2 - zext_ln68_17_fu_618_p1);

assign sub_ln68_5_fu_674_p2 = (6'd31 - select_ln68_fu_650_p3);

assign sub_ln68_6_fu_786_p2 = (6'd31 - select_ln68_9_fu_767_p3);

assign sub_ln68_fu_632_p2 = (zext_ln68_17_fu_618_p1 - add_ln68_fu_602_p2);

assign temp_d0 = (select_ln68_12_fu_820_p3 & and_ln68_5_fu_839_p2);

assign temp_matrix2_address0 = zext_ln133_2_fu_321_p1;

assign tmp_11_fu_399_p3 = x_0_i_reg_226[32'd1];

assign tmp_12_fu_441_p3 = y_fu_421_p2[32'd2];

assign tmp_13_fu_485_p3 = y_4_fu_465_p2[32'd4];

assign tmp_14_fu_531_p3 = y_5_fu_509_p2[32'd8];

assign tmp_15_fu_545_p3 = y_6_fu_539_p2[32'd16];

assign tmp_17_fu_360_p4 = {{bitNumber_assign_reg_203[6:5]}};

integer ap_tvar_int_0;

always @ (temp_q0) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_18_fu_622_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_18_fu_622_p4[ap_tvar_int_0] = temp_q0[31 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln68_5_fu_804_p2) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_19_fu_810_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_19_fu_810_p4[ap_tvar_int_1] = shl_ln68_5_fu_804_p2[31 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln127_fu_258_p1 = bitNumber_assign_reg_203[2:0];

assign trunc_ln132_fu_274_p1 = bitNumber_assign_reg_203[6:0];

assign trunc_ln68_fu_706_p1 = and_ln68_4_fu_700_p2[7:0];

assign trunc_ln96_2_fu_407_p1 = x_0_i_reg_226[23:0];

assign trunc_ln96_6_fu_411_p4 = {{x_0_i_reg_226[24:1]}};

assign trunc_ln96_fu_395_p1 = x_0_i_reg_226[0:0];

assign trunc_ln97_2_fu_455_p4 = {{y_fu_421_p2[25:2]}};

assign trunc_ln98_2_fu_499_p4 = {{y_4_fu_465_p2[27:4]}};

assign trunc_ln_fu_521_p4 = {{y_5_fu_509_p2[31:8]}};

assign x_2_fu_375_p2 = (x_0_i_reg_226 ^ prod_q0);

assign xor_ln101_5_fu_559_p2 = (xor_ln101_fu_553_p2 ^ tmp_11_fu_399_p3);

assign xor_ln101_6_fu_565_p2 = (tmp_15_fu_545_p3 ^ tmp_14_fu_531_p3);

assign xor_ln101_7_fu_571_p2 = (xor_ln101_6_fu_565_p2 ^ tmp_13_fu_485_p3);

assign xor_ln101_8_fu_577_p2 = (xor_ln101_7_fu_571_p2 ^ xor_ln101_5_fu_559_p2);

assign xor_ln101_fu_553_p2 = (trunc_ln96_fu_395_p1 ^ tmp_12_fu_441_p3);

assign xor_ln68_2_fu_725_p2 = (shl_ln68_fu_719_p2 ^ 8'd255);

assign xor_ln68_4_fu_638_p2 = (zext_ln68_17_fu_618_p1 ^ 6'd31);

assign xor_ln68_5_fu_761_p2 = (zext_ln68_20_fu_755_p1 ^ 6'd31);

assign xor_ln68_fu_710_p2 = (trunc_ln127_reg_889 ^ 3'd7);

assign xor_ln97_fu_449_p2 = (trunc_ln96_6_fu_411_p4 ^ trunc_ln96_2_fu_407_p1);

assign xor_ln98_4_fu_515_p2 = (xor_ln98_fu_493_p2 ^ trunc_ln98_2_fu_499_p4);

assign xor_ln98_fu_493_p2 = (xor_ln97_fu_449_p2 ^ trunc_ln97_2_fu_455_p4);

assign y_4_fu_465_p2 = (zext_ln97_fu_437_p1 ^ y_fu_421_p2);

assign y_5_fu_509_p2 = (zext_ln98_fu_481_p1 ^ y_4_fu_465_p2);

assign y_6_fu_539_p2 = (xor_ln98_4_fu_515_p2 ^ trunc_ln_fu_521_p4);

assign y_fu_421_p2 = (zext_ln96_fu_391_p1 ^ x_0_i_reg_226);

assign zext_ln101_fu_583_p1 = xor_ln101_8_fu_577_p2;

assign zext_ln129_fu_286_p1 = j_0_reg_215;

assign zext_ln132_fu_307_p1 = add_ln132_fu_302_p2;

assign zext_ln133_2_fu_321_p1 = add_ln133_fu_316_p2;

assign zext_ln133_fu_311_p1 = j_0_reg_215;

assign zext_ln140_fu_874_p1 = loop_0_reg_247;

assign zext_ln68_14_fu_598_p1 = zext_ln68_cast_fu_587_p3;

assign zext_ln68_15_fu_370_p1 = tmp_17_fu_360_p4;

assign zext_ln68_16_fu_608_p1 = add_ln68_fu_602_p2;

assign zext_ln68_17_fu_618_p1 = zext_ln68_cast_fu_587_p3;

assign zext_ln68_18_fu_680_p1 = select_ln68_8_fu_666_p3;

assign zext_ln68_19_fu_684_p1 = sub_ln68_5_fu_674_p2;

assign zext_ln68_20_fu_755_p1 = zext_ln68_cast_reg_964;

assign zext_ln68_21_fu_758_p1 = or_ln68_reg_975;

assign zext_ln68_22_fu_792_p1 = select_ln68_11_fu_779_p3;

assign zext_ln68_23_fu_796_p1 = select_ln68_10_fu_773_p3;

assign zext_ln68_24_fu_800_p1 = sub_ln68_6_fu_786_p2;

assign zext_ln68_25_fu_852_p1 = tmp_16_reg_948;

assign zext_ln68_2_fu_715_p1 = xor_ln68_fu_710_p2;

assign zext_ln68_cast_fu_587_p3 = {{tmp_16_reg_948}, {3'd0}};

assign zext_ln68_fu_594_p1 = zext_ln68_cast_fu_587_p3;

assign zext_ln87_fu_333_p1 = i_0_i_reg_236;

assign zext_ln96_fu_391_p1 = lshr_ln_fu_381_p4;

assign zext_ln97_fu_437_p1 = lshr_ln5_fu_427_p4;

assign zext_ln98_fu_481_p1 = lshr_ln6_fu_471_p4;

always @ (posedge ap_clk) begin
    shl_ln_reg_902[1:0] <= 2'b00;
    zext_ln133_reg_915[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    temp_addr_5_reg_954[5:2] <= 4'b0000;
    zext_ln68_cast_reg_964[2:0] <= 3'b000;
    add_ln68_reg_969[2:0] <= 3'b111;
    zext_ln140_reg_996[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrix_mul
