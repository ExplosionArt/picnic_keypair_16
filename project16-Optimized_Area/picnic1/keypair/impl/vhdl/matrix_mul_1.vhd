-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mul_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_offset : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of matrix_mul_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal temp_matrix_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal temp_matrix_ce0 : STD_LOGIC;
    signal temp_matrix_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln128_fu_265_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln128_reg_896 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_904 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_285_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_909 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln128_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_303_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_917 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln134_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_reg_922 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln130_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prod_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln87_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_351_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_950 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_reg_955 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_addr_4_reg_961 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_1_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln68_cast_fu_594_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln68_cast_reg_971 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln68_fu_609_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_reg_976 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln68_fu_750_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln68_reg_982 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln68_1_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_fu_875_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_reg_998 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln141_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_reg_1003 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln140_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prod_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal prod_ce0 : STD_LOGIC;
    signal prod_we0 : STD_LOGIC;
    signal prod_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitNumber_assign_reg_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_0_reg_222 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal x_0_i_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_243 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_0_reg_254 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln134_1_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_3_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln68_4_fu_862_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln133_fu_281_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln130_fu_293_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln133_fu_309_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln133_fu_314_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln134_fu_323_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_367_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_fu_388_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln96_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln2_fu_434_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln96_3_fu_418_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_1_fu_414_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln97_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln3_fu_478_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln97_1_fu_462_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln97_fu_456_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln98_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln98_1_fu_506_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln98_fu_500_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_2_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln5_fu_528_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln98_2_fu_522_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_3_fu_546_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln96_fu_402_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln101_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln101_2_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln101_3_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln101_1_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln101_4_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln68_fu_601_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln68_2_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_5_fu_625_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln68_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln68_fu_639_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln68_1_fu_651_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_629_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln68_2_fu_645_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_fu_657_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_2_fu_673_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln68_2_fu_681_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_1_fu_665_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_6_fu_687_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_7_fu_691_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln68_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln68_1_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln68_1_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln68_fu_717_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln68_1_fu_722_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_fu_726_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln101_fu_590_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln68_fu_713_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln68_1_fu_732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln68_fu_744_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_1_fu_738_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln68_8_fu_762_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln68_3_fu_768_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_3_fu_774_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_5_fu_786_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_4_fu_780_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln68_3_fu_793_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln68_9_fu_765_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_10_fu_799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_2_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_817_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_11_fu_803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_12_fu_807_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_3_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln68_2_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_6_fu_827_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln68_2_fu_846_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_13_fu_859_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component matrix_mul_1_tempeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_1_prod IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_1_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_matrix_U : component matrix_mul_1_tempeOg
    generic map (
        DataWidth => 32,
        AddressRange => 10752,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_matrix_address0,
        ce0 => temp_matrix_ce0,
        q0 => temp_matrix_q0);

    prod_U : component matrix_mul_1_prod
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => prod_address0,
        ce0 => prod_ce0,
        we0 => prod_we0,
        d0 => prod_d0,
        q0 => prod_q0);

    temp_U : component matrix_mul_1_temp
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bitNumber_assign_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                bitNumber_assign_reg_210 <= i_reg_904;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                bitNumber_assign_reg_210 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_i_reg_243 <= i_5_reg_950;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_i_reg_243 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    j_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_222 <= j_reg_917;
            elsif (((icmp_ln128_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_222 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    loop_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                loop_0_reg_254 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                loop_0_reg_254 <= loop_reg_998;
            end if; 
        end if;
    end process;

    x_0_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                x_0_i_reg_233 <= x_1_fu_382_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                x_0_i_reg_233 <= prod_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    add_ln68_reg_976(5 downto 3) <= add_ln68_fu_609_p2(5 downto 3);
                icmp_ln68_1_reg_987 <= icmp_ln68_1_fu_756_p2;
                or_ln68_reg_982 <= or_ln68_fu_750_p2;
                    zext_ln68_cast_reg_971(4 downto 3) <= zext_ln68_cast_fu_594_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                i_5_reg_950 <= i_5_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_904 <= i_fu_275_p2;
                trunc_ln128_reg_896 <= trunc_ln128_fu_265_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_917 <= j_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                loop_reg_998 <= loop_fu_875_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_909(8 downto 2) <= shl_ln_fu_285_p3(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln87_fu_345_p2 = ap_const_lv1_1))) then
                    temp_addr_4_reg_961(1 downto 0) <= zext_ln68_3_fu_377_p1(6 - 1 downto 0)(1 downto 0);
                tmp_7_reg_955 <= bitNumber_assign_reg_210(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln130_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln134_reg_922(2 downto 0) <= zext_ln134_fu_318_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_869_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    zext_ln141_reg_1003(2 downto 0) <= zext_ln141_fu_881_p1(2 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_909(1 downto 0) <= "00";
    zext_ln134_reg_922(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    temp_addr_4_reg_961(5 downto 2) <= "0000";
    zext_ln68_cast_reg_971(2 downto 0) <= "000";
    add_ln68_reg_976(2 downto 0) <= "111";
    zext_ln141_reg_1003(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln128_fu_269_p2, ap_CS_fsm_state3, icmp_ln130_fu_297_p2, ap_CS_fsm_state6, icmp_ln87_fu_345_p2, ap_CS_fsm_state10, icmp_ln140_fu_869_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln128_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln130_fu_297_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln87_fu_345_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln140_fu_869_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln133_fu_309_p2 <= std_logic_vector(unsigned(shl_ln_reg_909) + unsigned(zext_ln130_fu_293_p1));
    add_ln134_fu_323_p2 <= std_logic_vector(unsigned(zext_ln133_fu_314_p1) + unsigned(matrix_offset));
    add_ln68_fu_609_p2 <= std_logic_vector(unsigned(ap_const_lv6_7) + unsigned(zext_ln68_fu_601_p1));
    and_ln68_1_fu_707_p2 <= (lshr_ln68_fu_695_p2 and lshr_ln68_1_fu_701_p2);
    and_ln68_2_fu_846_p2 <= (shl_ln68_3_fu_834_p2 and lshr_ln68_2_fu_840_p2);
    and_ln68_fu_744_p2 <= (xor_ln68_1_fu_732_p2 and trunc_ln68_fu_713_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, icmp_ln140_fu_869_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln140_fu_869_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, icmp_ln140_fu_869_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln140_fu_869_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_5_fu_351_p2 <= std_logic_vector(unsigned(i_0_i_reg_243) + unsigned(ap_const_lv3_1));
    i_fu_275_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(bitNumber_assign_reg_210));
    icmp_ln128_fu_269_p2 <= "1" when (bitNumber_assign_reg_210 = ap_const_lv8_80) else "0";
    icmp_ln130_fu_297_p2 <= "1" when (j_0_reg_222 = ap_const_lv3_4) else "0";
    icmp_ln140_fu_869_p2 <= "1" when (loop_0_reg_254 = ap_const_lv3_4) else "0";
    icmp_ln68_1_fu_756_p2 <= "1" when (unsigned(zext_ln68_2_fu_605_p1) > unsigned(zext_ln68_4_fu_615_p1)) else "0";
    icmp_ln68_fu_619_p2 <= "1" when (unsigned(zext_ln68_2_fu_605_p1) > unsigned(zext_ln68_4_fu_615_p1)) else "0";
    icmp_ln87_fu_345_p2 <= "1" when (i_0_i_reg_243 = ap_const_lv3_4) else "0";
    j_fu_303_p2 <= std_logic_vector(unsigned(j_0_reg_222) + unsigned(ap_const_lv3_1));
    loop_fu_875_p2 <= std_logic_vector(unsigned(loop_0_reg_254) + unsigned(ap_const_lv3_1));
    lshr_ln2_fu_434_p4 <= y_fu_428_p2(31 downto 2);
    lshr_ln3_fu_478_p4 <= y_1_fu_472_p2(31 downto 4);
    lshr_ln68_1_fu_701_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln68_7_fu_691_p1(31-1 downto 0)))));
    lshr_ln68_2_fu_840_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln68_12_fu_807_p1(31-1 downto 0)))));
    lshr_ln68_fu_695_p2 <= std_logic_vector(shift_right(unsigned(select_ln68_1_fu_665_p3),to_integer(unsigned('0' & zext_ln68_6_fu_687_p1(31-1 downto 0)))));
    lshr_ln_fu_388_p4 <= x_0_i_reg_233(31 downto 1);
    or_ln68_fu_750_p2 <= (shl_ln68_1_fu_738_p2 or and_ln68_fu_744_p2);
    output_r_address0 <= zext_ln141_reg_1003(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= temp_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln134_reg_922, ap_CS_fsm_state6, ap_CS_fsm_state4, zext_ln87_fu_340_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            prod_address0 <= zext_ln87_fu_340_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prod_address0 <= zext_ln134_reg_922(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            prod_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            prod_address0 <= "XXXXXX";
        end if; 
    end process;


    prod_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prod_d0 <= (temp_matrix_q0 and state_q0);

    prod_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln68_1_fu_665_p3 <= 
        tmp_9_fu_629_p4 when (icmp_ln68_fu_619_p2(0) = '1') else 
        temp_q0;
    select_ln68_2_fu_673_p3 <= 
        xor_ln68_2_fu_645_p2 when (icmp_ln68_fu_619_p2(0) = '1') else 
        zext_ln68_5_fu_625_p1;
    select_ln68_3_fu_774_p3 <= 
        zext_ln68_8_fu_762_p1 when (icmp_ln68_1_reg_987(0) = '1') else 
        add_ln68_reg_976;
    select_ln68_4_fu_780_p3 <= 
        add_ln68_reg_976 when (icmp_ln68_1_reg_987(0) = '1') else 
        zext_ln68_8_fu_762_p1;
    select_ln68_5_fu_786_p3 <= 
        xor_ln68_3_fu_768_p2 when (icmp_ln68_1_reg_987(0) = '1') else 
        zext_ln68_8_fu_762_p1;
    select_ln68_6_fu_827_p3 <= 
        tmp_10_fu_817_p4 when (icmp_ln68_1_reg_987(0) = '1') else 
        shl_ln68_2_fu_811_p2;
    select_ln68_fu_657_p3 <= 
        sub_ln68_fu_639_p2 when (icmp_ln68_fu_619_p2(0) = '1') else 
        sub_ln68_1_fu_651_p2;
    shl_ln68_1_fu_738_p2 <= std_logic_vector(shift_left(unsigned(zext_ln101_fu_590_p1),to_integer(unsigned('0' & zext_ln68_1_fu_722_p1(8-1 downto 0)))));
    shl_ln68_2_fu_811_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_9_fu_765_p1),to_integer(unsigned('0' & zext_ln68_10_fu_799_p1(31-1 downto 0)))));
    shl_ln68_3_fu_834_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln68_11_fu_803_p1(31-1 downto 0)))));
    shl_ln68_4_fu_862_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln68_13_fu_859_p1(4-1 downto 0)))));
    shl_ln68_fu_726_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln68_1_fu_722_p1(8-1 downto 0)))));
    shl_ln_fu_285_p3 <= (trunc_ln133_fu_281_p1 & ap_const_lv2_0);
    state_address0 <= zext_ln134_fu_318_p1(3 - 1 downto 0);

    state_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln68_1_fu_651_p2 <= std_logic_vector(unsigned(add_ln68_fu_609_p2) - unsigned(zext_ln68_5_fu_625_p1));
    sub_ln68_2_fu_681_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln68_fu_657_p3));
    sub_ln68_3_fu_793_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln68_3_fu_774_p3));
    sub_ln68_fu_639_p2 <= std_logic_vector(unsigned(zext_ln68_5_fu_625_p1) - unsigned(add_ln68_fu_609_p2));

    temp_address0_assign_proc : process(ap_CS_fsm_state6, temp_addr_4_reg_961, ap_CS_fsm_state10, zext_ln141_fu_881_p1, ap_CS_fsm_state9, zext_ln68_3_fu_377_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_address0 <= zext_ln141_fu_881_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_address0 <= temp_addr_4_reg_961;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_address0 <= zext_ln68_3_fu_377_p1(6 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= (select_ln68_6_fu_827_p3 and and_ln68_2_fu_846_p2);
    temp_matrix_address0 <= zext_ln134_1_fu_328_p1(14 - 1 downto 0);

    temp_matrix_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_matrix_ce0 <= ap_const_logic_1;
        else 
            temp_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state9, shl_ln68_4_fu_862_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_we0 <= shl_ln68_4_fu_862_p2;
        else 
            temp_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    
    tmp_10_fu_817_p4_proc : process(shl_ln68_2_fu_811_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_10_fu_817_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln68_2_fu_811_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_10_fu_817_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_10_fu_817_p4_i) := shl_ln68_2_fu_811_p2(32-1-tmp_10_fu_817_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_817_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_2_fu_406_p3 <= x_0_i_reg_233(1 downto 1);
    tmp_3_fu_448_p3 <= y_fu_428_p2(2 downto 2);
    tmp_4_fu_492_p3 <= y_1_fu_472_p2(4 downto 4);
    tmp_5_fu_538_p3 <= y_2_fu_516_p2(8 downto 8);
    tmp_6_fu_552_p3 <= y_3_fu_546_p2(16 downto 16);
    tmp_8_fu_367_p4 <= bitNumber_assign_reg_210(6 downto 5);
    
    tmp_9_fu_629_p4_proc : process(temp_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_9_fu_629_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := temp_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_9_fu_629_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_9_fu_629_p4_i) := temp_q0(32-1-tmp_9_fu_629_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_629_p4 <= resvalue(32-1 downto 0);
    end process;

    trunc_ln128_fu_265_p1 <= bitNumber_assign_reg_210(3 - 1 downto 0);
    trunc_ln133_fu_281_p1 <= bitNumber_assign_reg_210(7 - 1 downto 0);
    trunc_ln5_fu_528_p4 <= y_2_fu_516_p2(31 downto 8);
    trunc_ln68_fu_713_p1 <= and_ln68_1_fu_707_p2(8 - 1 downto 0);
    trunc_ln96_1_fu_414_p1 <= x_0_i_reg_233(24 - 1 downto 0);
    trunc_ln96_3_fu_418_p4 <= x_0_i_reg_233(24 downto 1);
    trunc_ln96_fu_402_p1 <= x_0_i_reg_233(1 - 1 downto 0);
    trunc_ln97_1_fu_462_p4 <= y_fu_428_p2(25 downto 2);
    trunc_ln98_1_fu_506_p4 <= y_1_fu_472_p2(27 downto 4);
    x_1_fu_382_p2 <= (x_0_i_reg_233 xor prod_q0);
    xor_ln101_1_fu_566_p2 <= (xor_ln101_fu_560_p2 xor tmp_2_fu_406_p3);
    xor_ln101_2_fu_572_p2 <= (tmp_6_fu_552_p3 xor tmp_5_fu_538_p3);
    xor_ln101_3_fu_578_p2 <= (xor_ln101_2_fu_572_p2 xor tmp_4_fu_492_p3);
    xor_ln101_4_fu_584_p2 <= (xor_ln101_3_fu_578_p2 xor xor_ln101_1_fu_566_p2);
    xor_ln101_fu_560_p2 <= (trunc_ln96_fu_402_p1 xor tmp_3_fu_448_p3);
    xor_ln68_1_fu_732_p2 <= (shl_ln68_fu_726_p2 xor ap_const_lv8_FF);
    xor_ln68_2_fu_645_p2 <= (zext_ln68_5_fu_625_p1 xor ap_const_lv6_1F);
    xor_ln68_3_fu_768_p2 <= (zext_ln68_8_fu_762_p1 xor ap_const_lv6_1F);
    xor_ln68_fu_717_p2 <= (trunc_ln128_reg_896 xor ap_const_lv3_7);
    xor_ln97_fu_456_p2 <= (trunc_ln96_3_fu_418_p4 xor trunc_ln96_1_fu_414_p1);
    xor_ln98_2_fu_522_p2 <= (xor_ln98_fu_500_p2 xor trunc_ln98_1_fu_506_p4);
    xor_ln98_fu_500_p2 <= (xor_ln97_fu_456_p2 xor trunc_ln97_1_fu_462_p4);
    y_1_fu_472_p2 <= (zext_ln97_fu_444_p1 xor y_fu_428_p2);
    y_2_fu_516_p2 <= (zext_ln98_fu_488_p1 xor y_1_fu_472_p2);
    y_3_fu_546_p2 <= (xor_ln98_2_fu_522_p2 xor trunc_ln5_fu_528_p4);
    y_fu_428_p2 <= (zext_ln96_fu_398_p1 xor x_0_i_reg_233);
    zext_ln101_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln101_4_fu_584_p2),8));
    zext_ln130_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_222),9));
    zext_ln133_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln133_fu_309_p2),14));
    zext_ln134_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_fu_323_p2),64));
    zext_ln134_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_222),64));
    zext_ln141_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_254),64));
    zext_ln68_10_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_5_fu_786_p3),32));
    zext_ln68_11_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_4_fu_780_p3),32));
    zext_ln68_12_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln68_3_fu_793_p2),32));
    zext_ln68_13_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_955),4));
    zext_ln68_1_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln68_fu_717_p2),8));
    zext_ln68_2_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_fu_594_p3),64));
    zext_ln68_3_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_367_p4),64));
    zext_ln68_4_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_609_p2),64));
    zext_ln68_5_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_fu_594_p3),6));
    zext_ln68_6_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_2_fu_673_p3),32));
    zext_ln68_7_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln68_2_fu_681_p2),32));
    zext_ln68_8_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_reg_971),6));
    zext_ln68_9_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln68_reg_982),32));
    zext_ln68_cast_fu_594_p3 <= (tmp_7_reg_955 & ap_const_lv3_0);
    zext_ln68_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_fu_594_p3),6));
    zext_ln87_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_243),64));
    zext_ln96_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_388_p4),32));
    zext_ln97_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_434_p4),32));
    zext_ln98_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_478_p4),32));
end behav;
