// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module randombytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0,
        DRBG_ctx_V_d0,
        DRBG_ctx_V_q0,
        DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0,
        DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] x_address0;
output   x_ce0;
output   x_we0;
output  [7:0] x_d0;
output  [3:0] DRBG_ctx_V_address0;
output   DRBG_ctx_V_ce0;
output   DRBG_ctx_V_we0;
output  [7:0] DRBG_ctx_V_d0;
input  [7:0] DRBG_ctx_V_q0;
output  [4:0] DRBG_ctx_Key_address0;
output   DRBG_ctx_Key_ce0;
output   DRBG_ctx_Key_we0;
output  [7:0] DRBG_ctx_Key_d0;
input  [7:0] DRBG_ctx_Key_q0;
input  [31:0] DRBG_ctx_reseed_counter_i;
output  [31:0] DRBG_ctx_reseed_counter_o;
output   DRBG_ctx_reseed_counter_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_ce0;
reg x_we0;
reg[3:0] DRBG_ctx_V_address0;
reg DRBG_ctx_V_ce0;
reg DRBG_ctx_V_we0;
reg[7:0] DRBG_ctx_V_d0;
reg[4:0] DRBG_ctx_Key_address0;
reg DRBG_ctx_Key_ce0;
reg DRBG_ctx_Key_we0;
reg[31:0] DRBG_ctx_reseed_counter_o;
reg DRBG_ctx_reseed_counter_o_ap_vld;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] DRBG_ctx_V_addr_reg_430;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_284_p3;
wire   [4:0] j_fu_297_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] grp_fu_267_p2;
wire   [4:0] loop_fu_309_p2;
reg   [4:0] loop_reg_446;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln270_fu_315_p1;
reg   [63:0] zext_ln270_reg_451;
wire   [0:0] icmp_ln269_fu_303_p2;
wire   [1:0] i_4_fu_326_p2;
reg   [1:0] i_4_reg_464;
wire    ap_CS_fsm_state8;
reg   [3:0] DRBG_ctx_V_addr_1_reg_472;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_1_fu_336_p3;
wire   [4:0] j_1_fu_349_p2;
wire    ap_CS_fsm_state10;
wire   [5:0] shl_ln_fu_355_p3;
reg   [5:0] shl_ln_reg_485;
wire    ap_CS_fsm_state11;
wire   [5:0] i_fu_370_p2;
reg   [5:0] i_reg_493;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln307_fu_376_p1;
reg   [63:0] zext_ln307_reg_498;
wire   [0:0] icmp_ln306_fu_364_p2;
wire   [4:0] i_1_fu_387_p2;
reg   [4:0] i_1_reg_511;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln308_fu_381_p2;
reg   [3:0] block_address0;
reg    block_ce0;
reg    block_we0;
wire   [7:0] block_q0;
reg   [5:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
wire   [7:0] temp_q0;
wire    grp_AES256_ECB_fu_240_ap_start;
wire    grp_AES256_ECB_fu_240_ap_done;
wire    grp_AES256_ECB_fu_240_ap_idle;
wire    grp_AES256_ECB_fu_240_ap_ready;
wire   [4:0] grp_AES256_ECB_fu_240_key_address0;
wire    grp_AES256_ECB_fu_240_key_ce0;
wire   [3:0] grp_AES256_ECB_fu_240_ctr_address0;
wire    grp_AES256_ECB_fu_240_ctr_ce0;
wire   [5:0] grp_AES256_ECB_fu_240_buffer_r_address0;
wire    grp_AES256_ECB_fu_240_buffer_r_ce0;
wire    grp_AES256_ECB_fu_240_buffer_r_we0;
wire   [7:0] grp_AES256_ECB_fu_240_buffer_r_d0;
wire    grp_AES256_ECB_1_fu_254_ap_start;
wire    grp_AES256_ECB_1_fu_254_ap_done;
wire    grp_AES256_ECB_1_fu_254_ap_idle;
wire    grp_AES256_ECB_1_fu_254_ap_ready;
wire   [4:0] grp_AES256_ECB_1_fu_254_key_address0;
wire    grp_AES256_ECB_1_fu_254_key_ce0;
wire   [3:0] grp_AES256_ECB_1_fu_254_ctr_address0;
wire    grp_AES256_ECB_1_fu_254_ctr_ce0;
wire   [3:0] grp_AES256_ECB_1_fu_254_buffer_r_address0;
wire    grp_AES256_ECB_1_fu_254_buffer_r_ce0;
wire    grp_AES256_ECB_1_fu_254_buffer_r_we0;
wire   [7:0] grp_AES256_ECB_1_fu_254_buffer_r_d0;
reg  signed [4:0] j_0_reg_170;
reg   [4:0] loop_0_reg_182;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
reg   [1:0] i_0_reg_193;
wire    ap_CS_fsm_state12;
reg  signed [4:0] j1_0_reg_205;
wire   [0:0] icmp_ln287_fu_320_p2;
reg   [5:0] i_2_reg_217;
wire    ap_CS_fsm_state14;
reg   [4:0] i_3_reg_228;
wire    ap_CS_fsm_state16;
reg    grp_AES256_ECB_fu_240_ap_start_reg;
reg    grp_AES256_ECB_1_fu_254_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln249_fu_292_p1;
wire   [63:0] zext_ln292_fu_344_p1;
wire   [63:0] zext_ln309_fu_401_p1;
wire   [63:0] zext_ln309_1_fu_422_p1;
wire   [31:0] add_ln310_fu_410_p2;
wire   [7:0] grp_fu_273_p2;
wire  signed [31:0] sext_ln246_fu_280_p1;
wire  signed [31:0] sext_ln290_fu_332_p1;
wire   [5:0] or_ln_fu_393_p3;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_AES256_ECB_fu_240_ap_start_reg = 1'b0;
#0 grp_AES256_ECB_1_fu_254_ap_start_reg = 1'b0;
end

randombytes_block #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
block_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(block_address0),
    .ce0(block_ce0),
    .we0(block_we0),
    .d0(grp_AES256_ECB_1_fu_254_buffer_r_d0),
    .q0(block_q0)
);

randombytes_temp #(
    .DataWidth( 8 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(grp_AES256_ECB_fu_240_buffer_r_d0),
    .q0(temp_q0)
);

AES256_ECB grp_AES256_ECB_fu_240(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES256_ECB_fu_240_ap_start),
    .ap_done(grp_AES256_ECB_fu_240_ap_done),
    .ap_idle(grp_AES256_ECB_fu_240_ap_idle),
    .ap_ready(grp_AES256_ECB_fu_240_ap_ready),
    .key_address0(grp_AES256_ECB_fu_240_key_address0),
    .key_ce0(grp_AES256_ECB_fu_240_key_ce0),
    .key_q0(DRBG_ctx_Key_q0),
    .ctr_address0(grp_AES256_ECB_fu_240_ctr_address0),
    .ctr_ce0(grp_AES256_ECB_fu_240_ctr_ce0),
    .ctr_q0(DRBG_ctx_V_q0),
    .buffer_r_address0(grp_AES256_ECB_fu_240_buffer_r_address0),
    .buffer_r_ce0(grp_AES256_ECB_fu_240_buffer_r_ce0),
    .buffer_r_we0(grp_AES256_ECB_fu_240_buffer_r_we0),
    .buffer_r_d0(grp_AES256_ECB_fu_240_buffer_r_d0),
    .buffer_offset(shl_ln_reg_485)
);

AES256_ECB_1 grp_AES256_ECB_1_fu_254(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES256_ECB_1_fu_254_ap_start),
    .ap_done(grp_AES256_ECB_1_fu_254_ap_done),
    .ap_idle(grp_AES256_ECB_1_fu_254_ap_idle),
    .ap_ready(grp_AES256_ECB_1_fu_254_ap_ready),
    .key_address0(grp_AES256_ECB_1_fu_254_key_address0),
    .key_ce0(grp_AES256_ECB_1_fu_254_key_ce0),
    .key_q0(DRBG_ctx_Key_q0),
    .ctr_address0(grp_AES256_ECB_1_fu_254_ctr_address0),
    .ctr_ce0(grp_AES256_ECB_1_fu_254_ctr_ce0),
    .ctr_q0(DRBG_ctx_V_q0),
    .buffer_r_address0(grp_AES256_ECB_1_fu_254_buffer_r_address0),
    .buffer_r_ce0(grp_AES256_ECB_1_fu_254_buffer_r_ce0),
    .buffer_r_we0(grp_AES256_ECB_1_fu_254_buffer_r_we0),
    .buffer_r_d0(grp_AES256_ECB_1_fu_254_buffer_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AES256_ECB_1_fu_254_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_AES256_ECB_1_fu_254_ap_start_reg <= 1'b1;
        end else if ((grp_AES256_ECB_1_fu_254_ap_ready == 1'b1)) begin
            grp_AES256_ECB_1_fu_254_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AES256_ECB_fu_240_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_AES256_ECB_fu_240_ap_start_reg <= 1'b1;
        end else if ((grp_AES256_ECB_fu_240_ap_ready == 1'b1)) begin
            grp_AES256_ECB_fu_240_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln269_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_0_reg_193 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (grp_AES256_ECB_fu_240_ap_done == 1'b1))) begin
        i_0_reg_193 <= i_4_reg_464;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_fu_320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_2_reg_217 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_2_reg_217 <= i_reg_493;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln306_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        i_3_reg_228 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_3_reg_228 <= i_1_reg_511;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j1_0_reg_205 <= 5'd15;
    end else if (((grp_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        j1_0_reg_205 <= j_1_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_170 <= j_fu_297_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_170 <= 5'd15;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        loop_0_reg_182 <= loop_reg_446;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_AES256_ECB_1_fu_254_ap_done == 1'b1))) begin
        loop_0_reg_182 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_336_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        DRBG_ctx_V_addr_1_reg_472 <= zext_ln292_fu_344_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_284_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        DRBG_ctx_V_addr_reg_430 <= zext_ln249_fu_292_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_1_reg_511 <= i_1_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_4_reg_464 <= i_4_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_reg_493 <= i_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        loop_reg_446 <= loop_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        shl_ln_reg_485[5 : 4] <= shl_ln_fu_355_p3[5 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln269_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln270_reg_451[4 : 0] <= zext_ln270_fu_315_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln306_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        zext_ln307_reg_498[5 : 0] <= zext_ln307_fu_376_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_Key_address0 = zext_ln307_reg_498;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        DRBG_ctx_Key_address0 = grp_AES256_ECB_1_fu_254_key_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_Key_address0 = grp_AES256_ECB_fu_240_key_address0;
    end else begin
        DRBG_ctx_Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_Key_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        DRBG_ctx_Key_ce0 = grp_AES256_ECB_1_fu_254_key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_Key_ce0 = grp_AES256_ECB_fu_240_key_ce0;
    end else begin
        DRBG_ctx_Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DRBG_ctx_Key_we0 = 1'b1;
    end else begin
        DRBG_ctx_Key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        DRBG_ctx_V_address0 = zext_ln309_1_fu_422_p1;
    end else if ((((grp_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((grp_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        DRBG_ctx_V_address0 = DRBG_ctx_V_addr_1_reg_472;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        DRBG_ctx_V_address0 = zext_ln292_fu_344_p1;
    end else if ((((grp_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((grp_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        DRBG_ctx_V_address0 = DRBG_ctx_V_addr_reg_430;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_V_address0 = zext_ln249_fu_292_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        DRBG_ctx_V_address0 = grp_AES256_ECB_1_fu_254_ctr_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_V_address0 = grp_AES256_ECB_fu_240_ctr_address0;
    end else begin
        DRBG_ctx_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state9) | ((grp_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((grp_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((grp_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((grp_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        DRBG_ctx_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        DRBG_ctx_V_ce0 = grp_AES256_ECB_1_fu_254_ctr_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        DRBG_ctx_V_ce0 = grp_AES256_ECB_fu_240_ctr_ce0;
    end else begin
        DRBG_ctx_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        DRBG_ctx_V_d0 = temp_q0;
    end else if ((((grp_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((grp_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        DRBG_ctx_V_d0 = grp_fu_273_p2;
    end else if ((((grp_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((grp_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        DRBG_ctx_V_d0 = 8'd0;
    end else begin
        DRBG_ctx_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((grp_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((grp_fu_267_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((grp_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((grp_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        DRBG_ctx_V_we0 = 1'b1;
    end else begin
        DRBG_ctx_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln308_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        DRBG_ctx_reseed_counter_o = add_ln310_fu_410_p2;
    end else begin
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i;
    end
end

always @ (*) begin
    if (((icmp_ln308_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        DRBG_ctx_reseed_counter_o_ap_vld = 1'b1;
    end else begin
        DRBG_ctx_reseed_counter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln308_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln308_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_address0 = zext_ln270_fu_315_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        block_address0 = grp_AES256_ECB_1_fu_254_buffer_r_address0;
    end else begin
        block_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        block_ce0 = grp_AES256_ECB_1_fu_254_buffer_r_ce0;
    end else begin
        block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_we0 = grp_AES256_ECB_1_fu_254_buffer_r_we0;
    end else begin
        block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        temp_address0 = zext_ln309_fu_401_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        temp_address0 = zext_ln307_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_address0 = grp_AES256_ECB_fu_240_buffer_r_address0;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13))) begin
        temp_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_ce0 = grp_AES256_ECB_fu_240_buffer_r_ce0;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_we0 = grp_AES256_ECB_fu_240_buffer_r_we0;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_284_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_AES256_ECB_1_fu_254_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln269_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln287_fu_320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_1_fu_336_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((grp_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_AES256_ECB_fu_240_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln306_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln308_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DRBG_ctx_Key_d0 = temp_q0;

assign add_ln310_fu_410_p2 = (DRBG_ctx_reseed_counter_i + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_AES256_ECB_1_fu_254_ap_start = grp_AES256_ECB_1_fu_254_ap_start_reg;

assign grp_AES256_ECB_fu_240_ap_start = grp_AES256_ECB_fu_240_ap_start_reg;

assign grp_fu_267_p2 = ((DRBG_ctx_V_q0 == 8'd255) ? 1'b1 : 1'b0);

assign grp_fu_273_p2 = (DRBG_ctx_V_q0 + 8'd1);

assign i_1_fu_387_p2 = (i_3_reg_228 + 5'd1);

assign i_4_fu_326_p2 = (i_0_reg_193 + 2'd1);

assign i_fu_370_p2 = (i_2_reg_217 + 6'd1);

assign icmp_ln269_fu_303_p2 = ((loop_0_reg_182 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_320_p2 = ((i_0_reg_193 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_364_p2 = ((i_2_reg_217 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln308_fu_381_p2 = ((i_3_reg_228 == 5'd16) ? 1'b1 : 1'b0);

assign j_1_fu_349_p2 = ($signed(j1_0_reg_205) + $signed(5'd31));

assign j_fu_297_p2 = ($signed(j_0_reg_170) + $signed(5'd31));

assign loop_fu_309_p2 = (loop_0_reg_182 + 5'd1);

assign or_ln_fu_393_p3 = {{1'd1}, {i_3_reg_228}};

assign sext_ln246_fu_280_p1 = j_0_reg_170;

assign sext_ln290_fu_332_p1 = j1_0_reg_205;

assign shl_ln_fu_355_p3 = {{i_0_reg_193}, {4'd0}};

assign tmp_1_fu_336_p3 = j1_0_reg_205[32'd4];

assign tmp_fu_284_p3 = j_0_reg_170[32'd4];

assign x_address0 = zext_ln270_reg_451;

assign x_d0 = block_q0;

assign zext_ln249_fu_292_p1 = $unsigned(sext_ln246_fu_280_p1);

assign zext_ln270_fu_315_p1 = loop_0_reg_182;

assign zext_ln292_fu_344_p1 = $unsigned(sext_ln290_fu_332_p1);

assign zext_ln307_fu_376_p1 = i_2_reg_217;

assign zext_ln309_1_fu_422_p1 = i_3_reg_228;

assign zext_ln309_fu_401_p1 = or_ln_fu_393_p3;

always @ (posedge ap_clk) begin
    zext_ln270_reg_451[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_485[3:0] <= 4'b0000;
    zext_ln307_reg_498[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //randombytes
