// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Cipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Cipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Cipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<34> Cipher::ap_ST_fsm_state1 = "1";
const sc_lv<34> Cipher::ap_ST_fsm_state2 = "10";
const sc_lv<34> Cipher::ap_ST_fsm_state3 = "100";
const sc_lv<34> Cipher::ap_ST_fsm_state4 = "1000";
const sc_lv<34> Cipher::ap_ST_fsm_state5 = "10000";
const sc_lv<34> Cipher::ap_ST_fsm_state6 = "100000";
const sc_lv<34> Cipher::ap_ST_fsm_state7 = "1000000";
const sc_lv<34> Cipher::ap_ST_fsm_state8 = "10000000";
const sc_lv<34> Cipher::ap_ST_fsm_state9 = "100000000";
const sc_lv<34> Cipher::ap_ST_fsm_state10 = "1000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state11 = "10000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state12 = "100000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<34> Cipher::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_5 = "101";
const sc_lv<32> Cipher::ap_const_lv32_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_10 = "10000";
const sc_lv<32> Cipher::ap_const_lv32_16 = "10110";
const sc_lv<32> Cipher::ap_const_lv32_1B = "11011";
const sc_lv<32> Cipher::ap_const_lv32_6 = "110";
const sc_lv<32> Cipher::ap_const_lv32_17 = "10111";
const sc_lv<32> Cipher::ap_const_lv32_7 = "111";
const sc_lv<32> Cipher::ap_const_lv32_18 = "11000";
const sc_lv<32> Cipher::ap_const_lv32_8 = "1000";
const sc_lv<32> Cipher::ap_const_lv32_19 = "11001";
const sc_lv<32> Cipher::ap_const_lv32_9 = "1001";
const sc_lv<32> Cipher::ap_const_lv32_1A = "11010";
const sc_lv<32> Cipher::ap_const_lv32_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_F = "1111";
const sc_lv<1> Cipher::ap_const_lv1_0 = "0";
const sc_lv<1> Cipher::ap_const_lv1_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_11 = "10001";
const sc_lv<4> Cipher::ap_const_lv4_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_13 = "10011";
const sc_lv<3> Cipher::ap_const_lv3_0 = "000";
const sc_lv<32> Cipher::ap_const_lv32_E = "1110";
const sc_lv<32> Cipher::ap_const_lv32_12 = "10010";
const sc_lv<32> Cipher::ap_const_lv32_20 = "100000";
const sc_lv<6> Cipher::ap_const_lv6_0 = "000000";
const sc_lv<6> Cipher::ap_const_lv6_E = "1110";
const sc_lv<32> Cipher::ap_const_lv32_21 = "100001";
const sc_lv<32> Cipher::ap_const_lv32_2 = "10";
const sc_lv<32> Cipher::ap_const_lv32_3 = "11";
const sc_lv<32> Cipher::ap_const_lv32_14 = "10100";
const sc_lv<64> Cipher::ap_const_lv64_1 = "1";
const sc_lv<64> Cipher::ap_const_lv64_5 = "101";
const sc_lv<64> Cipher::ap_const_lv64_9 = "1001";
const sc_lv<64> Cipher::ap_const_lv64_D = "1101";
const sc_lv<64> Cipher::ap_const_lv64_2 = "10";
const sc_lv<64> Cipher::ap_const_lv64_A = "1010";
const sc_lv<64> Cipher::ap_const_lv64_6 = "110";
const sc_lv<64> Cipher::ap_const_lv64_E = "1110";
const sc_lv<64> Cipher::ap_const_lv64_3 = "11";
const sc_lv<64> Cipher::ap_const_lv64_F = "1111";
const sc_lv<64> Cipher::ap_const_lv64_B = "1011";
const sc_lv<64> Cipher::ap_const_lv64_7 = "111";
const sc_lv<32> Cipher::ap_const_lv32_4 = "100";
const sc_lv<32> Cipher::ap_const_lv32_B = "1011";
const sc_lv<32> Cipher::ap_const_lv32_C = "1100";
const sc_lv<32> Cipher::ap_const_lv32_D = "1101";
const sc_lv<32> Cipher::ap_const_lv32_15 = "10101";
const sc_lv<32> Cipher::ap_const_lv32_1C = "11100";
const sc_lv<32> Cipher::ap_const_lv32_1D = "11101";
const sc_lv<32> Cipher::ap_const_lv32_1E = "11110";
const sc_lv<32> Cipher::ap_const_lv32_1F = "11111";
const sc_lv<4> Cipher::ap_const_lv4_E = "1110";
const sc_lv<3> Cipher::ap_const_lv3_4 = "100";
const sc_lv<3> Cipher::ap_const_lv3_1 = "1";
const sc_lv<2> Cipher::ap_const_lv2_0 = "00";
const sc_lv<5> Cipher::ap_const_lv5_1 = "1";
const sc_lv<59> Cipher::ap_const_lv59_0 = "00000000000000000000000000000000000000000000000000000000000";
const sc_lv<5> Cipher::ap_const_lv5_2 = "10";
const sc_lv<5> Cipher::ap_const_lv5_3 = "11";
const sc_lv<8> Cipher::ap_const_lv8_1 = "1";
const sc_lv<8> Cipher::ap_const_lv8_1B = "11011";
const sc_lv<8> Cipher::ap_const_lv8_0 = "00000000";
const bool Cipher::ap_const_boolean_1 = true;

Cipher::Cipher(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_AddRoundKey_fu_245 = new AddRoundKey("grp_AddRoundKey_fu_245");
    grp_AddRoundKey_fu_245->ap_clk(ap_clk);
    grp_AddRoundKey_fu_245->ap_rst(ap_rst);
    grp_AddRoundKey_fu_245->ap_start(grp_AddRoundKey_fu_245_ap_start);
    grp_AddRoundKey_fu_245->ap_done(grp_AddRoundKey_fu_245_ap_done);
    grp_AddRoundKey_fu_245->ap_idle(grp_AddRoundKey_fu_245_ap_idle);
    grp_AddRoundKey_fu_245->ap_ready(grp_AddRoundKey_fu_245_ap_ready);
    grp_AddRoundKey_fu_245->round(grp_AddRoundKey_fu_245_round);
    grp_AddRoundKey_fu_245->state_address0(grp_AddRoundKey_fu_245_state_address0);
    grp_AddRoundKey_fu_245->state_ce0(grp_AddRoundKey_fu_245_state_ce0);
    grp_AddRoundKey_fu_245->state_we0(grp_AddRoundKey_fu_245_state_we0);
    grp_AddRoundKey_fu_245->state_d0(grp_AddRoundKey_fu_245_state_d0);
    grp_AddRoundKey_fu_245->state_q0(state_q0);
    grp_AddRoundKey_fu_245->RoundKey_address0(grp_AddRoundKey_fu_245_RoundKey_address0);
    grp_AddRoundKey_fu_245->RoundKey_ce0(grp_AddRoundKey_fu_245_RoundKey_ce0);
    grp_AddRoundKey_fu_245->RoundKey_q0(RoundKey_q0);
    grp_SubBytes_fu_256 = new SubBytes("grp_SubBytes_fu_256");
    grp_SubBytes_fu_256->ap_clk(ap_clk);
    grp_SubBytes_fu_256->ap_rst(ap_rst);
    grp_SubBytes_fu_256->ap_start(grp_SubBytes_fu_256_ap_start);
    grp_SubBytes_fu_256->ap_done(grp_SubBytes_fu_256_ap_done);
    grp_SubBytes_fu_256->ap_idle(grp_SubBytes_fu_256_ap_idle);
    grp_SubBytes_fu_256->ap_ready(grp_SubBytes_fu_256_ap_ready);
    grp_SubBytes_fu_256->state_address0(grp_SubBytes_fu_256_state_address0);
    grp_SubBytes_fu_256->state_ce0(grp_SubBytes_fu_256_state_ce0);
    grp_SubBytes_fu_256->state_we0(grp_SubBytes_fu_256_state_we0);
    grp_SubBytes_fu_256->state_d0(grp_SubBytes_fu_256_state_d0);
    grp_SubBytes_fu_256->state_q0(state_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_245_RoundKey_address0 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_245_RoundKey_ce0 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_Tm_1_fu_450_p2);
    sensitive << ( state_q0 );
    sensitive << ( reg_270 );

    SC_METHOD(thread_Tm_2_fu_497_p2);
    sensitive << ( state_q0 );
    sensitive << ( state_q1 );

    SC_METHOD(thread_Tm_3_fu_543_p2);
    sensitive << ( state_q1 );
    sensitive << ( reg_264 );

    SC_METHOD(thread_Tm_fu_391_p2);
    sensitive << ( reg_264 );
    sensitive << ( reg_270 );

    SC_METHOD(thread_Tmp_fu_403_p2);
    sensitive << ( state_q1 );
    sensitive << ( xor_ln328_1_fu_397_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_AddRoundKey_fu_245_ap_done );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_AddRoundKey_fu_245_ap_done );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_grp_AddRoundKey_fu_245_ap_start);
    sensitive << ( grp_AddRoundKey_fu_245_ap_start_reg );

    SC_METHOD(thread_grp_AddRoundKey_fu_245_round);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln441_reg_677 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state34 );

    SC_METHOD(thread_grp_SubBytes_fu_256_ap_start);
    sensitive << ( grp_SubBytes_fu_256_ap_start_reg );

    SC_METHOD(thread_i_fu_318_p2);
    sensitive << ( i_0_i_reg_234 );

    SC_METHOD(thread_icmp_ln325_fu_312_p2);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( i_0_i_reg_234 );

    SC_METHOD(thread_icmp_ln436_fu_306_p2);
    sensitive << ( round_0_reg_222 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_or_ln328_1_fu_363_p2);
    sensitive << ( tmp_reg_661 );

    SC_METHOD(thread_or_ln328_2_fu_377_p2);
    sensitive << ( tmp_reg_661 );

    SC_METHOD(thread_or_ln328_fu_337_p2);
    sensitive << ( tmp_fu_324_p3 );

    SC_METHOD(thread_round_fu_357_p2);
    sensitive << ( round_0_reg_222 );

    SC_METHOD(thread_select_ln317_1_fu_470_p3);
    sensitive << ( tmp_21_fu_462_p3 );

    SC_METHOD(thread_select_ln317_2_fu_517_p3);
    sensitive << ( tmp_22_fu_509_p3 );

    SC_METHOD(thread_select_ln317_3_fu_563_p3);
    sensitive << ( tmp_23_fu_555_p3 );

    SC_METHOD(thread_select_ln317_fu_423_p3);
    sensitive << ( tmp_20_fu_415_p3 );

    SC_METHOD(thread_shl_ln317_1_fu_456_p2);
    sensitive << ( Tm_1_fu_450_p2 );

    SC_METHOD(thread_shl_ln317_2_fu_503_p2);
    sensitive << ( Tm_2_fu_497_p2 );

    SC_METHOD(thread_shl_ln317_3_fu_549_p2);
    sensitive << ( Tm_3_fu_543_p2 );

    SC_METHOD(thread_shl_ln317_fu_409_p2);
    sensitive << ( Tm_fu_391_p2 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln325_fu_312_p2 );
    sensitive << ( state_addr_13_reg_667 );
    sensitive << ( state_addr_15_reg_687 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_AddRoundKey_fu_245_state_address0 );
    sensitive << ( grp_SubBytes_fu_256_state_address0 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( zext_ln327_fu_332_p1 );
    sensitive << ( tmp_1_fu_368_p3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln325_fu_312_p2 );
    sensitive << ( state_addr_14_reg_672 );
    sensitive << ( state_addr_16_reg_692 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_s_fu_343_p3 );
    sensitive << ( tmp_2_fu_382_p3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln325_fu_312_p2 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_AddRoundKey_fu_245_state_ce0 );
    sensitive << ( grp_SubBytes_fu_256_state_ce0 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln325_fu_312_p2 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_state_d0);
    sensitive << ( reg_264 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( reg_276 );
    sensitive << ( reg_281 );
    sensitive << ( reg_291 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( xor_ln331_1_reg_697 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_AddRoundKey_fu_245_state_d0 );
    sensitive << ( grp_SubBytes_fu_256_state_d0 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( xor_ln329_1_fu_443_p2 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_state_d1);
    sensitive << ( state_q0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( reg_270 );
    sensitive << ( reg_286 );
    sensitive << ( reg_296 );
    sensitive << ( reg_301 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( xor_ln332_reg_702 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( xor_ln330_1_fu_490_p2 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_AddRoundKey_fu_245_state_we0 );
    sensitive << ( grp_SubBytes_fu_256_state_we0 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_tmp_1_fu_368_p3);
    sensitive << ( or_ln328_1_fu_363_p2 );

    SC_METHOD(thread_tmp_20_fu_415_p3);
    sensitive << ( Tm_fu_391_p2 );

    SC_METHOD(thread_tmp_21_fu_462_p3);
    sensitive << ( Tm_1_fu_450_p2 );

    SC_METHOD(thread_tmp_22_fu_509_p3);
    sensitive << ( Tm_2_fu_497_p2 );

    SC_METHOD(thread_tmp_23_fu_555_p3);
    sensitive << ( Tm_3_fu_543_p2 );

    SC_METHOD(thread_tmp_2_fu_382_p3);
    sensitive << ( or_ln328_2_fu_377_p2 );

    SC_METHOD(thread_tmp_fu_324_p3);
    sensitive << ( i_0_i_reg_234 );

    SC_METHOD(thread_tmp_s_fu_343_p3);
    sensitive << ( or_ln328_fu_337_p2 );

    SC_METHOD(thread_xor_ln328_1_fu_397_p2);
    sensitive << ( state_q0 );
    sensitive << ( Tm_fu_391_p2 );

    SC_METHOD(thread_xor_ln329_1_fu_443_p2);
    sensitive << ( xor_ln329_2_fu_437_p2 );
    sensitive << ( xor_ln329_fu_431_p2 );

    SC_METHOD(thread_xor_ln329_2_fu_437_p2);
    sensitive << ( shl_ln317_fu_409_p2 );
    sensitive << ( Tmp_fu_403_p2 );

    SC_METHOD(thread_xor_ln329_fu_431_p2);
    sensitive << ( reg_264 );
    sensitive << ( select_ln317_fu_423_p3 );

    SC_METHOD(thread_xor_ln330_1_fu_490_p2);
    sensitive << ( xor_ln330_2_fu_484_p2 );
    sensitive << ( xor_ln330_fu_478_p2 );

    SC_METHOD(thread_xor_ln330_2_fu_484_p2);
    sensitive << ( Tmp_fu_403_p2 );
    sensitive << ( shl_ln317_1_fu_456_p2 );

    SC_METHOD(thread_xor_ln330_fu_478_p2);
    sensitive << ( reg_270 );
    sensitive << ( select_ln317_1_fu_470_p3 );

    SC_METHOD(thread_xor_ln331_1_fu_537_p2);
    sensitive << ( xor_ln331_2_fu_531_p2 );
    sensitive << ( xor_ln331_fu_525_p2 );

    SC_METHOD(thread_xor_ln331_2_fu_531_p2);
    sensitive << ( Tmp_fu_403_p2 );
    sensitive << ( shl_ln317_2_fu_503_p2 );

    SC_METHOD(thread_xor_ln331_fu_525_p2);
    sensitive << ( state_q0 );
    sensitive << ( select_ln317_2_fu_517_p3 );

    SC_METHOD(thread_xor_ln332_2_fu_571_p2);
    sensitive << ( xor_ln328_1_fu_397_p2 );
    sensitive << ( shl_ln317_3_fu_549_p2 );

    SC_METHOD(thread_xor_ln332_fu_577_p2);
    sensitive << ( xor_ln332_2_fu_571_p2 );
    sensitive << ( select_ln317_3_fu_563_p3 );

    SC_METHOD(thread_zext_ln327_fu_332_p1);
    sensitive << ( tmp_fu_324_p3 );

    SC_METHOD(thread_zext_ln441_fu_352_p1);
    sensitive << ( round_0_reg_222 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_245_ap_done );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln325_fu_312_p2 );
    sensitive << ( grp_SubBytes_fu_256_ap_done );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln436_fu_306_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state21 );

    ap_CS_fsm = "0000000000000000000000000000000001";
    grp_AddRoundKey_fu_245_ap_start_reg = SC_LOGIC_0;
    grp_SubBytes_fu_256_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Cipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_264, "reg_264");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, reg_270, "reg_270");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, reg_276, "reg_276");
    sc_trace(mVcdFile, reg_281, "reg_281");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, reg_286, "reg_286");
    sc_trace(mVcdFile, reg_291, "reg_291");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, reg_296, "reg_296");
    sc_trace(mVcdFile, reg_301, "reg_301");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_ap_ready, "grp_AddRoundKey_fu_245_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_ap_done, "grp_AddRoundKey_fu_245_ap_done");
    sc_trace(mVcdFile, i_fu_318_p2, "i_fu_318_p2");
    sc_trace(mVcdFile, i_reg_656, "i_reg_656");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, tmp_fu_324_p3, "tmp_fu_324_p3");
    sc_trace(mVcdFile, tmp_reg_661, "tmp_reg_661");
    sc_trace(mVcdFile, icmp_ln325_fu_312_p2, "icmp_ln325_fu_312_p2");
    sc_trace(mVcdFile, state_addr_13_reg_667, "state_addr_13_reg_667");
    sc_trace(mVcdFile, state_addr_14_reg_672, "state_addr_14_reg_672");
    sc_trace(mVcdFile, zext_ln441_fu_352_p1, "zext_ln441_fu_352_p1");
    sc_trace(mVcdFile, zext_ln441_reg_677, "zext_ln441_reg_677");
    sc_trace(mVcdFile, round_fu_357_p2, "round_fu_357_p2");
    sc_trace(mVcdFile, round_reg_682, "round_reg_682");
    sc_trace(mVcdFile, state_addr_15_reg_687, "state_addr_15_reg_687");
    sc_trace(mVcdFile, state_addr_16_reg_692, "state_addr_16_reg_692");
    sc_trace(mVcdFile, xor_ln331_1_fu_537_p2, "xor_ln331_1_fu_537_p2");
    sc_trace(mVcdFile, xor_ln331_1_reg_697, "xor_ln331_1_reg_697");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, xor_ln332_fu_577_p2, "xor_ln332_fu_577_p2");
    sc_trace(mVcdFile, xor_ln332_reg_702, "xor_ln332_reg_702");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_ap_start, "grp_AddRoundKey_fu_245_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_ap_idle, "grp_AddRoundKey_fu_245_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_round, "grp_AddRoundKey_fu_245_round");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_state_address0, "grp_AddRoundKey_fu_245_state_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_state_ce0, "grp_AddRoundKey_fu_245_state_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_state_we0, "grp_AddRoundKey_fu_245_state_we0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_state_d0, "grp_AddRoundKey_fu_245_state_d0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_RoundKey_address0, "grp_AddRoundKey_fu_245_RoundKey_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_RoundKey_ce0, "grp_AddRoundKey_fu_245_RoundKey_ce0");
    sc_trace(mVcdFile, grp_SubBytes_fu_256_ap_start, "grp_SubBytes_fu_256_ap_start");
    sc_trace(mVcdFile, grp_SubBytes_fu_256_ap_done, "grp_SubBytes_fu_256_ap_done");
    sc_trace(mVcdFile, grp_SubBytes_fu_256_ap_idle, "grp_SubBytes_fu_256_ap_idle");
    sc_trace(mVcdFile, grp_SubBytes_fu_256_ap_ready, "grp_SubBytes_fu_256_ap_ready");
    sc_trace(mVcdFile, grp_SubBytes_fu_256_state_address0, "grp_SubBytes_fu_256_state_address0");
    sc_trace(mVcdFile, grp_SubBytes_fu_256_state_ce0, "grp_SubBytes_fu_256_state_ce0");
    sc_trace(mVcdFile, grp_SubBytes_fu_256_state_we0, "grp_SubBytes_fu_256_state_we0");
    sc_trace(mVcdFile, grp_SubBytes_fu_256_state_d0, "grp_SubBytes_fu_256_state_d0");
    sc_trace(mVcdFile, round_0_reg_222, "round_0_reg_222");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, i_0_i_reg_234, "i_0_i_reg_234");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_245_ap_start_reg, "grp_AddRoundKey_fu_245_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, grp_SubBytes_fu_256_ap_start_reg, "grp_SubBytes_fu_256_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln436_fu_306_p2, "icmp_ln436_fu_306_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, zext_ln327_fu_332_p1, "zext_ln327_fu_332_p1");
    sc_trace(mVcdFile, tmp_s_fu_343_p3, "tmp_s_fu_343_p3");
    sc_trace(mVcdFile, tmp_1_fu_368_p3, "tmp_1_fu_368_p3");
    sc_trace(mVcdFile, tmp_2_fu_382_p3, "tmp_2_fu_382_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, xor_ln329_1_fu_443_p2, "xor_ln329_1_fu_443_p2");
    sc_trace(mVcdFile, xor_ln330_1_fu_490_p2, "xor_ln330_1_fu_490_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, or_ln328_fu_337_p2, "or_ln328_fu_337_p2");
    sc_trace(mVcdFile, or_ln328_1_fu_363_p2, "or_ln328_1_fu_363_p2");
    sc_trace(mVcdFile, or_ln328_2_fu_377_p2, "or_ln328_2_fu_377_p2");
    sc_trace(mVcdFile, Tm_fu_391_p2, "Tm_fu_391_p2");
    sc_trace(mVcdFile, xor_ln328_1_fu_397_p2, "xor_ln328_1_fu_397_p2");
    sc_trace(mVcdFile, tmp_20_fu_415_p3, "tmp_20_fu_415_p3");
    sc_trace(mVcdFile, select_ln317_fu_423_p3, "select_ln317_fu_423_p3");
    sc_trace(mVcdFile, shl_ln317_fu_409_p2, "shl_ln317_fu_409_p2");
    sc_trace(mVcdFile, Tmp_fu_403_p2, "Tmp_fu_403_p2");
    sc_trace(mVcdFile, xor_ln329_2_fu_437_p2, "xor_ln329_2_fu_437_p2");
    sc_trace(mVcdFile, xor_ln329_fu_431_p2, "xor_ln329_fu_431_p2");
    sc_trace(mVcdFile, Tm_1_fu_450_p2, "Tm_1_fu_450_p2");
    sc_trace(mVcdFile, tmp_21_fu_462_p3, "tmp_21_fu_462_p3");
    sc_trace(mVcdFile, select_ln317_1_fu_470_p3, "select_ln317_1_fu_470_p3");
    sc_trace(mVcdFile, shl_ln317_1_fu_456_p2, "shl_ln317_1_fu_456_p2");
    sc_trace(mVcdFile, xor_ln330_2_fu_484_p2, "xor_ln330_2_fu_484_p2");
    sc_trace(mVcdFile, xor_ln330_fu_478_p2, "xor_ln330_fu_478_p2");
    sc_trace(mVcdFile, Tm_2_fu_497_p2, "Tm_2_fu_497_p2");
    sc_trace(mVcdFile, tmp_22_fu_509_p3, "tmp_22_fu_509_p3");
    sc_trace(mVcdFile, select_ln317_2_fu_517_p3, "select_ln317_2_fu_517_p3");
    sc_trace(mVcdFile, shl_ln317_2_fu_503_p2, "shl_ln317_2_fu_503_p2");
    sc_trace(mVcdFile, xor_ln331_2_fu_531_p2, "xor_ln331_2_fu_531_p2");
    sc_trace(mVcdFile, xor_ln331_fu_525_p2, "xor_ln331_fu_525_p2");
    sc_trace(mVcdFile, Tm_3_fu_543_p2, "Tm_3_fu_543_p2");
    sc_trace(mVcdFile, tmp_23_fu_555_p3, "tmp_23_fu_555_p3");
    sc_trace(mVcdFile, shl_ln317_3_fu_549_p2, "shl_ln317_3_fu_549_p2");
    sc_trace(mVcdFile, xor_ln332_2_fu_571_p2, "xor_ln332_2_fu_571_p2");
    sc_trace(mVcdFile, select_ln317_3_fu_563_p3, "select_ln317_3_fu_563_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Cipher::~Cipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_AddRoundKey_fu_245;
    delete grp_SubBytes_fu_256;
}

void Cipher::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AddRoundKey_fu_245_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
              esl_seteq<1,1,1>(icmp_ln325_fu_312_p2.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
            grp_AddRoundKey_fu_245_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_245_ap_ready.read())) {
            grp_AddRoundKey_fu_245_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_SubBytes_fu_256_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln436_fu_306_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln436_fu_306_p2.read())))) {
            grp_SubBytes_fu_256_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_SubBytes_fu_256_ap_ready.read())) {
            grp_SubBytes_fu_256_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        i_0_i_reg_234 = i_reg_656.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        i_0_i_reg_234 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        reg_264 = state_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        reg_264 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        reg_270 = state_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        reg_270 = state_q0.read();
    }
    if (esl_seteq<1,1,1>(grp_AddRoundKey_fu_245_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
            round_0_reg_222 = round_reg_682.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            round_0_reg_222 = ap_const_lv4_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        i_reg_656 = i_fu_318_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        reg_276 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        reg_281 = state_q0.read();
        reg_286 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        reg_291 = state_q0.read();
        reg_296 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        reg_301 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(icmp_ln325_fu_312_p2.read(), ap_const_lv1_1))) {
        round_reg_682 = round_fu_357_p2.read();
        zext_ln441_reg_677 = zext_ln441_fu_352_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(icmp_ln325_fu_312_p2.read(), ap_const_lv1_0))) {
        state_addr_13_reg_667 =  (sc_lv<4>) (zext_ln327_fu_332_p1.read());
        state_addr_14_reg_672 =  (sc_lv<4>) (tmp_s_fu_343_p3.read());
        tmp_reg_661 = tmp_fu_324_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_addr_15_reg_687 =  (sc_lv<4>) (tmp_1_fu_368_p3.read());
        state_addr_16_reg_692 =  (sc_lv<4>) (tmp_2_fu_382_p3.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        xor_ln331_1_reg_697 = xor_ln331_1_fu_537_p2.read();
        xor_ln332_reg_702 = xor_ln332_fu_577_p2.read();
    }
}

void Cipher::thread_RoundKey_address0() {
    RoundKey_address0 = grp_AddRoundKey_fu_245_RoundKey_address0.read();
}

void Cipher::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        RoundKey_ce0 = grp_AddRoundKey_fu_245_RoundKey_ce0.read();
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_Tm_1_fu_450_p2() {
    Tm_1_fu_450_p2 = (state_q0.read() ^ reg_270.read());
}

void Cipher::thread_Tm_2_fu_497_p2() {
    Tm_2_fu_497_p2 = (state_q1.read() ^ state_q0.read());
}

void Cipher::thread_Tm_3_fu_543_p2() {
    Tm_3_fu_543_p2 = (state_q1.read() ^ reg_264.read());
}

void Cipher::thread_Tm_fu_391_p2() {
    Tm_fu_391_p2 = (reg_270.read() ^ reg_264.read());
}

void Cipher::thread_Tmp_fu_403_p2() {
    Tmp_fu_403_p2 = (state_q1.read() ^ xor_ln328_1_fu_397_p2.read());
}

void Cipher::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Cipher::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Cipher::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Cipher::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Cipher::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Cipher::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Cipher::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Cipher::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void Cipher::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void Cipher::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void Cipher::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void Cipher::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Cipher::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void Cipher::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void Cipher::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void Cipher::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void Cipher::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void Cipher::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void Cipher::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void Cipher::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void Cipher::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void Cipher::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void Cipher::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Cipher::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void Cipher::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void Cipher::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void Cipher::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void Cipher::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void Cipher::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Cipher::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Cipher::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Cipher::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Cipher::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Cipher::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Cipher::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_245_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Cipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Cipher::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_245_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Cipher::thread_grp_AddRoundKey_fu_245_ap_start() {
    grp_AddRoundKey_fu_245_ap_start = grp_AddRoundKey_fu_245_ap_start_reg.read();
}

void Cipher::thread_grp_AddRoundKey_fu_245_round() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        grp_AddRoundKey_fu_245_round = ap_const_lv6_E;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_AddRoundKey_fu_245_round = zext_ln441_reg_677.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_245_round = ap_const_lv6_0;
    } else {
        grp_AddRoundKey_fu_245_round = "XXXXXX";
    }
}

void Cipher::thread_grp_SubBytes_fu_256_ap_start() {
    grp_SubBytes_fu_256_ap_start = grp_SubBytes_fu_256_ap_start_reg.read();
}

void Cipher::thread_i_fu_318_p2() {
    i_fu_318_p2 = (!i_0_i_reg_234.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_i_reg_234.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Cipher::thread_icmp_ln325_fu_312_p2() {
    icmp_ln325_fu_312_p2 = (!i_0_i_reg_234.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_234.read() == ap_const_lv3_4);
}

void Cipher::thread_icmp_ln436_fu_306_p2() {
    icmp_ln436_fu_306_p2 = (!round_0_reg_222.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(round_0_reg_222.read() == ap_const_lv4_E);
}

void Cipher::thread_or_ln328_1_fu_363_p2() {
    or_ln328_1_fu_363_p2 = (tmp_reg_661.read() | ap_const_lv5_2);
}

void Cipher::thread_or_ln328_2_fu_377_p2() {
    or_ln328_2_fu_377_p2 = (tmp_reg_661.read() | ap_const_lv5_3);
}

void Cipher::thread_or_ln328_fu_337_p2() {
    or_ln328_fu_337_p2 = (tmp_fu_324_p3.read() | ap_const_lv5_1);
}

void Cipher::thread_round_fu_357_p2() {
    round_fu_357_p2 = (!round_0_reg_222.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(round_0_reg_222.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Cipher::thread_select_ln317_1_fu_470_p3() {
    select_ln317_1_fu_470_p3 = (!tmp_21_fu_462_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_21_fu_462_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_select_ln317_2_fu_517_p3() {
    select_ln317_2_fu_517_p3 = (!tmp_22_fu_509_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_22_fu_509_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_select_ln317_3_fu_563_p3() {
    select_ln317_3_fu_563_p3 = (!tmp_23_fu_555_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_23_fu_555_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_select_ln317_fu_423_p3() {
    select_ln317_fu_423_p3 = (!tmp_20_fu_415_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_20_fu_415_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_shl_ln317_1_fu_456_p2() {
    shl_ln317_1_fu_456_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_1_fu_450_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_shl_ln317_2_fu_503_p2() {
    shl_ln317_2_fu_503_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_2_fu_497_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_shl_ln317_3_fu_549_p2() {
    shl_ln317_3_fu_549_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_3_fu_543_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_shl_ln317_fu_409_p2() {
    shl_ln317_fu_409_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_fu_391_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        state_address0 = state_addr_15_reg_687.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_address0 = state_addr_13_reg_667.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_address0 =  (sc_lv<4>) (tmp_1_fu_368_p3.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                esl_seteq<1,1,1>(icmp_ln325_fu_312_p2.read(), ap_const_lv1_0))) {
        state_address0 =  (sc_lv<4>) (zext_ln327_fu_332_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        state_address0 = grp_SubBytes_fu_256_state_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        state_address0 = grp_AddRoundKey_fu_245_state_address0.read();
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void Cipher::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        state_address1 = state_addr_16_reg_692.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_address1 = state_addr_14_reg_672.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_address1 =  (sc_lv<4>) (tmp_2_fu_382_p3.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                esl_seteq<1,1,1>(icmp_ln325_fu_312_p2.read(), ap_const_lv1_0))) {
        state_address1 =  (sc_lv<4>) (tmp_s_fu_343_p3.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void Cipher::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(icmp_ln325_fu_312_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        state_ce0 = grp_SubBytes_fu_256_state_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        state_ce0 = grp_AddRoundKey_fu_245_state_ce0.read();
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(icmp_ln325_fu_312_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void Cipher::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        state_d0 = xor_ln331_1_reg_697.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_d0 = xor_ln329_1_fu_443_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        state_d0 = reg_291.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        state_d0 = reg_281.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        state_d0 = reg_276.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_d0 = reg_264.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        state_d0 = grp_SubBytes_fu_256_state_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        state_d0 = grp_AddRoundKey_fu_245_state_d0.read();
    } else {
        state_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        state_d1 = xor_ln332_reg_702.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_d1 = xor_ln330_1_fu_490_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        state_d1 = reg_301.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        state_d1 = reg_296.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        state_d1 = reg_286.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_d1 = reg_270.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        state_d1 = state_q0.read();
    } else {
        state_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void Cipher::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_we0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        state_we0 = grp_SubBytes_fu_256_state_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        state_we0 = grp_AddRoundKey_fu_245_state_we0.read();
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void Cipher::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void Cipher::thread_tmp_1_fu_368_p3() {
    tmp_1_fu_368_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln328_1_fu_363_p2.read());
}

void Cipher::thread_tmp_20_fu_415_p3() {
    tmp_20_fu_415_p3 = Tm_fu_391_p2.read().range(7, 7);
}

void Cipher::thread_tmp_21_fu_462_p3() {
    tmp_21_fu_462_p3 = Tm_1_fu_450_p2.read().range(7, 7);
}

void Cipher::thread_tmp_22_fu_509_p3() {
    tmp_22_fu_509_p3 = Tm_2_fu_497_p2.read().range(7, 7);
}

void Cipher::thread_tmp_23_fu_555_p3() {
    tmp_23_fu_555_p3 = Tm_3_fu_543_p2.read().range(7, 7);
}

void Cipher::thread_tmp_2_fu_382_p3() {
    tmp_2_fu_382_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln328_2_fu_377_p2.read());
}

void Cipher::thread_tmp_fu_324_p3() {
    tmp_fu_324_p3 = esl_concat<3,2>(i_0_i_reg_234.read(), ap_const_lv2_0);
}

void Cipher::thread_tmp_s_fu_343_p3() {
    tmp_s_fu_343_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln328_fu_337_p2.read());
}

void Cipher::thread_xor_ln328_1_fu_397_p2() {
    xor_ln328_1_fu_397_p2 = (state_q0.read() ^ Tm_fu_391_p2.read());
}

void Cipher::thread_xor_ln329_1_fu_443_p2() {
    xor_ln329_1_fu_443_p2 = (xor_ln329_2_fu_437_p2.read() ^ xor_ln329_fu_431_p2.read());
}

void Cipher::thread_xor_ln329_2_fu_437_p2() {
    xor_ln329_2_fu_437_p2 = (shl_ln317_fu_409_p2.read() ^ Tmp_fu_403_p2.read());
}

void Cipher::thread_xor_ln329_fu_431_p2() {
    xor_ln329_fu_431_p2 = (reg_264.read() ^ select_ln317_fu_423_p3.read());
}

void Cipher::thread_xor_ln330_1_fu_490_p2() {
    xor_ln330_1_fu_490_p2 = (xor_ln330_2_fu_484_p2.read() ^ xor_ln330_fu_478_p2.read());
}

void Cipher::thread_xor_ln330_2_fu_484_p2() {
    xor_ln330_2_fu_484_p2 = (shl_ln317_1_fu_456_p2.read() ^ Tmp_fu_403_p2.read());
}

void Cipher::thread_xor_ln330_fu_478_p2() {
    xor_ln330_fu_478_p2 = (reg_270.read() ^ select_ln317_1_fu_470_p3.read());
}

void Cipher::thread_xor_ln331_1_fu_537_p2() {
    xor_ln331_1_fu_537_p2 = (xor_ln331_2_fu_531_p2.read() ^ xor_ln331_fu_525_p2.read());
}

void Cipher::thread_xor_ln331_2_fu_531_p2() {
    xor_ln331_2_fu_531_p2 = (shl_ln317_2_fu_503_p2.read() ^ Tmp_fu_403_p2.read());
}

void Cipher::thread_xor_ln331_fu_525_p2() {
    xor_ln331_fu_525_p2 = (state_q0.read() ^ select_ln317_2_fu_517_p3.read());
}

void Cipher::thread_xor_ln332_2_fu_571_p2() {
    xor_ln332_2_fu_571_p2 = (shl_ln317_3_fu_549_p2.read() ^ xor_ln328_1_fu_397_p2.read());
}

void Cipher::thread_xor_ln332_fu_577_p2() {
    xor_ln332_fu_577_p2 = (xor_ln332_2_fu_571_p2.read() ^ select_ln317_3_fu_563_p3.read());
}

void Cipher::thread_zext_ln327_fu_332_p1() {
    zext_ln327_fu_332_p1 = esl_zext<64,5>(tmp_fu_324_p3.read());
}

void Cipher::thread_zext_ln441_fu_352_p1() {
    zext_ln441_fu_352_p1 = esl_zext<6,4>(round_0_reg_222.read());
}

void Cipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_245_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln436_fu_306_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_256_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(icmp_ln325_fu_312_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_245_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_256_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_245_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state34;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<34>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

