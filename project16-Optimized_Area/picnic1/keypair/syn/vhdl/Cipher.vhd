-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Cipher is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Cipher is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal reg_270 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_281 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_286 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_291 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal reg_296 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_301 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_AddRoundKey_fu_245_ap_ready : STD_LOGIC;
    signal grp_AddRoundKey_fu_245_ap_done : STD_LOGIC;
    signal i_fu_318_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_656 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_fu_324_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_661 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln325_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_13_reg_667 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_14_reg_672 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln441_fu_352_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln441_reg_677 : STD_LOGIC_VECTOR (5 downto 0);
    signal round_fu_357_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal round_reg_682 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_15_reg_687 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_16_reg_692 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln331_1_fu_537_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln331_1_reg_697 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal xor_ln332_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln332_reg_702 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_245_ap_start : STD_LOGIC;
    signal grp_AddRoundKey_fu_245_ap_idle : STD_LOGIC;
    signal grp_AddRoundKey_fu_245_round : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_AddRoundKey_fu_245_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AddRoundKey_fu_245_state_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_245_state_we0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_245_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_245_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_245_RoundKey_ce0 : STD_LOGIC;
    signal grp_SubBytes_fu_256_ap_start : STD_LOGIC;
    signal grp_SubBytes_fu_256_ap_done : STD_LOGIC;
    signal grp_SubBytes_fu_256_ap_idle : STD_LOGIC;
    signal grp_SubBytes_fu_256_ap_ready : STD_LOGIC;
    signal grp_SubBytes_fu_256_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_SubBytes_fu_256_state_ce0 : STD_LOGIC;
    signal grp_SubBytes_fu_256_state_we0 : STD_LOGIC;
    signal grp_SubBytes_fu_256_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal round_0_reg_222 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_0_i_reg_234 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_AddRoundKey_fu_245_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_SubBytes_fu_256_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln436_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln327_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_343_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_368_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_382_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal xor_ln329_1_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln330_1_fu_490_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal or_ln328_fu_337_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln328_1_fu_363_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln328_2_fu_377_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal Tm_fu_391_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln328_1_fu_397_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln317_fu_423_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln317_fu_409_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tmp_fu_403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln329_2_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln329_fu_431_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tm_1_fu_450_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln317_1_fu_470_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln317_1_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln330_2_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln330_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tm_2_fu_497_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln317_2_fu_517_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln317_2_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln331_2_fu_531_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln331_fu_525_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tm_3_fu_543_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_555_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln317_3_fu_549_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln332_2_fu_571_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln317_3_fu_563_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);

    component AddRoundKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        round : IN STD_LOGIC_VECTOR (5 downto 0);
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SubBytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_AddRoundKey_fu_245 : component AddRoundKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AddRoundKey_fu_245_ap_start,
        ap_done => grp_AddRoundKey_fu_245_ap_done,
        ap_idle => grp_AddRoundKey_fu_245_ap_idle,
        ap_ready => grp_AddRoundKey_fu_245_ap_ready,
        round => grp_AddRoundKey_fu_245_round,
        state_address0 => grp_AddRoundKey_fu_245_state_address0,
        state_ce0 => grp_AddRoundKey_fu_245_state_ce0,
        state_we0 => grp_AddRoundKey_fu_245_state_we0,
        state_d0 => grp_AddRoundKey_fu_245_state_d0,
        state_q0 => state_q0,
        RoundKey_address0 => grp_AddRoundKey_fu_245_RoundKey_address0,
        RoundKey_ce0 => grp_AddRoundKey_fu_245_RoundKey_ce0,
        RoundKey_q0 => RoundKey_q0);

    grp_SubBytes_fu_256 : component SubBytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_SubBytes_fu_256_ap_start,
        ap_done => grp_SubBytes_fu_256_ap_done,
        ap_idle => grp_SubBytes_fu_256_ap_idle,
        ap_ready => grp_SubBytes_fu_256_ap_ready,
        state_address0 => grp_SubBytes_fu_256_state_address0,
        state_ce0 => grp_SubBytes_fu_256_state_ce0,
        state_we0 => grp_SubBytes_fu_256_state_we0,
        state_d0 => grp_SubBytes_fu_256_state_d0,
        state_q0 => state_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AddRoundKey_fu_245_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AddRoundKey_fu_245_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln325_fu_312_p2 = ap_const_lv1_1)))) then 
                    grp_AddRoundKey_fu_245_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AddRoundKey_fu_245_ap_ready = ap_const_logic_1)) then 
                    grp_AddRoundKey_fu_245_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_SubBytes_fu_256_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SubBytes_fu_256_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln436_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln436_fu_306_p2 = ap_const_lv1_0)))) then 
                    grp_SubBytes_fu_256_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SubBytes_fu_256_ap_ready = ap_const_logic_1)) then 
                    grp_SubBytes_fu_256_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_0_i_reg_234 <= i_reg_656;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_0_i_reg_234 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_264 <= state_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_264 <= state_q1;
            end if; 
        end if;
    end process;

    reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_270 <= state_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                reg_270 <= state_q0;
            end if; 
        end if;
    end process;

    round_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_AddRoundKey_fu_245_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    round_0_reg_222 <= round_reg_682;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    round_0_reg_222 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_reg_656 <= i_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_276 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_281 <= state_q0;
                reg_286 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_291 <= state_q0;
                reg_296 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_301 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln325_fu_312_p2 = ap_const_lv1_1))) then
                round_reg_682 <= round_fu_357_p2;
                    zext_ln441_reg_677(3 downto 0) <= zext_ln441_fu_352_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln325_fu_312_p2 = ap_const_lv1_0))) then
                    state_addr_13_reg_667(3 downto 2) <= zext_ln327_fu_332_p1(4 - 1 downto 0)(3 downto 2);
                    state_addr_14_reg_672(3 downto 2) <= tmp_s_fu_343_p3(4 - 1 downto 0)(3 downto 2);
                    tmp_reg_661(4 downto 2) <= tmp_fu_324_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    state_addr_15_reg_687(3 downto 2) <= tmp_1_fu_368_p3(4 - 1 downto 0)(3 downto 2);
                    state_addr_16_reg_692(3 downto 2) <= tmp_2_fu_382_p3(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                xor_ln331_1_reg_697 <= xor_ln331_1_fu_537_p2;
                xor_ln332_reg_702 <= xor_ln332_fu_577_p2;
            end if;
        end if;
    end process;
    tmp_reg_661(1 downto 0) <= "00";
    state_addr_13_reg_667(1 downto 0) <= "00";
    state_addr_14_reg_672(1 downto 0) <= "01";
    zext_ln441_reg_677(5 downto 4) <= "00";
    state_addr_15_reg_687(1 downto 0) <= "10";
    state_addr_16_reg_692(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_AddRoundKey_fu_245_ap_done, ap_CS_fsm_state16, icmp_ln325_fu_312_p2, grp_SubBytes_fu_256_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state34, ap_CS_fsm_state3, icmp_ln436_fu_306_p2, ap_CS_fsm_state4, ap_CS_fsm_state21)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_AddRoundKey_fu_245_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln436_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_SubBytes_fu_256_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln325_fu_312_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_AddRoundKey_fu_245_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((grp_SubBytes_fu_256_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_AddRoundKey_fu_245_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    RoundKey_address0 <= grp_AddRoundKey_fu_245_RoundKey_address0;

    RoundKey_ce0_assign_proc : process(ap_CS_fsm_state2, grp_AddRoundKey_fu_245_RoundKey_ce0, ap_CS_fsm_state20, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            RoundKey_ce0 <= grp_AddRoundKey_fu_245_RoundKey_ce0;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Tm_1_fu_450_p2 <= (state_q0 xor reg_270);
    Tm_2_fu_497_p2 <= (state_q1 xor state_q0);
    Tm_3_fu_543_p2 <= (state_q1 xor reg_264);
    Tm_fu_391_p2 <= (reg_270 xor reg_264);
    Tmp_fu_403_p2 <= (xor_ln328_1_fu_397_p2 xor state_q1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_AddRoundKey_fu_245_ap_done, ap_CS_fsm_state34)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_AddRoundKey_fu_245_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_AddRoundKey_fu_245_ap_done, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_AddRoundKey_fu_245_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_AddRoundKey_fu_245_ap_start <= grp_AddRoundKey_fu_245_ap_start_reg;

    grp_AddRoundKey_fu_245_round_assign_proc : process(ap_CS_fsm_state2, zext_ln441_reg_677, ap_CS_fsm_state20, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_AddRoundKey_fu_245_round <= ap_const_lv6_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_AddRoundKey_fu_245_round <= zext_ln441_reg_677;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_AddRoundKey_fu_245_round <= ap_const_lv6_0;
        else 
            grp_AddRoundKey_fu_245_round <= "XXXXXX";
        end if; 
    end process;

    grp_SubBytes_fu_256_ap_start <= grp_SubBytes_fu_256_ap_start_reg;
    i_fu_318_p2 <= std_logic_vector(unsigned(i_0_i_reg_234) + unsigned(ap_const_lv3_1));
    icmp_ln325_fu_312_p2 <= "1" when (i_0_i_reg_234 = ap_const_lv3_4) else "0";
    icmp_ln436_fu_306_p2 <= "1" when (round_0_reg_222 = ap_const_lv4_E) else "0";
    or_ln328_1_fu_363_p2 <= (tmp_reg_661 or ap_const_lv5_2);
    or_ln328_2_fu_377_p2 <= (tmp_reg_661 or ap_const_lv5_3);
    or_ln328_fu_337_p2 <= (tmp_fu_324_p3 or ap_const_lv5_1);
    round_fu_357_p2 <= std_logic_vector(unsigned(round_0_reg_222) + unsigned(ap_const_lv4_1));
    select_ln317_1_fu_470_p3 <= 
        ap_const_lv8_1B when (tmp_22_fu_462_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln317_2_fu_517_p3 <= 
        ap_const_lv8_1B when (tmp_23_fu_509_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln317_3_fu_563_p3 <= 
        ap_const_lv8_1B when (tmp_24_fu_555_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln317_fu_423_p3 <= 
        ap_const_lv8_1B when (tmp_21_fu_415_p3(0) = '1') else 
        ap_const_lv8_0;
    shl_ln317_1_fu_456_p2 <= std_logic_vector(shift_left(unsigned(Tm_1_fu_450_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln317_2_fu_503_p2 <= std_logic_vector(shift_left(unsigned(Tm_2_fu_497_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln317_3_fu_549_p2 <= std_logic_vector(shift_left(unsigned(Tm_3_fu_543_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln317_fu_409_p2 <= std_logic_vector(shift_left(unsigned(Tm_fu_391_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));

    state_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state7, ap_CS_fsm_state24, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state2, ap_CS_fsm_state16, icmp_ln325_fu_312_p2, state_addr_13_reg_667, state_addr_15_reg_687, ap_CS_fsm_state18, grp_AddRoundKey_fu_245_state_address0, grp_SubBytes_fu_256_state_address0, ap_CS_fsm_state20, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state34, ap_CS_fsm_state4, ap_CS_fsm_state21, zext_ln327_fu_332_p1, tmp_1_fu_368_p3, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_address0 <= state_addr_15_reg_687;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_address0 <= state_addr_13_reg_667;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_address0 <= tmp_1_fu_368_p3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln325_fu_312_p2 = ap_const_lv1_0))) then 
            state_address0 <= zext_ln327_fu_332_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_address0 <= grp_SubBytes_fu_256_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_address0 <= grp_AddRoundKey_fu_245_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state7, ap_CS_fsm_state24, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state16, icmp_ln325_fu_312_p2, state_addr_14_reg_672, state_addr_16_reg_692, ap_CS_fsm_state18, ap_CS_fsm_state15, ap_CS_fsm_state19, tmp_s_fu_343_p3, tmp_2_fu_382_p3, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_address1 <= state_addr_16_reg_692;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_address1 <= state_addr_14_reg_672;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_address1 <= tmp_2_fu_382_p3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln325_fu_312_p2 = ap_const_lv1_0))) then 
            state_address1 <= tmp_s_fu_343_p3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            state_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            state_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state7, ap_CS_fsm_state24, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state2, ap_CS_fsm_state16, icmp_ln325_fu_312_p2, ap_CS_fsm_state18, grp_AddRoundKey_fu_245_state_ce0, grp_SubBytes_fu_256_state_ce0, ap_CS_fsm_state20, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state34, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln325_fu_312_p2 = ap_const_lv1_0)))) then 
            state_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_ce0 <= grp_SubBytes_fu_256_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_ce0 <= grp_AddRoundKey_fu_245_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state7, ap_CS_fsm_state24, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state26, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state16, icmp_ln325_fu_312_p2, ap_CS_fsm_state18, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln325_fu_312_p2 = ap_const_lv1_0)))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(reg_264, ap_CS_fsm_state11, ap_CS_fsm_state28, reg_276, reg_281, reg_291, ap_CS_fsm_state2, xor_ln331_1_reg_697, ap_CS_fsm_state18, grp_AddRoundKey_fu_245_state_d0, grp_SubBytes_fu_256_state_d0, ap_CS_fsm_state20, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state34, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, xor_ln329_1_fu_443_p2, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_d0 <= xor_ln331_1_reg_697;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_d0 <= xor_ln329_1_fu_443_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_d0 <= reg_291;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_d0 <= reg_281;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_d0 <= reg_276;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_d0 <= reg_264;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_d0 <= grp_SubBytes_fu_256_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_d0 <= grp_AddRoundKey_fu_245_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(state_q0, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state28, reg_270, reg_286, reg_296, reg_301, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state18, xor_ln332_reg_702, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, xor_ln330_1_fu_490_p2, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            state_d1 <= xor_ln332_reg_702;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_d1 <= xor_ln330_1_fu_490_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_d1 <= reg_301;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            state_d1 <= reg_296;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_d1 <= reg_286;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_d1 <= reg_270;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_d1 <= state_q0;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state28, ap_CS_fsm_state2, ap_CS_fsm_state18, grp_AddRoundKey_fu_245_state_we0, grp_SubBytes_fu_256_state_we0, ap_CS_fsm_state20, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state34, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            state_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_we0 <= grp_SubBytes_fu_256_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_we0 <= grp_AddRoundKey_fu_245_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state18, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_368_p3 <= (ap_const_lv59_0 & or_ln328_1_fu_363_p2);
    tmp_21_fu_415_p3 <= Tm_fu_391_p2(7 downto 7);
    tmp_22_fu_462_p3 <= Tm_1_fu_450_p2(7 downto 7);
    tmp_23_fu_509_p3 <= Tm_2_fu_497_p2(7 downto 7);
    tmp_24_fu_555_p3 <= Tm_3_fu_543_p2(7 downto 7);
    tmp_2_fu_382_p3 <= (ap_const_lv59_0 & or_ln328_2_fu_377_p2);
    tmp_fu_324_p3 <= (i_0_i_reg_234 & ap_const_lv2_0);
    tmp_s_fu_343_p3 <= (ap_const_lv59_0 & or_ln328_fu_337_p2);
    xor_ln328_1_fu_397_p2 <= (state_q0 xor Tm_fu_391_p2);
    xor_ln329_1_fu_443_p2 <= (xor_ln329_fu_431_p2 xor xor_ln329_2_fu_437_p2);
    xor_ln329_2_fu_437_p2 <= (shl_ln317_fu_409_p2 xor Tmp_fu_403_p2);
    xor_ln329_fu_431_p2 <= (select_ln317_fu_423_p3 xor reg_264);
    xor_ln330_1_fu_490_p2 <= (xor_ln330_fu_478_p2 xor xor_ln330_2_fu_484_p2);
    xor_ln330_2_fu_484_p2 <= (shl_ln317_1_fu_456_p2 xor Tmp_fu_403_p2);
    xor_ln330_fu_478_p2 <= (select_ln317_1_fu_470_p3 xor reg_270);
    xor_ln331_1_fu_537_p2 <= (xor_ln331_fu_525_p2 xor xor_ln331_2_fu_531_p2);
    xor_ln331_2_fu_531_p2 <= (shl_ln317_2_fu_503_p2 xor Tmp_fu_403_p2);
    xor_ln331_fu_525_p2 <= (state_q0 xor select_ln317_2_fu_517_p3);
    xor_ln332_2_fu_571_p2 <= (xor_ln328_1_fu_397_p2 xor shl_ln317_3_fu_549_p2);
    xor_ln332_fu_577_p2 <= (xor_ln332_2_fu_571_p2 xor select_ln317_3_fu_563_p3);
    zext_ln327_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_324_p3),64));
    zext_ln441_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(round_0_reg_222),6));
end behav;
