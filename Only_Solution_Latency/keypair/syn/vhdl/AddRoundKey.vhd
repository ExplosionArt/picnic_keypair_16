-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    round : IN STD_LOGIC_VECTOR (4 downto 0);
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce1 : OUT STD_LOGIC;
    RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_157 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_173_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_296 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_183_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_301 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln248_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_reg_307 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_1_reg_312 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln_fu_214_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln_reg_317 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_2_reg_333 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_3_reg_338 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_134 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln253_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_202_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_1_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_2_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_245_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_259_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_3_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_4_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln253_3_fu_196_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln253_1_fu_211_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln253_fu_179_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln253_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln253_4_fu_240_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln253_5_fu_254_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln253_1_fu_268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln253_2_fu_278_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_134 <= i_reg_296;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_134 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln_reg_317(7 downto 2) <= add_ln_fu_214_p4(7 downto 2);
                    state_addr_1_reg_312(3 downto 2) <= tmp_1_fu_202_p3(4 - 1 downto 0)(3 downto 2);
                    state_addr_reg_307(3 downto 2) <= zext_ln253_fu_191_p1(4 - 1 downto 0)(3 downto 2);
                    tmp_s_reg_301(4 downto 2) <= tmp_s_fu_183_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_296 <= i_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_157 <= grp_fu_145_p2;
                reg_162 <= grp_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    state_addr_2_reg_333(3 downto 2) <= tmp_2_fu_245_p3(4 - 1 downto 0)(3 downto 2);
                    state_addr_3_reg_338(3 downto 2) <= tmp_3_fu_259_p3(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    tmp_s_reg_301(1 downto 0) <= "00";
    state_addr_reg_307(1 downto 0) <= "00";
    state_addr_1_reg_312(1 downto 0) <= "01";
    add_ln_reg_317(1 downto 0) <= "00";
    state_addr_2_reg_333(1 downto 0) <= "10";
    state_addr_3_reg_338(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln248_fu_167_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln248_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    RoundKey_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln253_1_fu_224_p1, zext_ln253_3_fu_273_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_address0 <= zext_ln253_3_fu_273_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            RoundKey_address0 <= zext_ln253_1_fu_224_p1(8 - 1 downto 0);
        else 
            RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln253_2_fu_235_p1, zext_ln253_4_fu_283_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_address1 <= zext_ln253_4_fu_283_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            RoundKey_address1 <= zext_ln253_2_fu_235_p1(8 - 1 downto 0);
        else 
            RoundKey_address1 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            RoundKey_ce0 <= ap_const_logic_1;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            RoundKey_ce1 <= ap_const_logic_1;
        else 
            RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln_fu_214_p4 <= ((trunc_ln253_1_fu_211_p1 & trunc_ln253_fu_179_p1) & ap_const_lv2_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln248_fu_167_p2)
    begin
        if ((((icmp_ln248_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln248_fu_167_p2)
    begin
        if (((icmp_ln248_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_145_p2 <= (state_q0 xor RoundKey_q0);
    grp_fu_151_p2 <= (state_q1 xor RoundKey_q1);
    i_fu_173_p2 <= std_logic_vector(unsigned(i_0_reg_134) + unsigned(ap_const_lv3_1));
    icmp_ln248_fu_167_p2 <= "1" when (i_0_reg_134 = ap_const_lv3_4) else "0";
    or_ln253_1_fu_268_p2 <= (ap_const_lv8_2 or add_ln_reg_317);
    or_ln253_2_fu_278_p2 <= (ap_const_lv8_3 or add_ln_reg_317);
    or_ln253_3_fu_196_p2 <= (tmp_s_fu_183_p3 or ap_const_lv5_1);
    or_ln253_4_fu_240_p2 <= (tmp_s_reg_301 or ap_const_lv5_2);
    or_ln253_5_fu_254_p2 <= (tmp_s_reg_301 or ap_const_lv5_3);
    or_ln253_fu_229_p2 <= (ap_const_lv8_1 or add_ln_fu_214_p4);

    state_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, state_addr_reg_307, state_addr_2_reg_333, ap_CS_fsm_state5, zext_ln253_fu_191_p1, tmp_2_fu_245_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= state_addr_2_reg_333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= state_addr_reg_307;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= tmp_2_fu_245_p3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= zext_ln253_fu_191_p1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, state_addr_1_reg_312, state_addr_3_reg_338, ap_CS_fsm_state5, tmp_1_fu_202_p3, tmp_3_fu_259_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= state_addr_3_reg_338;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= state_addr_1_reg_312;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= tmp_3_fu_259_p3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= tmp_1_fu_202_p3(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_d0 <= reg_157;
    state_d1 <= reg_162;

    state_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_202_p3 <= (ap_const_lv59_0 & or_ln253_3_fu_196_p2);
    tmp_2_fu_245_p3 <= (ap_const_lv59_0 & or_ln253_4_fu_240_p2);
    tmp_3_fu_259_p3 <= (ap_const_lv59_0 & or_ln253_5_fu_254_p2);
    tmp_s_fu_183_p3 <= (i_0_reg_134 & ap_const_lv2_0);
    trunc_ln253_1_fu_211_p1 <= round(4 - 1 downto 0);
    trunc_ln253_fu_179_p1 <= i_0_reg_134(2 - 1 downto 0);
    zext_ln253_1_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_214_p4),64));
    zext_ln253_2_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln253_fu_229_p2),64));
    zext_ln253_3_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln253_1_fu_268_p2),64));
    zext_ln253_4_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln253_2_fu_278_p2),64));
    zext_ln253_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_183_p3),64));
end behav;
