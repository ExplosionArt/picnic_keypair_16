-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign_keypair is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pk_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_we0 : OUT STD_LOGIC;
    pk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_we1 : OUT STD_LOGIC;
    pk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_we0 : OUT STD_LOGIC;
    sk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_we1 : OUT STD_LOGIC;
    sk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    params : IN STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce0 : OUT STD_LOGIC;
    DRBG_ctx_V_we0 : OUT STD_LOGIC;
    DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce1 : OUT STD_LOGIC;
    DRBG_ctx_V_we1 : OUT STD_LOGIC;
    DRBG_ctx_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
    DRBG_ctx_Key_we0 : OUT STD_LOGIC;
    DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
    DRBG_ctx_Key_we1 : OUT STD_LOGIC;
    DRBG_ctx_Key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_sign_keypair is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_sign_keypair,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.365833,HLS_SYN_LAT=44813,HLS_SYN_TPT=none,HLS_SYN_MEM=92,HLS_SYN_DSP=0,HLS_SYN_FF=5113,HLS_SYN_LUT=24648,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal loop_0_0_i_reg_278 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_1_0_i_reg_289 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_0_i_reg_300 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_picnic_keygen_fu_322_ap_ready : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_ap_done : STD_LOGIC;
    signal secret_params_reg_534 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln66_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln549_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln549_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln553_1_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln553_1_reg_552 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln553_fu_405_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln553_reg_562 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln556_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln556_reg_568 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal or_ln559_fu_434_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln559_reg_577 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln559_fu_445_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal add_ln559_1_fu_451_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln559_1_reg_592 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln632_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln632_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal loop_fu_483_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_reg_601 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal sext_ln632_i_cast_fu_496_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln632_i_cast_reg_607 : STD_LOGIC_VECTOR (5 downto 0);
    signal secret_pk_plaintext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_pk_plaintext_1_reg_628 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state10_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal pubkey_plaintext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pubkey_plaintext_ce0 : STD_LOGIC;
    signal pubkey_plaintext_we0 : STD_LOGIC;
    signal pubkey_plaintext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pubkey_plaintext_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal pubkey_plaintext_ce1 : STD_LOGIC;
    signal pubkey_plaintext_we1 : STD_LOGIC;
    signal pubkey_plaintext_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pubkey_ciphertext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pubkey_ciphertext_ce0 : STD_LOGIC;
    signal pubkey_ciphertext_we0 : STD_LOGIC;
    signal pubkey_ciphertext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pubkey_ciphertext_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal pubkey_ciphertext_ce1 : STD_LOGIC;
    signal pubkey_ciphertext_we1 : STD_LOGIC;
    signal pubkey_ciphertext_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal secret_data_ce0 : STD_LOGIC;
    signal secret_data_we0 : STD_LOGIC;
    signal secret_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_data_ce1 : STD_LOGIC;
    signal secret_data_we1 : STD_LOGIC;
    signal secret_data_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_pk_plaintext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal secret_pk_plaintext_ce0 : STD_LOGIC;
    signal secret_pk_plaintext_we0 : STD_LOGIC;
    signal secret_pk_plaintext_ce1 : STD_LOGIC;
    signal secret_pk_plaintext_we1 : STD_LOGIC;
    signal secret_pk_ciphertext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal secret_pk_ciphertext_ce0 : STD_LOGIC;
    signal secret_pk_ciphertext_we0 : STD_LOGIC;
    signal secret_pk_ciphertext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_pk_ciphertext_ce1 : STD_LOGIC;
    signal secret_pk_ciphertext_we1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_ap_start : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_ap_idle : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_pk_plaintext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_pk_plaintext_ce0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_pk_plaintext_we0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_pk_plaintext_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_pk_plaintext_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_pk_plaintext_ce1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_pk_plaintext_we1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_pk_plaintext_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_pk_ciphertext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_pk_ciphertext_ce0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_pk_ciphertext_we0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_pk_ciphertext_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_pk_ciphertext_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_pk_ciphertext_ce1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_pk_ciphertext_we1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_pk_ciphertext_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_sk_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_sk_data_ce0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_data_we0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_sk_data_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_sk_data_ce1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_data_we1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_data_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_sk_pk_plaintext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_sk_pk_plaintext_ce0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_pk_plaintext_we0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_pk_plaintext_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_sk_pk_plaintext_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_sk_pk_plaintext_ce1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_pk_plaintext_we1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_pk_plaintext_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_sk_pk_ciphertext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_pk_ciphertext_we0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_pk_ciphertext_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_sk_pk_ciphertext_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_pk_ciphertext_we1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_sk_pk_ciphertext_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_DRBG_ctx_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_picnic_keygen_fu_322_DRBG_ctx_V_ce0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_DRBG_ctx_V_we0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_DRBG_ctx_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_DRBG_ctx_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_picnic_keygen_fu_322_DRBG_ctx_V_ce1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_DRBG_ctx_V_we1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_DRBG_ctx_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_DRBG_ctx_Key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_DRBG_ctx_Key_we0 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_DRBG_ctx_Key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_DRBG_ctx_Key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_DRBG_ctx_Key_we1 : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_DRBG_ctx_Key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o_ap_vld : STD_LOGIC;
    signal grp_picnic_keygen_fu_322_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_picnic_keygen_fu_322_ap_return_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_picnic_keygen_fu_322_ap_return_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_loop_0_0_i_phi_fu_282_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_loop_0_i_phi_fu_304_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal UnifiedRetVal_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_picnic_keygen_fu_322_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln553_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln553_2_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln559_2_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_1_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln559_3_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln632_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln637_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln638_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln639_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln545_fu_374_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln627_fu_473_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln549_fu_385_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln553_fu_394_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln556_fu_425_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln556_fu_421_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln559_1_fu_457_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln638_fu_504_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln639_fu_514_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component picnic_keygen IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        parameters : IN STD_LOGIC_VECTOR (3 downto 0);
        pk_plaintext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pk_plaintext_ce0 : OUT STD_LOGIC;
        pk_plaintext_we0 : OUT STD_LOGIC;
        pk_plaintext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pk_plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pk_plaintext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pk_plaintext_ce1 : OUT STD_LOGIC;
        pk_plaintext_we1 : OUT STD_LOGIC;
        pk_plaintext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pk_plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        pk_ciphertext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pk_ciphertext_ce0 : OUT STD_LOGIC;
        pk_ciphertext_we0 : OUT STD_LOGIC;
        pk_ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pk_ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pk_ciphertext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        pk_ciphertext_ce1 : OUT STD_LOGIC;
        pk_ciphertext_we1 : OUT STD_LOGIC;
        pk_ciphertext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pk_ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_data_ce0 : OUT STD_LOGIC;
        sk_data_we0 : OUT STD_LOGIC;
        sk_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sk_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_data_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_data_ce1 : OUT STD_LOGIC;
        sk_data_we1 : OUT STD_LOGIC;
        sk_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sk_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_pk_plaintext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_pk_plaintext_ce0 : OUT STD_LOGIC;
        sk_pk_plaintext_we0 : OUT STD_LOGIC;
        sk_pk_plaintext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sk_pk_plaintext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_pk_plaintext_ce1 : OUT STD_LOGIC;
        sk_pk_plaintext_we1 : OUT STD_LOGIC;
        sk_pk_plaintext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sk_pk_ciphertext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_pk_ciphertext_ce0 : OUT STD_LOGIC;
        sk_pk_ciphertext_we0 : OUT STD_LOGIC;
        sk_pk_ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sk_pk_ciphertext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_pk_ciphertext_ce1 : OUT STD_LOGIC;
        sk_pk_ciphertext_we1 : OUT STD_LOGIC;
        sk_pk_ciphertext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce0 : OUT STD_LOGIC;
        DRBG_ctx_V_we0 : OUT STD_LOGIC;
        DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce1 : OUT STD_LOGIC;
        DRBG_ctx_V_we1 : OUT STD_LOGIC;
        DRBG_ctx_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
        DRBG_ctx_Key_we0 : OUT STD_LOGIC;
        DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
        DRBG_ctx_Key_we1 : OUT STD_LOGIC;
        DRBG_ctx_Key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component crypto_sign_keypahbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_keypakbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    pubkey_plaintext_U : component crypto_sign_keypahbi
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pubkey_plaintext_address0,
        ce0 => pubkey_plaintext_ce0,
        we0 => pubkey_plaintext_we0,
        d0 => grp_picnic_keygen_fu_322_pk_plaintext_d0,
        q0 => pubkey_plaintext_q0,
        address1 => pubkey_plaintext_address1,
        ce1 => pubkey_plaintext_ce1,
        we1 => pubkey_plaintext_we1,
        d1 => grp_picnic_keygen_fu_322_pk_plaintext_d1,
        q1 => pubkey_plaintext_q1);

    pubkey_ciphertext_U : component crypto_sign_keypahbi
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pubkey_ciphertext_address0,
        ce0 => pubkey_ciphertext_ce0,
        we0 => pubkey_ciphertext_we0,
        d0 => grp_picnic_keygen_fu_322_pk_ciphertext_d0,
        q0 => pubkey_ciphertext_q0,
        address1 => pubkey_ciphertext_address1,
        ce1 => pubkey_ciphertext_ce1,
        we1 => pubkey_ciphertext_we1,
        d1 => grp_picnic_keygen_fu_322_pk_ciphertext_d1,
        q1 => pubkey_ciphertext_q1);

    secret_data_U : component crypto_sign_keypahbi
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secret_data_address0,
        ce0 => secret_data_ce0,
        we0 => secret_data_we0,
        d0 => grp_picnic_keygen_fu_322_sk_data_d0,
        q0 => secret_data_q0,
        address1 => grp_picnic_keygen_fu_322_sk_data_address1,
        ce1 => secret_data_ce1,
        we1 => secret_data_we1,
        d1 => grp_picnic_keygen_fu_322_sk_data_d1,
        q1 => secret_data_q1);

    secret_pk_plaintext_U : component crypto_sign_keypakbM
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secret_pk_plaintext_address0,
        ce0 => secret_pk_plaintext_ce0,
        we0 => secret_pk_plaintext_we0,
        d0 => grp_picnic_keygen_fu_322_sk_pk_plaintext_d0,
        q0 => secret_pk_plaintext_q0,
        address1 => grp_picnic_keygen_fu_322_sk_pk_plaintext_address1,
        ce1 => secret_pk_plaintext_ce1,
        we1 => secret_pk_plaintext_we1,
        d1 => grp_picnic_keygen_fu_322_sk_pk_plaintext_d1);

    secret_pk_ciphertext_U : component crypto_sign_keypakbM
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secret_pk_ciphertext_address0,
        ce0 => secret_pk_ciphertext_ce0,
        we0 => secret_pk_ciphertext_we0,
        d0 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_d0,
        q0 => secret_pk_ciphertext_q0,
        address1 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_address1,
        ce1 => secret_pk_ciphertext_ce1,
        we1 => secret_pk_ciphertext_we1,
        d1 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_d1);

    grp_picnic_keygen_fu_322 : component picnic_keygen
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_picnic_keygen_fu_322_ap_start,
        ap_done => grp_picnic_keygen_fu_322_ap_done,
        ap_idle => grp_picnic_keygen_fu_322_ap_idle,
        ap_ready => grp_picnic_keygen_fu_322_ap_ready,
        parameters => params,
        pk_plaintext_address0 => grp_picnic_keygen_fu_322_pk_plaintext_address0,
        pk_plaintext_ce0 => grp_picnic_keygen_fu_322_pk_plaintext_ce0,
        pk_plaintext_we0 => grp_picnic_keygen_fu_322_pk_plaintext_we0,
        pk_plaintext_d0 => grp_picnic_keygen_fu_322_pk_plaintext_d0,
        pk_plaintext_q0 => pubkey_plaintext_q0,
        pk_plaintext_address1 => grp_picnic_keygen_fu_322_pk_plaintext_address1,
        pk_plaintext_ce1 => grp_picnic_keygen_fu_322_pk_plaintext_ce1,
        pk_plaintext_we1 => grp_picnic_keygen_fu_322_pk_plaintext_we1,
        pk_plaintext_d1 => grp_picnic_keygen_fu_322_pk_plaintext_d1,
        pk_plaintext_q1 => pubkey_plaintext_q1,
        pk_ciphertext_address0 => grp_picnic_keygen_fu_322_pk_ciphertext_address0,
        pk_ciphertext_ce0 => grp_picnic_keygen_fu_322_pk_ciphertext_ce0,
        pk_ciphertext_we0 => grp_picnic_keygen_fu_322_pk_ciphertext_we0,
        pk_ciphertext_d0 => grp_picnic_keygen_fu_322_pk_ciphertext_d0,
        pk_ciphertext_q0 => pubkey_ciphertext_q0,
        pk_ciphertext_address1 => grp_picnic_keygen_fu_322_pk_ciphertext_address1,
        pk_ciphertext_ce1 => grp_picnic_keygen_fu_322_pk_ciphertext_ce1,
        pk_ciphertext_we1 => grp_picnic_keygen_fu_322_pk_ciphertext_we1,
        pk_ciphertext_d1 => grp_picnic_keygen_fu_322_pk_ciphertext_d1,
        pk_ciphertext_q1 => pubkey_ciphertext_q1,
        sk_data_address0 => grp_picnic_keygen_fu_322_sk_data_address0,
        sk_data_ce0 => grp_picnic_keygen_fu_322_sk_data_ce0,
        sk_data_we0 => grp_picnic_keygen_fu_322_sk_data_we0,
        sk_data_d0 => grp_picnic_keygen_fu_322_sk_data_d0,
        sk_data_q0 => secret_data_q0,
        sk_data_address1 => grp_picnic_keygen_fu_322_sk_data_address1,
        sk_data_ce1 => grp_picnic_keygen_fu_322_sk_data_ce1,
        sk_data_we1 => grp_picnic_keygen_fu_322_sk_data_we1,
        sk_data_d1 => grp_picnic_keygen_fu_322_sk_data_d1,
        sk_data_q1 => secret_data_q1,
        sk_pk_plaintext_address0 => grp_picnic_keygen_fu_322_sk_pk_plaintext_address0,
        sk_pk_plaintext_ce0 => grp_picnic_keygen_fu_322_sk_pk_plaintext_ce0,
        sk_pk_plaintext_we0 => grp_picnic_keygen_fu_322_sk_pk_plaintext_we0,
        sk_pk_plaintext_d0 => grp_picnic_keygen_fu_322_sk_pk_plaintext_d0,
        sk_pk_plaintext_address1 => grp_picnic_keygen_fu_322_sk_pk_plaintext_address1,
        sk_pk_plaintext_ce1 => grp_picnic_keygen_fu_322_sk_pk_plaintext_ce1,
        sk_pk_plaintext_we1 => grp_picnic_keygen_fu_322_sk_pk_plaintext_we1,
        sk_pk_plaintext_d1 => grp_picnic_keygen_fu_322_sk_pk_plaintext_d1,
        sk_pk_ciphertext_address0 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_address0,
        sk_pk_ciphertext_ce0 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce0,
        sk_pk_ciphertext_we0 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_we0,
        sk_pk_ciphertext_d0 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_d0,
        sk_pk_ciphertext_address1 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_address1,
        sk_pk_ciphertext_ce1 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce1,
        sk_pk_ciphertext_we1 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_we1,
        sk_pk_ciphertext_d1 => grp_picnic_keygen_fu_322_sk_pk_ciphertext_d1,
        DRBG_ctx_V_address0 => grp_picnic_keygen_fu_322_DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0 => grp_picnic_keygen_fu_322_DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0 => grp_picnic_keygen_fu_322_DRBG_ctx_V_we0,
        DRBG_ctx_V_d0 => grp_picnic_keygen_fu_322_DRBG_ctx_V_d0,
        DRBG_ctx_V_q0 => DRBG_ctx_V_q0,
        DRBG_ctx_V_address1 => grp_picnic_keygen_fu_322_DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1 => grp_picnic_keygen_fu_322_DRBG_ctx_V_ce1,
        DRBG_ctx_V_we1 => grp_picnic_keygen_fu_322_DRBG_ctx_V_we1,
        DRBG_ctx_V_d1 => grp_picnic_keygen_fu_322_DRBG_ctx_V_d1,
        DRBG_ctx_V_q1 => DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0 => grp_picnic_keygen_fu_322_DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0 => grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0 => grp_picnic_keygen_fu_322_DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0 => grp_picnic_keygen_fu_322_DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0 => DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1 => grp_picnic_keygen_fu_322_DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1 => grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_we1 => grp_picnic_keygen_fu_322_DRBG_ctx_Key_we1,
        DRBG_ctx_Key_d1 => grp_picnic_keygen_fu_322_DRBG_ctx_Key_d1,
        DRBG_ctx_Key_q1 => DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i => DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o => grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld => grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o_ap_vld,
        ap_return_0 => grp_picnic_keygen_fu_322_ap_return_0,
        ap_return_1 => grp_picnic_keygen_fu_322_ap_return_1,
        ap_return_2 => grp_picnic_keygen_fu_322_ap_return_2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_368_p2 = ap_const_lv1_1) and (grp_picnic_keygen_fu_322_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_368_p2 = ap_const_lv1_1) and (grp_picnic_keygen_fu_322_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_picnic_keygen_fu_322_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_picnic_keygen_fu_322_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_picnic_keygen_fu_322_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_picnic_keygen_fu_322_ap_ready = ap_const_logic_1)) then 
                    grp_picnic_keygen_fu_322_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                UnifiedRetVal_reg_311 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_368_p2 = ap_const_lv1_0) and (grp_picnic_keygen_fu_322_ap_done = ap_const_logic_1))) then 
                UnifiedRetVal_reg_311 <= grp_picnic_keygen_fu_322_ap_return_0;
            end if; 
        end if;
    end process;

    loop_0_0_i_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln549_reg_543 = ap_const_lv1_0))) then 
                loop_0_0_i_reg_278 <= add_ln553_reg_562;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_368_p2 = ap_const_lv1_1) and (grp_picnic_keygen_fu_322_ap_done = ap_const_logic_1))) then 
                loop_0_0_i_reg_278 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    loop_0_i_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln632_reg_597 = ap_const_lv1_0))) then 
                loop_0_i_reg_300 <= loop_reg_601;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                loop_0_i_reg_300 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    loop_1_0_i_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                loop_1_0_i_reg_289 <= ap_const_lv5_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln556_fu_415_p2 = ap_const_lv1_0))) then 
                loop_1_0_i_reg_289 <= add_ln559_fu_445_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln549_fu_379_p2 = ap_const_lv1_0))) then
                add_ln553_reg_562 <= add_ln553_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln556_fu_415_p2 = ap_const_lv1_0))) then
                add_ln559_1_reg_592 <= add_ln559_1_fu_451_p2;
                    or_ln559_reg_577(3 downto 1) <= or_ln559_fu_434_p2(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln549_reg_543 <= icmp_ln549_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln556_reg_568 <= icmp_ln556_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln632_reg_597 <= icmp_ln632_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                loop_reg_601 <= loop_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_picnic_keygen_fu_322_ap_done = ap_const_logic_1))) then
                secret_params_reg_534 <= grp_picnic_keygen_fu_322_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln632_reg_597 = ap_const_lv1_0))) then
                secret_pk_plaintext_1_reg_628 <= secret_pk_plaintext_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln632_fu_477_p2 = ap_const_lv1_0))) then
                    sext_ln632_i_cast_reg_607(4 downto 0) <= sext_ln632_i_cast_fu_496_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln549_fu_379_p2 = ap_const_lv1_0))) then
                    zext_ln553_1_reg_552(3 downto 1) <= zext_ln553_1_fu_400_p1(3 downto 1);
            end if;
        end if;
    end process;
    zext_ln553_1_reg_552(0) <= '1';
    zext_ln553_1_reg_552(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln559_reg_577(0) <= '1';
    sext_ln632_i_cast_reg_607(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_picnic_keygen_fu_322_ap_done, icmp_ln66_fu_368_p2, icmp_ln549_fu_379_p2, ap_enable_reg_pp0_iter0, icmp_ln556_fu_415_p2, ap_enable_reg_pp1_iter0, icmp_ln632_fu_477_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_368_p2 = ap_const_lv1_1) and (grp_picnic_keygen_fu_322_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_368_p2 = ap_const_lv1_0) and (grp_picnic_keygen_fu_322_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln549_fu_379_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln549_fu_379_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln556_fu_415_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln556_fu_415_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln632_fu_477_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln632_fu_477_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    DRBG_ctx_Key_address0 <= grp_picnic_keygen_fu_322_DRBG_ctx_Key_address0;
    DRBG_ctx_Key_address1 <= grp_picnic_keygen_fu_322_DRBG_ctx_Key_address1;
    DRBG_ctx_Key_ce0 <= grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce0;
    DRBG_ctx_Key_ce1 <= grp_picnic_keygen_fu_322_DRBG_ctx_Key_ce1;
    DRBG_ctx_Key_d0 <= grp_picnic_keygen_fu_322_DRBG_ctx_Key_d0;
    DRBG_ctx_Key_d1 <= grp_picnic_keygen_fu_322_DRBG_ctx_Key_d1;
    DRBG_ctx_Key_we0 <= grp_picnic_keygen_fu_322_DRBG_ctx_Key_we0;
    DRBG_ctx_Key_we1 <= grp_picnic_keygen_fu_322_DRBG_ctx_Key_we1;
    DRBG_ctx_V_address0 <= grp_picnic_keygen_fu_322_DRBG_ctx_V_address0;
    DRBG_ctx_V_address1 <= grp_picnic_keygen_fu_322_DRBG_ctx_V_address1;
    DRBG_ctx_V_ce0 <= grp_picnic_keygen_fu_322_DRBG_ctx_V_ce0;
    DRBG_ctx_V_ce1 <= grp_picnic_keygen_fu_322_DRBG_ctx_V_ce1;
    DRBG_ctx_V_d0 <= grp_picnic_keygen_fu_322_DRBG_ctx_V_d0;
    DRBG_ctx_V_d1 <= grp_picnic_keygen_fu_322_DRBG_ctx_V_d1;
    DRBG_ctx_V_we0 <= grp_picnic_keygen_fu_322_DRBG_ctx_V_we0;
    DRBG_ctx_V_we1 <= grp_picnic_keygen_fu_322_DRBG_ctx_V_we1;

    DRBG_ctx_reseed_counter_o_assign_proc : process(DRBG_ctx_reseed_counter_i, ap_CS_fsm_state2, grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o, grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_1))) then 
            DRBG_ctx_reseed_counter_o <= grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o;
        else 
            DRBG_ctx_reseed_counter_o <= DRBG_ctx_reseed_counter_i;
        end if; 
    end process;

    DRBG_ctx_reseed_counter_o_ap_vld <= grp_picnic_keygen_fu_322_DRBG_ctx_reseed_counter_o_ap_vld;
    add_ln553_fu_405_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(ap_phi_mux_loop_0_0_i_phi_fu_282_p4));
    add_ln559_1_fu_451_p2 <= std_logic_vector(unsigned(ap_const_lv6_12) + unsigned(zext_ln556_fu_421_p1));
    add_ln559_fu_445_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(loop_1_0_i_reg_289));
    add_ln638_fu_504_p2 <= std_logic_vector(unsigned(sext_ln632_i_cast_reg_607) + unsigned(ap_const_lv6_11));
    add_ln639_fu_514_p2 <= std_logic_vector(unsigned(sext_ln632_i_cast_reg_607) + unsigned(ap_const_lv6_21));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln549_fu_379_p2)
    begin
        if ((icmp_ln549_fu_379_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln556_fu_415_p2)
    begin
        if ((icmp_ln556_fu_415_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state9_assign_proc : process(icmp_ln632_fu_477_p2)
    begin
        if ((icmp_ln632_fu_477_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_loop_0_0_i_phi_fu_282_p4_assign_proc : process(loop_0_0_i_reg_278, icmp_ln549_reg_543, ap_CS_fsm_pp0_stage0, add_ln553_reg_562, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln549_reg_543 = ap_const_lv1_0))) then 
            ap_phi_mux_loop_0_0_i_phi_fu_282_p4 <= add_ln553_reg_562;
        else 
            ap_phi_mux_loop_0_0_i_phi_fu_282_p4 <= loop_0_0_i_reg_278;
        end if; 
    end process;


    ap_phi_mux_loop_0_i_phi_fu_304_p4_assign_proc : process(loop_0_i_reg_300, icmp_ln632_reg_597, ap_CS_fsm_pp2_stage0, loop_reg_601, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln632_reg_597 = ap_const_lv1_0))) then 
            ap_phi_mux_loop_0_i_phi_fu_304_p4 <= loop_reg_601;
        else 
            ap_phi_mux_loop_0_i_phi_fu_304_p4 <= loop_0_i_reg_300;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= UnifiedRetVal_reg_311;
    grp_picnic_keygen_fu_322_ap_start <= grp_picnic_keygen_fu_322_ap_start_reg;
    icmp_ln549_fu_379_p2 <= "1" when (ap_phi_mux_loop_0_0_i_phi_fu_282_p4 = ap_const_lv5_10) else "0";
    icmp_ln556_fu_415_p2 <= "1" when (loop_1_0_i_reg_289 = ap_const_lv5_10) else "0";
    icmp_ln632_fu_477_p2 <= "1" when (ap_phi_mux_loop_0_i_phi_fu_304_p4 = ap_const_lv5_10) else "0";
    icmp_ln66_fu_368_p2 <= "1" when (grp_picnic_keygen_fu_322_ap_return_0 = ap_const_lv32_0) else "0";
    loop_fu_483_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_0_i_phi_fu_304_p4) + unsigned(ap_const_lv5_1));
    or_ln553_fu_394_p2 <= (trunc_ln549_fu_385_p1 or ap_const_lv4_1);
    or_ln559_1_fu_457_p3 <= (ap_const_lv1_1 & or_ln559_reg_577);
    or_ln559_fu_434_p2 <= (trunc_ln556_fu_425_p1 or ap_const_lv4_1);

    pk_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, zext_ln553_1_reg_552, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln559_3_fu_469_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            pk_address0 <= zext_ln559_3_fu_469_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pk_address0 <= zext_ln553_1_reg_552(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pk_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            pk_address0 <= "XXXXXX";
        end if; 
    end process;


    pk_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, zext_ln553_2_fu_411_p1, ap_block_pp1_stage0, zext_ln559_1_fu_464_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            pk_address1 <= zext_ln559_1_fu_464_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pk_address1 <= zext_ln553_2_fu_411_p1(6 - 1 downto 0);
        else 
            pk_address1 <= "XXXXXX";
        end if; 
    end process;


    pk_ce0_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_ap_done, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_picnic_keygen_fu_322_ap_done = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            pk_ce0 <= ap_const_logic_1;
        else 
            pk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            pk_ce1 <= ap_const_logic_1;
        else 
            pk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pk_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, pubkey_plaintext_q1, pubkey_ciphertext_q0, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln545_fu_374_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            pk_d0 <= pubkey_plaintext_q1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pk_d0 <= pubkey_ciphertext_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pk_d0 <= zext_ln545_fu_374_p1;
        else 
            pk_d0 <= "XXXXXXXX";
        end if; 
    end process;


    pk_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, pubkey_plaintext_q0, pubkey_ciphertext_q1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            pk_d1 <= pubkey_plaintext_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pk_d1 <= pubkey_ciphertext_q1;
        else 
            pk_d1 <= "XXXXXXXX";
        end if; 
    end process;


    pk_we0_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_ap_done, icmp_ln66_fu_368_p2, icmp_ln549_reg_543, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln556_reg_568, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln66_fu_368_p2 = ap_const_lv1_1) and (grp_picnic_keygen_fu_322_ap_done = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln556_reg_568 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln549_reg_543 = ap_const_lv1_0)))) then 
            pk_we0 <= ap_const_logic_1;
        else 
            pk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_we1_assign_proc : process(icmp_ln549_reg_543, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln556_reg_568, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln556_reg_568 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln549_reg_543 = ap_const_lv1_0)))) then 
            pk_we1 <= ap_const_logic_1;
        else 
            pk_we1 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_ciphertext_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_picnic_keygen_fu_322_pk_ciphertext_address0, ap_block_pp0_stage0, zext_ln553_fu_389_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pubkey_ciphertext_address0 <= zext_ln553_fu_389_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_ciphertext_address0 <= grp_picnic_keygen_fu_322_pk_ciphertext_address0;
        else 
            pubkey_ciphertext_address0 <= "XXXXX";
        end if; 
    end process;


    pubkey_ciphertext_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, zext_ln553_1_fu_400_p1, ap_enable_reg_pp0_iter0, grp_picnic_keygen_fu_322_pk_ciphertext_address1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pubkey_ciphertext_address1 <= zext_ln553_1_fu_400_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_ciphertext_address1 <= grp_picnic_keygen_fu_322_pk_ciphertext_address1;
        else 
            pubkey_ciphertext_address1 <= "XXXXX";
        end if; 
    end process;


    pubkey_ciphertext_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_picnic_keygen_fu_322_pk_ciphertext_ce0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            pubkey_ciphertext_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_ciphertext_ce0 <= grp_picnic_keygen_fu_322_pk_ciphertext_ce0;
        else 
            pubkey_ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_ciphertext_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_picnic_keygen_fu_322_pk_ciphertext_ce1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            pubkey_ciphertext_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_ciphertext_ce1 <= grp_picnic_keygen_fu_322_pk_ciphertext_ce1;
        else 
            pubkey_ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_ciphertext_we0_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_pk_ciphertext_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_ciphertext_we0 <= grp_picnic_keygen_fu_322_pk_ciphertext_we0;
        else 
            pubkey_ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_ciphertext_we1_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_pk_ciphertext_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_ciphertext_we1 <= grp_picnic_keygen_fu_322_pk_ciphertext_we1;
        else 
            pubkey_ciphertext_we1 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_plaintext_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_picnic_keygen_fu_322_pk_plaintext_address0, zext_ln559_fu_429_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            pubkey_plaintext_address0 <= zext_ln559_fu_429_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_plaintext_address0 <= grp_picnic_keygen_fu_322_pk_plaintext_address0;
        else 
            pubkey_plaintext_address0 <= "XXXXX";
        end if; 
    end process;


    pubkey_plaintext_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_picnic_keygen_fu_322_pk_plaintext_address1, ap_block_pp1_stage0, zext_ln559_2_fu_440_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            pubkey_plaintext_address1 <= zext_ln559_2_fu_440_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_plaintext_address1 <= grp_picnic_keygen_fu_322_pk_plaintext_address1;
        else 
            pubkey_plaintext_address1 <= "XXXXX";
        end if; 
    end process;


    pubkey_plaintext_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, grp_picnic_keygen_fu_322_pk_plaintext_ce0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            pubkey_plaintext_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_plaintext_ce0 <= grp_picnic_keygen_fu_322_pk_plaintext_ce0;
        else 
            pubkey_plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_plaintext_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, grp_picnic_keygen_fu_322_pk_plaintext_ce1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            pubkey_plaintext_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_plaintext_ce1 <= grp_picnic_keygen_fu_322_pk_plaintext_ce1;
        else 
            pubkey_plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_plaintext_we0_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_pk_plaintext_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_plaintext_we0 <= grp_picnic_keygen_fu_322_pk_plaintext_we0;
        else 
            pubkey_plaintext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pubkey_plaintext_we1_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_pk_plaintext_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pubkey_plaintext_we1 <= grp_picnic_keygen_fu_322_pk_plaintext_we1;
        else 
            pubkey_plaintext_we1 <= ap_const_logic_0;
        end if; 
    end process;


    secret_data_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, grp_picnic_keygen_fu_322_sk_data_address0, ap_block_pp2_stage0, zext_ln632_fu_489_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            secret_data_address0 <= zext_ln632_fu_489_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_data_address0 <= grp_picnic_keygen_fu_322_sk_data_address0;
        else 
            secret_data_address0 <= "XXXXX";
        end if; 
    end process;


    secret_data_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, grp_picnic_keygen_fu_322_sk_data_ce0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            secret_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_data_ce0 <= grp_picnic_keygen_fu_322_sk_data_ce0;
        else 
            secret_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_data_ce1_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_sk_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_data_ce1 <= grp_picnic_keygen_fu_322_sk_data_ce1;
        else 
            secret_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    secret_data_we0_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_sk_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_data_we0 <= grp_picnic_keygen_fu_322_sk_data_we0;
        else 
            secret_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_data_we1_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_sk_data_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_data_we1 <= grp_picnic_keygen_fu_322_sk_data_we1;
        else 
            secret_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_ciphertext_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, grp_picnic_keygen_fu_322_sk_pk_ciphertext_address0, ap_block_pp2_stage0, zext_ln632_fu_489_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            secret_pk_ciphertext_address0 <= zext_ln632_fu_489_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_pk_ciphertext_address0 <= grp_picnic_keygen_fu_322_sk_pk_ciphertext_address0;
        else 
            secret_pk_ciphertext_address0 <= "XXXXX";
        end if; 
    end process;


    secret_pk_ciphertext_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            secret_pk_ciphertext_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_pk_ciphertext_ce0 <= grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce0;
        else 
            secret_pk_ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_ciphertext_ce1_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_pk_ciphertext_ce1 <= grp_picnic_keygen_fu_322_sk_pk_ciphertext_ce1;
        else 
            secret_pk_ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_ciphertext_we0_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_sk_pk_ciphertext_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_pk_ciphertext_we0 <= grp_picnic_keygen_fu_322_sk_pk_ciphertext_we0;
        else 
            secret_pk_ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_ciphertext_we1_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_sk_pk_ciphertext_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_pk_ciphertext_we1 <= grp_picnic_keygen_fu_322_sk_pk_ciphertext_we1;
        else 
            secret_pk_ciphertext_we1 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_plaintext_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, grp_picnic_keygen_fu_322_sk_pk_plaintext_address0, ap_block_pp2_stage0, zext_ln632_fu_489_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            secret_pk_plaintext_address0 <= zext_ln632_fu_489_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_pk_plaintext_address0 <= grp_picnic_keygen_fu_322_sk_pk_plaintext_address0;
        else 
            secret_pk_plaintext_address0 <= "XXXXX";
        end if; 
    end process;


    secret_pk_plaintext_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, grp_picnic_keygen_fu_322_sk_pk_plaintext_ce0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            secret_pk_plaintext_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_pk_plaintext_ce0 <= grp_picnic_keygen_fu_322_sk_pk_plaintext_ce0;
        else 
            secret_pk_plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_plaintext_ce1_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_sk_pk_plaintext_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_pk_plaintext_ce1 <= grp_picnic_keygen_fu_322_sk_pk_plaintext_ce1;
        else 
            secret_pk_plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_plaintext_we0_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_sk_pk_plaintext_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_pk_plaintext_we0 <= grp_picnic_keygen_fu_322_sk_pk_plaintext_we0;
        else 
            secret_pk_plaintext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_plaintext_we1_assign_proc : process(ap_CS_fsm_state2, grp_picnic_keygen_fu_322_sk_pk_plaintext_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secret_pk_plaintext_we1 <= grp_picnic_keygen_fu_322_sk_pk_plaintext_we1;
        else 
            secret_pk_plaintext_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sext_ln632_i_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_0_i_phi_fu_304_p4),6));

    sk_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_state8, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, zext_ln637_fu_500_p1, ap_block_pp2_stage1, zext_ln639_fu_519_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            sk_address0 <= zext_ln639_fu_519_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sk_address0 <= zext_ln637_fu_500_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            sk_address0 <= "XXXXXX";
        end if; 
    end process;

    sk_address1 <= zext_ln638_fu_509_p1(6 - 1 downto 0);

    sk_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_state8, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            sk_ce0 <= ap_const_logic_1;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sk_ce1 <= ap_const_logic_1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_d0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, secret_pk_plaintext_1_reg_628, ap_CS_fsm_pp2_stage1, ap_CS_fsm_state8, ap_enable_reg_pp2_iter1, secret_data_q0, ap_block_pp2_stage0, ap_block_pp2_stage1, zext_ln627_fu_473_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            sk_d0 <= secret_pk_plaintext_1_reg_628;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            sk_d0 <= secret_data_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk_d0 <= zext_ln627_fu_473_p1;
        else 
            sk_d0 <= "XXXXXXXX";
        end if; 
    end process;

    sk_d1 <= secret_pk_ciphertext_q0;

    sk_we0_assign_proc : process(icmp_ln632_reg_597, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_state8, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln632_reg_597 = ap_const_lv1_0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln632_reg_597 = ap_const_lv1_0)))) then 
            sk_we0 <= ap_const_logic_1;
        else 
            sk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_we1_assign_proc : process(icmp_ln632_reg_597, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln632_reg_597 = ap_const_lv1_0))) then 
            sk_we1 <= ap_const_logic_1;
        else 
            sk_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln549_fu_385_p1 <= ap_phi_mux_loop_0_0_i_phi_fu_282_p4(4 - 1 downto 0);
    trunc_ln556_fu_425_p1 <= loop_1_0_i_reg_289(4 - 1 downto 0);
    zext_ln545_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_picnic_keygen_fu_322_ap_return_1),8));
    zext_ln553_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln553_fu_394_p2),64));
    zext_ln553_2_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln553_reg_562),64));
    zext_ln553_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_0_0_i_phi_fu_282_p4),64));
    zext_ln556_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_0_i_reg_289),6));
    zext_ln559_1_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln559_1_fu_457_p3),64));
    zext_ln559_2_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln559_fu_434_p2),64));
    zext_ln559_3_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln559_1_reg_592),64));
    zext_ln559_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_0_i_reg_289),64));
    zext_ln627_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(secret_params_reg_534),8));
    zext_ln632_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_0_i_phi_fu_304_p4),64));
    zext_ln637_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_reg_601),64));
    zext_ln638_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln638_fu_504_p2),64));
    zext_ln639_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln639_fu_514_p2),64));
end behav;
