-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_offset : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of matrix_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal temp_matrix2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal temp_matrix2_ce0 : STD_LOGIC;
    signal temp_matrix2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_matrix2_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal temp_matrix2_ce1 : STD_LOGIC;
    signal temp_matrix2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_0_reg_278 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_0_0_reg_310 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln129_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_1015 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln129_fu_333_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln129_reg_1020 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln133_fu_337_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln133_reg_1025 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_341_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_1030 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln130_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln130_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln134_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_reg_1039 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_1_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_1_reg_1054 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln130_fu_419_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal prod_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln87_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_450_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1087 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_reg_1092 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_addr_10_reg_1098 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_2_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln68_cast_fu_693_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln68_cast_reg_1108 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln68_fu_708_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_reg_1113 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln68_fu_849_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln68_reg_1119 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln68_2_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_reg_1132 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state11_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal zext_ln142_fu_978_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_reg_1136 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_2_fu_989_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_2_reg_1146 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln139_fu_994_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal prod_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal prod_ce0 : STD_LOGIC;
    signal prod_we0 : STD_LOGIC;
    signal prod_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal prod_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal prod_ce1 : STD_LOGIC;
    signal prod_we1 : STD_LOGIC;
    signal prod_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal prod_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_ce1 : STD_LOGIC;
    signal temp_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitNumber_assign_reg_266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal x_0_i_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_299 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln134_7_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_9_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_15_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal shl_ln68_7_fu_961_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln130_fu_359_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln133_fu_363_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln134_6_fu_368_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln134_fu_377_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln130_fu_355_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln130_fu_387_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_1_fu_393_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln134_8_fu_400_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln134_2_fu_409_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_466_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_fu_487_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln95_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln4_fu_533_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln95_6_fu_517_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln95_2_fu_513_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln96_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_4_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln5_fu_577_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln96_2_fu_561_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln96_fu_555_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln97_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln97_2_fu_605_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln97_fu_599_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_5_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_627_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln97_4_fu_621_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_6_fu_645_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln95_fu_501_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln100_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_505_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_637_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_651_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln100_6_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_591_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln100_7_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln100_5_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln100_8_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln68_fu_700_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln68_14_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_16_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_17_fu_724_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln68_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln68_fu_738_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln68_4_fu_750_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_728_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln68_4_fu_744_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_fu_756_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_8_fu_772_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln68_5_fu_780_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_7_fu_764_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_18_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_19_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln68_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln68_3_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln68_4_fu_806_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln68_fu_816_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln68_2_fu_821_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_fu_825_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln100_fu_689_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln68_fu_812_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln68_2_fu_831_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln68_fu_843_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln68_2_fu_837_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln68_20_fu_861_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln68_5_fu_867_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_9_fu_873_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_11_fu_885_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln68_10_fu_879_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln68_6_fu_892_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln68_21_fu_864_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_22_fu_898_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_5_fu_910_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_916_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_23_fu_902_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_24_fu_906_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_6_fu_933_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln68_4_fu_939_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_12_fu_926_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln68_5_fu_945_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_25_fu_958_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln139_fu_974_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln139_fu_983_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component matrix_mul_temp_mfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_1_prod IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_1_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_matrix2_U : component matrix_mul_temp_mfYi
    generic map (
        DataWidth => 32,
        AddressRange => 10240,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_matrix2_address0,
        ce0 => temp_matrix2_ce0,
        q0 => temp_matrix2_q0,
        address1 => temp_matrix2_address1,
        ce1 => temp_matrix2_ce1,
        q1 => temp_matrix2_q1);

    prod_U : component matrix_mul_1_prod
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => prod_address0,
        ce0 => prod_ce0,
        we0 => prod_we0,
        d0 => prod_d0,
        q0 => prod_q0,
        address1 => prod_address1,
        ce1 => prod_ce1,
        we1 => prod_we1,
        d1 => prod_d1,
        q1 => prod_q1);

    temp_U : component matrix_mul_1_temp
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0,
        address1 => temp_address1,
        ce1 => temp_ce1,
        q1 => temp_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln129_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln129_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln129_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln129_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bitNumber_assign_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                bitNumber_assign_reg_266 <= i_reg_1015;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                bitNumber_assign_reg_266 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_i_reg_299 <= i_2_reg_1087;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_reg_299 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    j_0_0_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln130_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_0_0_reg_278 <= add_ln130_fu_419_p2;
            elsif (((icmp_ln129_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_0_reg_278 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    loop_0_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                loop_0_0_reg_310 <= ap_const_lv3_0;
            elsif (((icmp_ln139_fu_968_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                loop_0_0_reg_310 <= add_ln139_fu_994_p2;
            end if; 
        end if;
    end process;

    x_0_i_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                x_0_i_reg_289 <= x_2_fu_481_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                x_0_i_reg_289 <= prod_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    add_ln68_reg_1113(5 downto 3) <= add_ln68_fu_708_p2(5 downto 3);
                icmp_ln68_2_reg_1124 <= icmp_ln68_2_fu_855_p2;
                or_ln68_reg_1119 <= or_ln68_fu_849_p2;
                    zext_ln68_cast_reg_1108(4 downto 3) <= zext_ln68_cast_fu_693_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                i_2_reg_1087 <= i_2_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1015 <= i_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln130_reg_1035 <= icmp_ln130_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln139_reg_1132 <= icmp_ln139_fu_968_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_1030(8 downto 2) <= shl_ln_fu_341_p3(8 downto 2);
                trunc_ln129_reg_1020 <= trunc_ln129_fu_333_p1;
                trunc_ln133_reg_1025 <= trunc_ln133_fu_337_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln87_fu_444_p2 = ap_const_lv1_1))) then
                    temp_addr_10_reg_1098(1 downto 0) <= zext_ln68_15_fu_476_p1(6 - 1 downto 0)(1 downto 0);
                tmp_17_reg_1092 <= bitNumber_assign_reg_266(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln130_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln134_1_reg_1054(1) <= zext_ln134_1_fu_404_p1(1);
                    zext_ln134_reg_1039(2 downto 0) <= zext_ln134_fu_372_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_968_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    zext_ln142_2_reg_1146(1) <= zext_ln142_2_fu_989_p1(1);
                    zext_ln142_reg_1136(2 downto 0) <= zext_ln142_fu_978_p1(2 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_1030(1 downto 0) <= "00";
    zext_ln134_reg_1039(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln134_1_reg_1054(0) <= '1';
    zext_ln134_1_reg_1054(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    temp_addr_10_reg_1098(5 downto 2) <= "0000";
    zext_ln68_cast_reg_1108(2 downto 0) <= "000";
    add_ln68_reg_1113(2 downto 0) <= "111";
    zext_ln142_reg_1136(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln142_2_reg_1146(0) <= '1';
    zext_ln142_2_reg_1146(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln129_fu_321_p2, ap_CS_fsm_state2, icmp_ln130_fu_349_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, icmp_ln87_fu_444_p2, icmp_ln139_fu_968_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln129_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln130_fu_349_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln130_fu_349_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln87_fu_444_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln139_fu_968_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln139_fu_968_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln130_fu_419_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(j_0_0_reg_278));
    add_ln133_1_fu_393_p3 <= (trunc_ln133_reg_1025 & or_ln130_fu_387_p2);
    add_ln133_fu_363_p2 <= std_logic_vector(unsigned(zext_ln130_fu_359_p1) + unsigned(shl_ln_reg_1030));
    add_ln134_2_fu_409_p2 <= std_logic_vector(unsigned(matrix_offset) + unsigned(zext_ln134_8_fu_400_p1));
    add_ln134_fu_377_p2 <= std_logic_vector(unsigned(matrix_offset) + unsigned(zext_ln134_6_fu_368_p1));
    add_ln139_fu_994_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(loop_0_0_reg_310));
    add_ln68_fu_708_p2 <= std_logic_vector(unsigned(ap_const_lv6_7) + unsigned(zext_ln68_fu_700_p1));
    and_ln68_4_fu_806_p2 <= (lshr_ln68_fu_794_p2 and lshr_ln68_3_fu_800_p2);
    and_ln68_5_fu_945_p2 <= (shl_ln68_6_fu_933_p2 and lshr_ln68_4_fu_939_p2);
    and_ln68_fu_843_p2 <= (xor_ln68_2_fu_831_p2 and trunc_ln68_fu_812_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln130_fu_349_p2)
    begin
        if ((icmp_ln130_fu_349_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state11_assign_proc : process(icmp_ln139_fu_968_p2)
    begin
        if ((icmp_ln139_fu_968_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_450_p2 <= std_logic_vector(unsigned(i_0_i_reg_299) + unsigned(ap_const_lv3_1));
    i_fu_327_p2 <= std_logic_vector(unsigned(bitNumber_assign_reg_266) + unsigned(ap_const_lv8_1));
    icmp_ln129_fu_321_p2 <= "1" when (bitNumber_assign_reg_266 = ap_const_lv8_80) else "0";
    icmp_ln130_fu_349_p2 <= "1" when (j_0_0_reg_278 = ap_const_lv3_4) else "0";
    icmp_ln139_fu_968_p2 <= "1" when (loop_0_0_reg_310 = ap_const_lv3_4) else "0";
    icmp_ln68_2_fu_855_p2 <= "1" when (unsigned(zext_ln68_14_fu_704_p1) > unsigned(zext_ln68_16_fu_714_p1)) else "0";
    icmp_ln68_fu_718_p2 <= "1" when (unsigned(zext_ln68_14_fu_704_p1) > unsigned(zext_ln68_16_fu_714_p1)) else "0";
    icmp_ln87_fu_444_p2 <= "1" when (i_0_i_reg_299 = ap_const_lv3_4) else "0";
    lshr_ln4_fu_533_p4 <= y_fu_527_p2(31 downto 2);
    lshr_ln5_fu_577_p4 <= y_4_fu_571_p2(31 downto 4);
    lshr_ln68_3_fu_800_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln68_19_fu_790_p1(31-1 downto 0)))));
    lshr_ln68_4_fu_939_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln68_24_fu_906_p1(31-1 downto 0)))));
    lshr_ln68_fu_794_p2 <= std_logic_vector(shift_right(unsigned(select_ln68_7_fu_764_p3),to_integer(unsigned('0' & zext_ln68_18_fu_786_p1(31-1 downto 0)))));
    lshr_ln_fu_487_p4 <= x_0_i_reg_289(31 downto 1);
    or_ln130_fu_387_p2 <= (trunc_ln130_fu_355_p1 or ap_const_lv2_1);
    or_ln139_fu_983_p2 <= (trunc_ln139_fu_974_p1 or ap_const_lv2_1);
    or_ln68_fu_849_p2 <= (shl_ln68_2_fu_837_p2 or and_ln68_fu_843_p2);

    output_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln134_fu_372_p1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, zext_ln142_reg_1136, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_r_address0 <= zext_ln142_reg_1136(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            output_r_address0 <= zext_ln134_fu_372_p1(3 - 1 downto 0);
        else 
            output_r_address0 <= "XXX";
        end if; 
    end process;


    output_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln134_1_fu_404_p1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, zext_ln142_2_reg_1146, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_r_address1 <= zext_ln142_2_reg_1146(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            output_r_address1 <= zext_ln134_1_fu_404_p1(3 - 1 downto 0);
        else 
            output_r_address1 <= "XXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= temp_q0;
    output_r_d1 <= temp_q1;

    output_r_we0_assign_proc : process(icmp_ln139_reg_1132, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln139_reg_1132 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we1_assign_proc : process(icmp_ln139_reg_1132, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln139_reg_1132 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    prod_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln134_reg_1039, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            prod_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            prod_address0 <= zext_ln134_reg_1039(6 - 1 downto 0);
        else 
            prod_address0 <= "XXXXXX";
        end if; 
    end process;


    prod_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln134_1_reg_1054, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln87_fu_439_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            prod_address1 <= zext_ln87_fu_439_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            prod_address1 <= zext_ln134_1_reg_1054(6 - 1 downto 0);
        else 
            prod_address1 <= "XXXXXX";
        end if; 
    end process;


    prod_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            prod_ce1 <= ap_const_logic_1;
        else 
            prod_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    prod_d0 <= (temp_matrix2_q0 and output_r_q0);
    prod_d1 <= (temp_matrix2_q1 and output_r_q1);

    prod_we0_assign_proc : process(icmp_ln130_reg_1035, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln130_reg_1035 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_we1_assign_proc : process(icmp_ln130_reg_1035, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln130_reg_1035 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            prod_we1 <= ap_const_logic_1;
        else 
            prod_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln68_10_fu_879_p3 <= 
        add_ln68_reg_1113 when (icmp_ln68_2_reg_1124(0) = '1') else 
        zext_ln68_20_fu_861_p1;
    select_ln68_11_fu_885_p3 <= 
        xor_ln68_5_fu_867_p2 when (icmp_ln68_2_reg_1124(0) = '1') else 
        zext_ln68_20_fu_861_p1;
    select_ln68_12_fu_926_p3 <= 
        tmp_20_fu_916_p4 when (icmp_ln68_2_reg_1124(0) = '1') else 
        shl_ln68_5_fu_910_p2;
    select_ln68_7_fu_764_p3 <= 
        tmp_19_fu_728_p4 when (icmp_ln68_fu_718_p2(0) = '1') else 
        temp_q0;
    select_ln68_8_fu_772_p3 <= 
        xor_ln68_4_fu_744_p2 when (icmp_ln68_fu_718_p2(0) = '1') else 
        zext_ln68_17_fu_724_p1;
    select_ln68_9_fu_873_p3 <= 
        zext_ln68_20_fu_861_p1 when (icmp_ln68_2_reg_1124(0) = '1') else 
        add_ln68_reg_1113;
    select_ln68_fu_756_p3 <= 
        sub_ln68_fu_738_p2 when (icmp_ln68_fu_718_p2(0) = '1') else 
        sub_ln68_4_fu_750_p2;
    shl_ln68_2_fu_837_p2 <= std_logic_vector(shift_left(unsigned(zext_ln100_fu_689_p1),to_integer(unsigned('0' & zext_ln68_2_fu_821_p1(8-1 downto 0)))));
    shl_ln68_5_fu_910_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_21_fu_864_p1),to_integer(unsigned('0' & zext_ln68_22_fu_898_p1(31-1 downto 0)))));
    shl_ln68_6_fu_933_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln68_23_fu_902_p1(31-1 downto 0)))));
    shl_ln68_7_fu_961_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln68_25_fu_958_p1(4-1 downto 0)))));
    shl_ln68_fu_825_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln68_2_fu_821_p1(8-1 downto 0)))));
    shl_ln_fu_341_p3 <= (trunc_ln133_fu_337_p1 & ap_const_lv2_0);
    sub_ln68_4_fu_750_p2 <= std_logic_vector(unsigned(add_ln68_fu_708_p2) - unsigned(zext_ln68_17_fu_724_p1));
    sub_ln68_5_fu_780_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln68_fu_756_p3));
    sub_ln68_6_fu_892_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln68_9_fu_873_p3));
    sub_ln68_fu_738_p2 <= std_logic_vector(unsigned(zext_ln68_17_fu_724_p1) - unsigned(add_ln68_fu_708_p2));

    temp_address0_assign_proc : process(ap_CS_fsm_state7, temp_addr_10_reg_1098, ap_CS_fsm_pp1_stage0, zext_ln142_fu_978_p1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10, zext_ln68_15_fu_476_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            temp_address0 <= zext_ln142_fu_978_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_address0 <= temp_addr_10_reg_1098;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address0 <= zext_ln68_15_fu_476_p1(6 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXX";
        end if; 
    end process;

    temp_address1 <= zext_ln142_2_fu_989_p1(6 - 1 downto 0);

    temp_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            temp_ce1 <= ap_const_logic_1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= (select_ln68_12_fu_926_p3 and and_ln68_5_fu_945_p2);
    temp_matrix2_address0 <= zext_ln134_7_fu_382_p1(14 - 1 downto 0);
    temp_matrix2_address1 <= zext_ln134_9_fu_414_p1(14 - 1 downto 0);

    temp_matrix2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            temp_matrix2_ce0 <= ap_const_logic_1;
        else 
            temp_matrix2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_matrix2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            temp_matrix2_ce1 <= ap_const_logic_1;
        else 
            temp_matrix2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state10, shl_ln68_7_fu_961_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_we0 <= shl_ln68_7_fu_961_p2;
        else 
            temp_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    tmp_12_fu_505_p3 <= x_0_i_reg_289(1 downto 1);
    tmp_13_fu_547_p3 <= y_fu_527_p2(2 downto 2);
    tmp_14_fu_591_p3 <= y_4_fu_571_p2(4 downto 4);
    tmp_15_fu_637_p3 <= y_5_fu_615_p2(8 downto 8);
    tmp_16_fu_651_p3 <= y_6_fu_645_p2(16 downto 16);
    tmp_18_fu_466_p4 <= bitNumber_assign_reg_266(6 downto 5);
    
    tmp_19_fu_728_p4_proc : process(temp_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_19_fu_728_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := temp_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_19_fu_728_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_19_fu_728_p4_i) := temp_q0(32-1-tmp_19_fu_728_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_19_fu_728_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_20_fu_916_p4_proc : process(shl_ln68_5_fu_910_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_20_fu_916_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln68_5_fu_910_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_20_fu_916_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_20_fu_916_p4_i) := shl_ln68_5_fu_910_p2(32-1-tmp_20_fu_916_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_20_fu_916_p4 <= resvalue(32-1 downto 0);
    end process;

    trunc_ln129_fu_333_p1 <= bitNumber_assign_reg_266(3 - 1 downto 0);
    trunc_ln130_fu_355_p1 <= j_0_0_reg_278(2 - 1 downto 0);
    trunc_ln133_fu_337_p1 <= bitNumber_assign_reg_266(7 - 1 downto 0);
    trunc_ln139_fu_974_p1 <= loop_0_0_reg_310(2 - 1 downto 0);
    trunc_ln68_fu_812_p1 <= and_ln68_4_fu_806_p2(8 - 1 downto 0);
    trunc_ln95_2_fu_513_p1 <= x_0_i_reg_289(24 - 1 downto 0);
    trunc_ln95_6_fu_517_p4 <= x_0_i_reg_289(24 downto 1);
    trunc_ln95_fu_501_p1 <= x_0_i_reg_289(1 - 1 downto 0);
    trunc_ln96_2_fu_561_p4 <= y_fu_527_p2(25 downto 2);
    trunc_ln97_2_fu_605_p4 <= y_4_fu_571_p2(27 downto 4);
    trunc_ln_fu_627_p4 <= y_5_fu_615_p2(31 downto 8);
    x_2_fu_481_p2 <= (x_0_i_reg_289 xor prod_q1);
    xor_ln100_5_fu_665_p2 <= (xor_ln100_fu_659_p2 xor tmp_12_fu_505_p3);
    xor_ln100_6_fu_671_p2 <= (tmp_16_fu_651_p3 xor tmp_15_fu_637_p3);
    xor_ln100_7_fu_677_p2 <= (xor_ln100_6_fu_671_p2 xor tmp_14_fu_591_p3);
    xor_ln100_8_fu_683_p2 <= (xor_ln100_7_fu_677_p2 xor xor_ln100_5_fu_665_p2);
    xor_ln100_fu_659_p2 <= (trunc_ln95_fu_501_p1 xor tmp_13_fu_547_p3);
    xor_ln68_2_fu_831_p2 <= (shl_ln68_fu_825_p2 xor ap_const_lv8_FF);
    xor_ln68_4_fu_744_p2 <= (zext_ln68_17_fu_724_p1 xor ap_const_lv6_1F);
    xor_ln68_5_fu_867_p2 <= (zext_ln68_20_fu_861_p1 xor ap_const_lv6_1F);
    xor_ln68_fu_816_p2 <= (trunc_ln129_reg_1020 xor ap_const_lv3_7);
    xor_ln96_fu_555_p2 <= (trunc_ln95_6_fu_517_p4 xor trunc_ln95_2_fu_513_p1);
    xor_ln97_4_fu_621_p2 <= (xor_ln97_fu_599_p2 xor trunc_ln97_2_fu_605_p4);
    xor_ln97_fu_599_p2 <= (xor_ln96_fu_555_p2 xor trunc_ln96_2_fu_561_p4);
    y_4_fu_571_p2 <= (zext_ln96_fu_543_p1 xor y_fu_527_p2);
    y_5_fu_615_p2 <= (zext_ln97_fu_587_p1 xor y_4_fu_571_p2);
    y_6_fu_645_p2 <= (xor_ln97_4_fu_621_p2 xor trunc_ln_fu_627_p4);
    y_fu_527_p2 <= (zext_ln95_fu_497_p1 xor x_0_i_reg_289);
    zext_ln100_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln100_8_fu_683_p2),8));
    zext_ln130_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_278),9));
    zext_ln134_1_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln130_fu_387_p2),64));
    zext_ln134_6_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln133_fu_363_p2),14));
    zext_ln134_7_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_fu_377_p2),64));
    zext_ln134_8_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln133_1_fu_393_p3),14));
    zext_ln134_9_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_2_fu_409_p2),64));
    zext_ln134_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_278),64));
    zext_ln142_2_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln139_fu_983_p2),64));
    zext_ln142_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_0_reg_310),64));
    zext_ln68_14_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_fu_693_p3),64));
    zext_ln68_15_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_466_p4),64));
    zext_ln68_16_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_708_p2),64));
    zext_ln68_17_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_fu_693_p3),6));
    zext_ln68_18_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_8_fu_772_p3),32));
    zext_ln68_19_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln68_5_fu_780_p2),32));
    zext_ln68_20_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_reg_1108),6));
    zext_ln68_21_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln68_reg_1119),32));
    zext_ln68_22_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_11_fu_885_p3),32));
    zext_ln68_23_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_10_fu_879_p3),32));
    zext_ln68_24_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln68_6_fu_892_p2),32));
    zext_ln68_25_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_1092),4));
    zext_ln68_2_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln68_fu_816_p2),8));
    zext_ln68_cast_fu_693_p3 <= (tmp_17_reg_1092 & ap_const_lv3_0);
    zext_ln68_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_cast_fu_693_p3),6));
    zext_ln87_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_299),64));
    zext_ln95_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_487_p4),32));
    zext_ln96_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_fu_533_p4),32));
    zext_ln97_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln5_fu_577_p4),32));
end behav;
