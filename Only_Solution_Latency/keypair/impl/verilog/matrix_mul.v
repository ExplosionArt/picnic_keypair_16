// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        output_r_address1,
        output_r_ce1,
        output_r_we1,
        output_r_d1,
        output_r_q1,
        matrix_offset
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_pp0_stage0 = 11'd4;
parameter    ap_ST_fsm_state5 = 11'd8;
parameter    ap_ST_fsm_state6 = 11'd16;
parameter    ap_ST_fsm_state7 = 11'd32;
parameter    ap_ST_fsm_state8 = 11'd64;
parameter    ap_ST_fsm_state9 = 11'd128;
parameter    ap_ST_fsm_state10 = 11'd256;
parameter    ap_ST_fsm_pp1_stage0 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [2:0] output_r_address1;
output   output_r_ce1;
output   output_r_we1;
output  [31:0] output_r_d1;
input  [31:0] output_r_q1;
input  [13:0] matrix_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[2:0] output_r_address1;
reg output_r_ce1;
reg output_r_we1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] temp_matrix2_address0;
reg    temp_matrix2_ce0;
wire   [31:0] temp_matrix2_q0;
wire   [13:0] temp_matrix2_address1;
reg    temp_matrix2_ce1;
wire   [31:0] temp_matrix2_q1;
reg   [2:0] j_0_0_reg_278;
reg   [2:0] loop_0_0_reg_310;
wire   [0:0] icmp_ln129_fu_321_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] i_fu_327_p2;
reg   [7:0] i_reg_1015;
wire   [2:0] trunc_ln129_fu_333_p1;
reg   [2:0] trunc_ln129_reg_1020;
wire   [6:0] trunc_ln133_fu_337_p1;
reg   [6:0] trunc_ln133_reg_1025;
wire   [8:0] shl_ln_fu_341_p3;
reg   [8:0] shl_ln_reg_1030;
wire   [0:0] icmp_ln130_fu_349_p2;
reg   [0:0] icmp_ln130_reg_1035;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln134_fu_372_p1;
reg   [63:0] zext_ln134_reg_1039;
wire   [63:0] zext_ln134_1_fu_404_p1;
reg   [63:0] zext_ln134_1_reg_1054;
wire   [2:0] add_ln130_fu_419_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] prod_q0;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln87_fu_444_p2;
wire   [2:0] i_2_fu_450_p2;
reg   [2:0] i_2_reg_1087;
reg   [1:0] tmp_17_reg_1092;
reg   [5:0] temp_addr_10_reg_1098;
wire   [31:0] x_2_fu_481_p2;
wire    ap_CS_fsm_state8;
wire   [4:0] zext_ln68_cast_fu_693_p3;
reg   [4:0] zext_ln68_cast_reg_1108;
wire    ap_CS_fsm_state9;
wire   [5:0] add_ln68_fu_708_p2;
reg   [5:0] add_ln68_reg_1113;
wire   [7:0] or_ln68_fu_849_p2;
reg   [7:0] or_ln68_reg_1119;
wire   [0:0] icmp_ln68_2_fu_855_p2;
reg   [0:0] icmp_ln68_2_reg_1124;
wire   [0:0] icmp_ln139_fu_968_p2;
reg   [0:0] icmp_ln139_reg_1132;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state11_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [63:0] zext_ln142_fu_978_p1;
reg   [63:0] zext_ln142_reg_1136;
wire   [63:0] zext_ln142_2_fu_989_p1;
reg   [63:0] zext_ln142_2_reg_1146;
wire   [2:0] add_ln139_fu_994_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_enable_reg_pp1_iter1;
reg   [5:0] prod_address0;
reg    prod_ce0;
reg    prod_we0;
wire   [31:0] prod_d0;
reg   [5:0] prod_address1;
reg    prod_ce1;
reg    prod_we1;
wire   [31:0] prod_d1;
wire   [31:0] prod_q1;
reg   [5:0] temp_address0;
reg    temp_ce0;
reg   [3:0] temp_we0;
wire   [31:0] temp_d0;
wire   [31:0] temp_q0;
wire   [5:0] temp_address1;
reg    temp_ce1;
wire   [31:0] temp_q1;
reg   [7:0] bitNumber_assign_reg_266;
wire    ap_CS_fsm_state10;
reg   [31:0] x_0_i_reg_289;
reg   [2:0] i_0_i_reg_299;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln134_7_fu_382_p1;
wire   [63:0] zext_ln134_9_fu_414_p1;
wire   [63:0] zext_ln87_fu_439_p1;
wire   [63:0] zext_ln68_15_fu_476_p1;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_state5;
wire   [3:0] shl_ln68_7_fu_961_p2;
wire   [8:0] zext_ln130_fu_359_p1;
wire   [8:0] add_ln133_fu_363_p2;
wire   [13:0] zext_ln134_6_fu_368_p1;
wire   [13:0] add_ln134_fu_377_p2;
wire   [1:0] trunc_ln130_fu_355_p1;
wire   [1:0] or_ln130_fu_387_p2;
wire   [8:0] add_ln133_1_fu_393_p3;
wire   [13:0] zext_ln134_8_fu_400_p1;
wire   [13:0] add_ln134_2_fu_409_p2;
wire   [1:0] tmp_18_fu_466_p4;
wire   [30:0] lshr_ln_fu_487_p4;
wire   [31:0] zext_ln95_fu_497_p1;
wire   [31:0] y_fu_527_p2;
wire   [29:0] lshr_ln4_fu_533_p4;
wire   [23:0] trunc_ln95_6_fu_517_p4;
wire   [23:0] trunc_ln95_2_fu_513_p1;
wire   [31:0] zext_ln96_fu_543_p1;
wire   [31:0] y_4_fu_571_p2;
wire   [27:0] lshr_ln5_fu_577_p4;
wire   [23:0] trunc_ln96_2_fu_561_p4;
wire   [23:0] xor_ln96_fu_555_p2;
wire   [31:0] zext_ln97_fu_587_p1;
wire   [23:0] trunc_ln97_2_fu_605_p4;
wire   [23:0] xor_ln97_fu_599_p2;
wire   [31:0] y_5_fu_615_p2;
wire   [23:0] trunc_ln_fu_627_p4;
wire   [23:0] xor_ln97_4_fu_621_p2;
wire   [23:0] y_6_fu_645_p2;
wire   [0:0] trunc_ln95_fu_501_p1;
wire   [0:0] tmp_13_fu_547_p3;
wire   [0:0] xor_ln100_fu_659_p2;
wire   [0:0] tmp_12_fu_505_p3;
wire   [0:0] tmp_15_fu_637_p3;
wire   [0:0] tmp_16_fu_651_p3;
wire   [0:0] xor_ln100_6_fu_671_p2;
wire   [0:0] tmp_14_fu_591_p3;
wire   [0:0] xor_ln100_7_fu_677_p2;
wire   [0:0] xor_ln100_5_fu_665_p2;
wire   [0:0] xor_ln100_8_fu_683_p2;
wire   [5:0] zext_ln68_fu_700_p1;
wire   [63:0] zext_ln68_14_fu_704_p1;
wire   [63:0] zext_ln68_16_fu_714_p1;
wire   [5:0] zext_ln68_17_fu_724_p1;
wire   [0:0] icmp_ln68_fu_718_p2;
wire   [5:0] sub_ln68_fu_738_p2;
wire   [5:0] sub_ln68_4_fu_750_p2;
reg   [31:0] tmp_19_fu_728_p4;
wire   [5:0] xor_ln68_4_fu_744_p2;
wire   [5:0] select_ln68_fu_756_p3;
wire   [5:0] select_ln68_8_fu_772_p3;
wire   [5:0] sub_ln68_5_fu_780_p2;
wire   [31:0] select_ln68_7_fu_764_p3;
wire   [31:0] zext_ln68_18_fu_786_p1;
wire   [31:0] zext_ln68_19_fu_790_p1;
wire   [31:0] lshr_ln68_fu_794_p2;
wire   [31:0] lshr_ln68_3_fu_800_p2;
wire   [31:0] and_ln68_4_fu_806_p2;
wire   [2:0] xor_ln68_fu_816_p2;
wire   [7:0] zext_ln68_2_fu_821_p1;
wire   [7:0] shl_ln68_fu_825_p2;
wire   [7:0] zext_ln100_fu_689_p1;
wire   [7:0] trunc_ln68_fu_812_p1;
wire   [7:0] xor_ln68_2_fu_831_p2;
wire   [7:0] and_ln68_fu_843_p2;
wire   [7:0] shl_ln68_2_fu_837_p2;
wire   [5:0] zext_ln68_20_fu_861_p1;
wire   [5:0] xor_ln68_5_fu_867_p2;
wire   [5:0] select_ln68_9_fu_873_p3;
wire   [5:0] select_ln68_11_fu_885_p3;
wire   [5:0] select_ln68_10_fu_879_p3;
wire   [5:0] sub_ln68_6_fu_892_p2;
wire   [31:0] zext_ln68_21_fu_864_p1;
wire   [31:0] zext_ln68_22_fu_898_p1;
wire   [31:0] shl_ln68_5_fu_910_p2;
reg   [31:0] tmp_20_fu_916_p4;
wire   [31:0] zext_ln68_23_fu_902_p1;
wire   [31:0] zext_ln68_24_fu_906_p1;
wire   [31:0] shl_ln68_6_fu_933_p2;
wire   [31:0] lshr_ln68_4_fu_939_p2;
wire   [31:0] select_ln68_12_fu_926_p3;
wire   [31:0] and_ln68_5_fu_945_p2;
wire   [3:0] zext_ln68_25_fu_958_p1;
wire   [1:0] trunc_ln139_fu_974_p1;
wire   [1:0] or_ln139_fu_983_p2;
wire    ap_CS_fsm_state13;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

matrix_mul_temp_mfYi #(
    .DataWidth( 32 ),
    .AddressRange( 10240 ),
    .AddressWidth( 14 ))
temp_matrix2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_matrix2_address0),
    .ce0(temp_matrix2_ce0),
    .q0(temp_matrix2_q0),
    .address1(temp_matrix2_address1),
    .ce1(temp_matrix2_ce1),
    .q1(temp_matrix2_q1)
);

matrix_mul_1_prod #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
prod_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(prod_address0),
    .ce0(prod_ce0),
    .we0(prod_we0),
    .d0(prod_d0),
    .q0(prod_q0),
    .address1(prod_address1),
    .ce1(prod_ce1),
    .we1(prod_we1),
    .d1(prod_d1),
    .q1(prod_q1)
);

matrix_mul_1_temp #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0),
    .address1(temp_address1),
    .ce1(temp_ce1),
    .q1(temp_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln129_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln129_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln129_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state11))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state11);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln129_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bitNumber_assign_reg_266 <= i_reg_1015;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bitNumber_assign_reg_266 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_i_reg_299 <= i_2_reg_1087;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_299 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln130_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_0_0_reg_278 <= add_ln130_fu_419_p2;
    end else if (((icmp_ln129_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_0_reg_278 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        loop_0_0_reg_310 <= 3'd0;
    end else if (((icmp_ln139_fu_968_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        loop_0_0_reg_310 <= add_ln139_fu_994_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_0_i_reg_289 <= x_2_fu_481_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_0_i_reg_289 <= prod_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln68_reg_1113[5 : 3] <= add_ln68_fu_708_p2[5 : 3];
        icmp_ln68_2_reg_1124 <= icmp_ln68_2_fu_855_p2;
        or_ln68_reg_1119 <= or_ln68_fu_849_p2;
        zext_ln68_cast_reg_1108[4 : 3] <= zext_ln68_cast_fu_693_p3[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_2_reg_1087 <= i_2_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1015 <= i_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln130_reg_1035 <= icmp_ln130_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln139_reg_1132 <= icmp_ln139_fu_968_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_1030[8 : 2] <= shl_ln_fu_341_p3[8 : 2];
        trunc_ln129_reg_1020 <= trunc_ln129_fu_333_p1;
        trunc_ln133_reg_1025 <= trunc_ln133_fu_337_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln87_fu_444_p2 == 1'd1))) begin
        temp_addr_10_reg_1098[1 : 0] <= zext_ln68_15_fu_476_p1[1 : 0];
        tmp_17_reg_1092 <= {{bitNumber_assign_reg_266[4:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln130_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln134_1_reg_1054[1] <= zext_ln134_1_fu_404_p1[1];
        zext_ln134_reg_1039[2 : 0] <= zext_ln134_fu_372_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln139_fu_968_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln142_2_reg_1146[1] <= zext_ln142_2_fu_989_p1[1];
        zext_ln142_reg_1136[2 : 0] <= zext_ln142_fu_978_p1[2 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln130_fu_349_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln139_fu_968_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_r_address0 = zext_ln142_reg_1136;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_r_address0 = zext_ln134_fu_372_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_r_address1 = zext_ln142_2_reg_1146;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_r_address1 = zext_ln134_1_fu_404_p1;
    end else begin
        output_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_r_ce1 = 1'b1;
    end else begin
        output_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_reg_1132 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln139_reg_1132 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_r_we1 = 1'b1;
    end else begin
        output_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        prod_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        prod_address0 = zext_ln134_reg_1039;
    end else begin
        prod_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        prod_address1 = zext_ln87_fu_439_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        prod_address1 = zext_ln134_1_reg_1054;
    end else begin
        prod_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        prod_ce1 = 1'b1;
    end else begin
        prod_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln130_reg_1035 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln130_reg_1035 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        prod_we1 = 1'b1;
    end else begin
        prod_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        temp_address0 = zext_ln142_fu_978_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_address0 = temp_addr_10_reg_1098;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_address0 = zext_ln68_15_fu_476_p1;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        temp_ce1 = 1'b1;
    end else begin
        temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        temp_matrix2_ce0 = 1'b1;
    end else begin
        temp_matrix2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        temp_matrix2_ce1 = 1'b1;
    end else begin
        temp_matrix2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_we0 = shl_ln68_7_fu_961_p2;
    end else begin
        temp_we0 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln129_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln130_fu_349_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln130_fu_349_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln87_fu_444_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln139_fu_968_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln139_fu_968_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln130_fu_419_p2 = (3'd2 + j_0_0_reg_278);

assign add_ln133_1_fu_393_p3 = {{trunc_ln133_reg_1025}, {or_ln130_fu_387_p2}};

assign add_ln133_fu_363_p2 = (zext_ln130_fu_359_p1 + shl_ln_reg_1030);

assign add_ln134_2_fu_409_p2 = (matrix_offset + zext_ln134_8_fu_400_p1);

assign add_ln134_fu_377_p2 = (matrix_offset + zext_ln134_6_fu_368_p1);

assign add_ln139_fu_994_p2 = (3'd2 + loop_0_0_reg_310);

assign add_ln68_fu_708_p2 = (6'd7 + zext_ln68_fu_700_p1);

assign and_ln68_4_fu_806_p2 = (lshr_ln68_fu_794_p2 & lshr_ln68_3_fu_800_p2);

assign and_ln68_5_fu_945_p2 = (shl_ln68_6_fu_933_p2 & lshr_ln68_4_fu_939_p2);

assign and_ln68_fu_843_p2 = (xor_ln68_2_fu_831_p2 & trunc_ln68_fu_812_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign i_2_fu_450_p2 = (i_0_i_reg_299 + 3'd1);

assign i_fu_327_p2 = (bitNumber_assign_reg_266 + 8'd1);

assign icmp_ln129_fu_321_p2 = ((bitNumber_assign_reg_266 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_349_p2 = ((j_0_0_reg_278 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_968_p2 = ((loop_0_0_reg_310 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln68_2_fu_855_p2 = ((zext_ln68_14_fu_704_p1 > zext_ln68_16_fu_714_p1) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_718_p2 = ((zext_ln68_14_fu_704_p1 > zext_ln68_16_fu_714_p1) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_444_p2 = ((i_0_i_reg_299 == 3'd4) ? 1'b1 : 1'b0);

assign lshr_ln4_fu_533_p4 = {{y_fu_527_p2[31:2]}};

assign lshr_ln5_fu_577_p4 = {{y_4_fu_571_p2[31:4]}};

assign lshr_ln68_3_fu_800_p2 = 32'd4294967295 >> zext_ln68_19_fu_790_p1;

assign lshr_ln68_4_fu_939_p2 = 32'd4294967295 >> zext_ln68_24_fu_906_p1;

assign lshr_ln68_fu_794_p2 = select_ln68_7_fu_764_p3 >> zext_ln68_18_fu_786_p1;

assign lshr_ln_fu_487_p4 = {{x_0_i_reg_289[31:1]}};

assign or_ln130_fu_387_p2 = (trunc_ln130_fu_355_p1 | 2'd1);

assign or_ln139_fu_983_p2 = (trunc_ln139_fu_974_p1 | 2'd1);

assign or_ln68_fu_849_p2 = (shl_ln68_2_fu_837_p2 | and_ln68_fu_843_p2);

assign output_r_d0 = temp_q0;

assign output_r_d1 = temp_q1;

assign prod_d0 = (temp_matrix2_q0 & output_r_q0);

assign prod_d1 = (temp_matrix2_q1 & output_r_q1);

assign select_ln68_10_fu_879_p3 = ((icmp_ln68_2_reg_1124[0:0] === 1'b1) ? add_ln68_reg_1113 : zext_ln68_20_fu_861_p1);

assign select_ln68_11_fu_885_p3 = ((icmp_ln68_2_reg_1124[0:0] === 1'b1) ? xor_ln68_5_fu_867_p2 : zext_ln68_20_fu_861_p1);

assign select_ln68_12_fu_926_p3 = ((icmp_ln68_2_reg_1124[0:0] === 1'b1) ? tmp_20_fu_916_p4 : shl_ln68_5_fu_910_p2);

assign select_ln68_7_fu_764_p3 = ((icmp_ln68_fu_718_p2[0:0] === 1'b1) ? tmp_19_fu_728_p4 : temp_q0);

assign select_ln68_8_fu_772_p3 = ((icmp_ln68_fu_718_p2[0:0] === 1'b1) ? xor_ln68_4_fu_744_p2 : zext_ln68_17_fu_724_p1);

assign select_ln68_9_fu_873_p3 = ((icmp_ln68_2_reg_1124[0:0] === 1'b1) ? zext_ln68_20_fu_861_p1 : add_ln68_reg_1113);

assign select_ln68_fu_756_p3 = ((icmp_ln68_fu_718_p2[0:0] === 1'b1) ? sub_ln68_fu_738_p2 : sub_ln68_4_fu_750_p2);

assign shl_ln68_2_fu_837_p2 = zext_ln100_fu_689_p1 << zext_ln68_2_fu_821_p1;

assign shl_ln68_5_fu_910_p2 = zext_ln68_21_fu_864_p1 << zext_ln68_22_fu_898_p1;

assign shl_ln68_6_fu_933_p2 = 32'd4294967295 << zext_ln68_23_fu_902_p1;

assign shl_ln68_7_fu_961_p2 = 4'd1 << zext_ln68_25_fu_958_p1;

assign shl_ln68_fu_825_p2 = 8'd1 << zext_ln68_2_fu_821_p1;

assign shl_ln_fu_341_p3 = {{trunc_ln133_fu_337_p1}, {2'd0}};

assign sub_ln68_4_fu_750_p2 = (add_ln68_fu_708_p2 - zext_ln68_17_fu_724_p1);

assign sub_ln68_5_fu_780_p2 = (6'd31 - select_ln68_fu_756_p3);

assign sub_ln68_6_fu_892_p2 = (6'd31 - select_ln68_9_fu_873_p3);

assign sub_ln68_fu_738_p2 = (zext_ln68_17_fu_724_p1 - add_ln68_fu_708_p2);

assign temp_address1 = zext_ln142_2_fu_989_p1;

assign temp_d0 = (select_ln68_12_fu_926_p3 & and_ln68_5_fu_945_p2);

assign temp_matrix2_address0 = zext_ln134_7_fu_382_p1;

assign temp_matrix2_address1 = zext_ln134_9_fu_414_p1;

assign tmp_12_fu_505_p3 = x_0_i_reg_289[32'd1];

assign tmp_13_fu_547_p3 = y_fu_527_p2[32'd2];

assign tmp_14_fu_591_p3 = y_4_fu_571_p2[32'd4];

assign tmp_15_fu_637_p3 = y_5_fu_615_p2[32'd8];

assign tmp_16_fu_651_p3 = y_6_fu_645_p2[32'd16];

assign tmp_18_fu_466_p4 = {{bitNumber_assign_reg_266[6:5]}};

integer ap_tvar_int_0;

always @ (temp_q0) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_19_fu_728_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_19_fu_728_p4[ap_tvar_int_0] = temp_q0[31 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln68_5_fu_910_p2) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_20_fu_916_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_20_fu_916_p4[ap_tvar_int_1] = shl_ln68_5_fu_910_p2[31 - ap_tvar_int_1];
        end
    end
end

assign trunc_ln129_fu_333_p1 = bitNumber_assign_reg_266[2:0];

assign trunc_ln130_fu_355_p1 = j_0_0_reg_278[1:0];

assign trunc_ln133_fu_337_p1 = bitNumber_assign_reg_266[6:0];

assign trunc_ln139_fu_974_p1 = loop_0_0_reg_310[1:0];

assign trunc_ln68_fu_812_p1 = and_ln68_4_fu_806_p2[7:0];

assign trunc_ln95_2_fu_513_p1 = x_0_i_reg_289[23:0];

assign trunc_ln95_6_fu_517_p4 = {{x_0_i_reg_289[24:1]}};

assign trunc_ln95_fu_501_p1 = x_0_i_reg_289[0:0];

assign trunc_ln96_2_fu_561_p4 = {{y_fu_527_p2[25:2]}};

assign trunc_ln97_2_fu_605_p4 = {{y_4_fu_571_p2[27:4]}};

assign trunc_ln_fu_627_p4 = {{y_5_fu_615_p2[31:8]}};

assign x_2_fu_481_p2 = (x_0_i_reg_289 ^ prod_q1);

assign xor_ln100_5_fu_665_p2 = (xor_ln100_fu_659_p2 ^ tmp_12_fu_505_p3);

assign xor_ln100_6_fu_671_p2 = (tmp_16_fu_651_p3 ^ tmp_15_fu_637_p3);

assign xor_ln100_7_fu_677_p2 = (xor_ln100_6_fu_671_p2 ^ tmp_14_fu_591_p3);

assign xor_ln100_8_fu_683_p2 = (xor_ln100_7_fu_677_p2 ^ xor_ln100_5_fu_665_p2);

assign xor_ln100_fu_659_p2 = (trunc_ln95_fu_501_p1 ^ tmp_13_fu_547_p3);

assign xor_ln68_2_fu_831_p2 = (shl_ln68_fu_825_p2 ^ 8'd255);

assign xor_ln68_4_fu_744_p2 = (zext_ln68_17_fu_724_p1 ^ 6'd31);

assign xor_ln68_5_fu_867_p2 = (zext_ln68_20_fu_861_p1 ^ 6'd31);

assign xor_ln68_fu_816_p2 = (trunc_ln129_reg_1020 ^ 3'd7);

assign xor_ln96_fu_555_p2 = (trunc_ln95_6_fu_517_p4 ^ trunc_ln95_2_fu_513_p1);

assign xor_ln97_4_fu_621_p2 = (xor_ln97_fu_599_p2 ^ trunc_ln97_2_fu_605_p4);

assign xor_ln97_fu_599_p2 = (xor_ln96_fu_555_p2 ^ trunc_ln96_2_fu_561_p4);

assign y_4_fu_571_p2 = (zext_ln96_fu_543_p1 ^ y_fu_527_p2);

assign y_5_fu_615_p2 = (zext_ln97_fu_587_p1 ^ y_4_fu_571_p2);

assign y_6_fu_645_p2 = (xor_ln97_4_fu_621_p2 ^ trunc_ln_fu_627_p4);

assign y_fu_527_p2 = (zext_ln95_fu_497_p1 ^ x_0_i_reg_289);

assign zext_ln100_fu_689_p1 = xor_ln100_8_fu_683_p2;

assign zext_ln130_fu_359_p1 = j_0_0_reg_278;

assign zext_ln134_1_fu_404_p1 = or_ln130_fu_387_p2;

assign zext_ln134_6_fu_368_p1 = add_ln133_fu_363_p2;

assign zext_ln134_7_fu_382_p1 = add_ln134_fu_377_p2;

assign zext_ln134_8_fu_400_p1 = add_ln133_1_fu_393_p3;

assign zext_ln134_9_fu_414_p1 = add_ln134_2_fu_409_p2;

assign zext_ln134_fu_372_p1 = j_0_0_reg_278;

assign zext_ln142_2_fu_989_p1 = or_ln139_fu_983_p2;

assign zext_ln142_fu_978_p1 = loop_0_0_reg_310;

assign zext_ln68_14_fu_704_p1 = zext_ln68_cast_fu_693_p3;

assign zext_ln68_15_fu_476_p1 = tmp_18_fu_466_p4;

assign zext_ln68_16_fu_714_p1 = add_ln68_fu_708_p2;

assign zext_ln68_17_fu_724_p1 = zext_ln68_cast_fu_693_p3;

assign zext_ln68_18_fu_786_p1 = select_ln68_8_fu_772_p3;

assign zext_ln68_19_fu_790_p1 = sub_ln68_5_fu_780_p2;

assign zext_ln68_20_fu_861_p1 = zext_ln68_cast_reg_1108;

assign zext_ln68_21_fu_864_p1 = or_ln68_reg_1119;

assign zext_ln68_22_fu_898_p1 = select_ln68_11_fu_885_p3;

assign zext_ln68_23_fu_902_p1 = select_ln68_10_fu_879_p3;

assign zext_ln68_24_fu_906_p1 = sub_ln68_6_fu_892_p2;

assign zext_ln68_25_fu_958_p1 = tmp_17_reg_1092;

assign zext_ln68_2_fu_821_p1 = xor_ln68_fu_816_p2;

assign zext_ln68_cast_fu_693_p3 = {{tmp_17_reg_1092}, {3'd0}};

assign zext_ln68_fu_700_p1 = zext_ln68_cast_fu_693_p3;

assign zext_ln87_fu_439_p1 = i_0_i_reg_299;

assign zext_ln95_fu_497_p1 = lshr_ln_fu_487_p4;

assign zext_ln96_fu_543_p1 = lshr_ln4_fu_533_p4;

assign zext_ln97_fu_587_p1 = lshr_ln5_fu_577_p4;

always @ (posedge ap_clk) begin
    shl_ln_reg_1030[1:0] <= 2'b00;
    zext_ln134_reg_1039[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln134_1_reg_1054[0] <= 1'b1;
    zext_ln134_1_reg_1054[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    temp_addr_10_reg_1098[5:2] <= 4'b0000;
    zext_ln68_cast_reg_1108[2:0] <= 3'b000;
    add_ln68_reg_1113[2:0] <= 3'b111;
    zext_ln142_reg_1136[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln142_2_reg_1146[0] <= 1'b1;
    zext_ln142_2_reg_1146[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrix_mul
