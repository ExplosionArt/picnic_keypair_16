-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity picnic_keygen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    parameters : IN STD_LOGIC_VECTOR (3 downto 0);
    pk_plaintext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_plaintext_ce0 : OUT STD_LOGIC;
    pk_plaintext_we0 : OUT STD_LOGIC;
    pk_plaintext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_plaintext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_plaintext_ce1 : OUT STD_LOGIC;
    pk_plaintext_we1 : OUT STD_LOGIC;
    pk_plaintext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_ciphertext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_ciphertext_ce0 : OUT STD_LOGIC;
    pk_ciphertext_we0 : OUT STD_LOGIC;
    pk_ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_ciphertext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    pk_ciphertext_ce1 : OUT STD_LOGIC;
    pk_ciphertext_we1 : OUT STD_LOGIC;
    pk_ciphertext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_data_ce0 : OUT STD_LOGIC;
    sk_data_we0 : OUT STD_LOGIC;
    sk_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_data_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_data_ce1 : OUT STD_LOGIC;
    sk_data_we1 : OUT STD_LOGIC;
    sk_data_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_pk_plaintext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_pk_plaintext_ce0 : OUT STD_LOGIC;
    sk_pk_plaintext_we0 : OUT STD_LOGIC;
    sk_pk_plaintext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_pk_plaintext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_pk_plaintext_ce1 : OUT STD_LOGIC;
    sk_pk_plaintext_we1 : OUT STD_LOGIC;
    sk_pk_plaintext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_pk_ciphertext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_pk_ciphertext_ce0 : OUT STD_LOGIC;
    sk_pk_ciphertext_we0 : OUT STD_LOGIC;
    sk_pk_ciphertext_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_pk_ciphertext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_pk_ciphertext_ce1 : OUT STD_LOGIC;
    sk_pk_ciphertext_we1 : OUT STD_LOGIC;
    sk_pk_ciphertext_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce0 : OUT STD_LOGIC;
    DRBG_ctx_V_we0 : OUT STD_LOGIC;
    DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce1 : OUT STD_LOGIC;
    DRBG_ctx_V_we1 : OUT STD_LOGIC;
    DRBG_ctx_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
    DRBG_ctx_Key_we0 : OUT STD_LOGIC;
    DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
    DRBG_ctx_Key_we1 : OUT STD_LOGIC;
    DRBG_ctx_Key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of picnic_keygen is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_1993 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal reg_1997 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_2001 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_2005 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_2009 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_2013 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_2017 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal reg_2023 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_25_fu_2101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_25_reg_2548 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln211_fu_2107_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln211_1_fu_2124_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln211_2_fu_2141_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal pk_ciphertext_addr_reg_2576 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln211_2_fu_2152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pk_ciphertext_addr_1_reg_2581 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_reg_2586 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_1_reg_2591 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_2_reg_2606 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_3_reg_2611 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_2_reg_2616 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_3_reg_2621 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_addr_1_reg_2636 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal pk_ciphertext_addr_4_reg_2641 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_5_reg_2646 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_4_reg_2651 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_5_reg_2656 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_8_reg_2671 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_9_reg_2676 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_6_reg_2681 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_7_reg_2686 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_addr_2_reg_2701 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal pk_ciphertext_addr_10_reg_2706 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_11_reg_2711 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_8_reg_2716 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_9_reg_2721 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_12_reg_2736 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_13_reg_2741 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_10_reg_2746 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_11_reg_2751 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_addr_3_reg_2766 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal pk_ciphertext_addr_14_reg_2771 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_15_reg_2776 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_12_reg_2781 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_13_reg_2786 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_16_reg_2801 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_17_reg_2806 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_14_reg_2811 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_15_reg_2816 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_addr_4_reg_2831 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal pk_ciphertext_addr_18_reg_2836 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_19_reg_2841 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_16_reg_2846 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_17_reg_2851 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_20_reg_2866 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_21_reg_2871 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_18_reg_2876 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_19_reg_2881 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_addr_5_reg_2896 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal pk_ciphertext_addr_22_reg_2901 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_23_reg_2906 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_20_reg_2911 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_21_reg_2916 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_24_reg_2931 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_25_reg_2936 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_22_reg_2941 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_23_reg_2946 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_addr_6_reg_2961 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal pk_ciphertext_addr_6_reg_2966 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_26_reg_2971 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_24_reg_2976 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_25_reg_2981 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_27_reg_2996 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_28_reg_3001 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_26_reg_3006 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_27_reg_3011 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_addr_7_reg_3026 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal pk_ciphertext_addr_7_reg_3031 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_29_reg_3036 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_28_reg_3041 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_29_reg_3046 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_30_reg_3061 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ciphertext_addr_31_reg_3066 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_30_reg_3071 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_plaintext_addr_31_reg_3076 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_addr_8_reg_3091 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal temp_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_ce1 : STD_LOGIC;
    signal temp_we1 : STD_LOGIC;
    signal temp_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp2_ce0 : STD_LOGIC;
    signal temp2_we0 : STD_LOGIC;
    signal temp2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_ce1 : STD_LOGIC;
    signal temp2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp3_ce0 : STD_LOGIC;
    signal temp3_we0 : STD_LOGIC;
    signal temp3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_ce1 : STD_LOGIC;
    signal temp3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_randombytes_fu_1933_ap_start : STD_LOGIC;
    signal grp_randombytes_fu_1933_ap_done : STD_LOGIC;
    signal grp_randombytes_fu_1933_ap_idle : STD_LOGIC;
    signal grp_randombytes_fu_1933_ap_ready : STD_LOGIC;
    signal grp_randombytes_fu_1933_x_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_1933_x_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_1933_x_we0 : STD_LOGIC;
    signal grp_randombytes_fu_1933_x_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_1933_x_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_1933_x_ce1 : STD_LOGIC;
    signal grp_randombytes_fu_1933_x_we1 : STD_LOGIC;
    signal grp_randombytes_fu_1933_x_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_1933_DRBG_ctx_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_randombytes_fu_1933_DRBG_ctx_V_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_1933_DRBG_ctx_V_we0 : STD_LOGIC;
    signal grp_randombytes_fu_1933_DRBG_ctx_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_1933_DRBG_ctx_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_randombytes_fu_1933_DRBG_ctx_V_ce1 : STD_LOGIC;
    signal grp_randombytes_fu_1933_DRBG_ctx_V_we1 : STD_LOGIC;
    signal grp_randombytes_fu_1933_DRBG_ctx_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_1933_DRBG_ctx_Key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_1933_DRBG_ctx_Key_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_1933_DRBG_ctx_Key_we0 : STD_LOGIC;
    signal grp_randombytes_fu_1933_DRBG_ctx_Key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_1933_DRBG_ctx_Key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_1933_DRBG_ctx_Key_ce1 : STD_LOGIC;
    signal grp_randombytes_fu_1933_DRBG_ctx_Key_we1 : STD_LOGIC;
    signal grp_randombytes_fu_1933_DRBG_ctx_Key_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_ap_start : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_ap_done : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_ap_idle : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_ap_ready : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_plaintext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LowMCEnc_fu_1948_plaintext_ce0 : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_plaintext_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LowMCEnc_fu_1948_plaintext_ce1 : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_output_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LowMCEnc_fu_1948_output_r_ce0 : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_output_r_we0 : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LowMCEnc_fu_1948_output_r_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LowMCEnc_fu_1948_output_r_ce1 : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_output_r_we1 : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_output_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LowMCEnc_fu_1948_key_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LowMCEnc_fu_1948_key_ce0 : STD_LOGIC;
    signal grp_LowMCEnc_fu_1948_key_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LowMCEnc_fu_1948_key_ce1 : STD_LOGIC;
    signal phi_ln211_reg_1888 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln211_fu_2118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln211_1_reg_1899 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln211_1_fu_2135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln211_2_reg_1910 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_p_0_phi_fu_1925_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_1921 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_randombytes_fu_1933_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_LowMCEnc_fu_1948_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln211_fu_2113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln211_1_fu_2130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln211_2_fu_2147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal or_ln215_5_fu_2158_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln215_5_1_fu_2197_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln215_5_2_fu_2236_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln215_5_3_fu_2275_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln215_5_4_fu_2314_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln215_5_5_fu_2353_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln215_5_6_fu_2392_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln215_5_7_fu_2431_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln216_2_fu_2171_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln216_2_1_fu_2210_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln216_2_2_fu_2249_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln216_2_3_fu_2288_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln216_2_4_fu_2327_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln216_2_5_fu_2366_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln216_2_6_fu_2405_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln216_2_7_fu_2444_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln217_2_fu_2184_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln217_2_1_fu_2223_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln217_2_2_fu_2262_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln217_2_3_fu_2301_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln217_2_4_fu_2340_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln217_2_5_fu_2379_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln217_2_6_fu_2418_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln217_2_7_fu_2457_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln227_fu_2470_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln227_4_fu_2476_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln227_8_fu_2482_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln227_11_fu_2488_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln227_15_fu_2494_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln227_19_fu_2500_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln227_23_fu_2506_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln227_27_fu_2512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_14_fu_2035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_2029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_16_fu_2047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_fu_2041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_18_fu_2059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_fu_2053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_2071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_fu_2065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_22_fu_2083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_21_fu_2077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_24_fu_2095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_23_fu_2089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln166_fu_2518_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);

    component randombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_we0 : OUT STD_LOGIC;
        x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce1 : OUT STD_LOGIC;
        x_we1 : OUT STD_LOGIC;
        x_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce0 : OUT STD_LOGIC;
        DRBG_ctx_V_we0 : OUT STD_LOGIC;
        DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce1 : OUT STD_LOGIC;
        DRBG_ctx_V_we1 : OUT STD_LOGIC;
        DRBG_ctx_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
        DRBG_ctx_Key_we0 : OUT STD_LOGIC;
        DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
        DRBG_ctx_Key_we1 : OUT STD_LOGIC;
        DRBG_ctx_Key_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC );
    end component;


    component LowMCEnc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        plaintext_ce0 : OUT STD_LOGIC;
        plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        plaintext_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        plaintext_ce1 : OUT STD_LOGIC;
        plaintext_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        key_ce1 : OUT STD_LOGIC;
        key_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component picnic_keygen_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component picnic_keygen_temp2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_U : component picnic_keygen_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0,
        address1 => grp_LowMCEnc_fu_1948_output_r_address1,
        ce1 => temp_ce1,
        we1 => temp_we1,
        d1 => grp_LowMCEnc_fu_1948_output_r_d1,
        q1 => temp_q1);

    temp2_U : component picnic_keygen_temp2
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp2_address0,
        ce0 => temp2_ce0,
        we0 => temp2_we0,
        d0 => temp2_d0,
        q0 => temp2_q0,
        address1 => grp_LowMCEnc_fu_1948_plaintext_address1,
        ce1 => temp2_ce1,
        q1 => temp2_q1);

    temp3_U : component picnic_keygen_temp2
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp3_address0,
        ce0 => temp3_ce0,
        we0 => temp3_we0,
        d0 => temp3_d0,
        q0 => temp3_q0,
        address1 => grp_LowMCEnc_fu_1948_key_address1,
        ce1 => temp3_ce1,
        q1 => temp3_q1);

    grp_randombytes_fu_1933 : component randombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_randombytes_fu_1933_ap_start,
        ap_done => grp_randombytes_fu_1933_ap_done,
        ap_idle => grp_randombytes_fu_1933_ap_idle,
        ap_ready => grp_randombytes_fu_1933_ap_ready,
        x_address0 => grp_randombytes_fu_1933_x_address0,
        x_ce0 => grp_randombytes_fu_1933_x_ce0,
        x_we0 => grp_randombytes_fu_1933_x_we0,
        x_d0 => grp_randombytes_fu_1933_x_d0,
        x_address1 => grp_randombytes_fu_1933_x_address1,
        x_ce1 => grp_randombytes_fu_1933_x_ce1,
        x_we1 => grp_randombytes_fu_1933_x_we1,
        x_d1 => grp_randombytes_fu_1933_x_d1,
        DRBG_ctx_V_address0 => grp_randombytes_fu_1933_DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0 => grp_randombytes_fu_1933_DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0 => grp_randombytes_fu_1933_DRBG_ctx_V_we0,
        DRBG_ctx_V_d0 => grp_randombytes_fu_1933_DRBG_ctx_V_d0,
        DRBG_ctx_V_q0 => DRBG_ctx_V_q0,
        DRBG_ctx_V_address1 => grp_randombytes_fu_1933_DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1 => grp_randombytes_fu_1933_DRBG_ctx_V_ce1,
        DRBG_ctx_V_we1 => grp_randombytes_fu_1933_DRBG_ctx_V_we1,
        DRBG_ctx_V_d1 => grp_randombytes_fu_1933_DRBG_ctx_V_d1,
        DRBG_ctx_V_q1 => DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0 => grp_randombytes_fu_1933_DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0 => grp_randombytes_fu_1933_DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0 => grp_randombytes_fu_1933_DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0 => grp_randombytes_fu_1933_DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0 => DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1 => grp_randombytes_fu_1933_DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1 => grp_randombytes_fu_1933_DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_we1 => grp_randombytes_fu_1933_DRBG_ctx_Key_we1,
        DRBG_ctx_Key_d1 => grp_randombytes_fu_1933_DRBG_ctx_Key_d1,
        DRBG_ctx_Key_q1 => DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i => DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o => grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld => grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld);

    grp_LowMCEnc_fu_1948 : component LowMCEnc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_LowMCEnc_fu_1948_ap_start,
        ap_done => grp_LowMCEnc_fu_1948_ap_done,
        ap_idle => grp_LowMCEnc_fu_1948_ap_idle,
        ap_ready => grp_LowMCEnc_fu_1948_ap_ready,
        plaintext_address0 => grp_LowMCEnc_fu_1948_plaintext_address0,
        plaintext_ce0 => grp_LowMCEnc_fu_1948_plaintext_ce0,
        plaintext_q0 => temp2_q0,
        plaintext_address1 => grp_LowMCEnc_fu_1948_plaintext_address1,
        plaintext_ce1 => grp_LowMCEnc_fu_1948_plaintext_ce1,
        plaintext_q1 => temp2_q1,
        output_r_address0 => grp_LowMCEnc_fu_1948_output_r_address0,
        output_r_ce0 => grp_LowMCEnc_fu_1948_output_r_ce0,
        output_r_we0 => grp_LowMCEnc_fu_1948_output_r_we0,
        output_r_d0 => grp_LowMCEnc_fu_1948_output_r_d0,
        output_r_q0 => temp_q0,
        output_r_address1 => grp_LowMCEnc_fu_1948_output_r_address1,
        output_r_ce1 => grp_LowMCEnc_fu_1948_output_r_ce1,
        output_r_we1 => grp_LowMCEnc_fu_1948_output_r_we1,
        output_r_d1 => grp_LowMCEnc_fu_1948_output_r_d1,
        output_r_q1 => temp_q1,
        key_address0 => grp_LowMCEnc_fu_1948_key_address0,
        key_ce0 => grp_LowMCEnc_fu_1948_key_ce0,
        key_q0 => temp3_q0,
        key_address1 => grp_LowMCEnc_fu_1948_key_address1,
        key_ce1 => grp_LowMCEnc_fu_1948_key_ce1,
        key_q1 => temp3_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_return_0_preg <= select_ln166_fu_2518_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_return_1_preg <= parameters;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv4_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_return_2_preg <= parameters;
                end if; 
            end if;
        end if;
    end process;


    grp_LowMCEnc_fu_1948_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_LowMCEnc_fu_1948_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_LowMCEnc_fu_1948_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_LowMCEnc_fu_1948_ap_ready = ap_const_logic_1)) then 
                    grp_LowMCEnc_fu_1948_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_randombytes_fu_1933_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_randombytes_fu_1933_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (empty_25_fu_2101_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_randombytes_fu_1933_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_randombytes_fu_1933_ap_ready = ap_const_logic_1)) then 
                    grp_randombytes_fu_1933_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_0_reg_1921_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (empty_25_fu_2101_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0_reg_1921 <= ap_const_lv1_1;
            elsif (((empty_25_reg_2548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                p_0_reg_1921 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    phi_ln211_1_reg_1899_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln211_fu_2118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln211_1_reg_1899 <= ap_const_lv3_0;
            elsif (((icmp_ln211_1_fu_2135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_ln211_1_reg_1899 <= add_ln211_1_fu_2124_p2;
            end if; 
        end if;
    end process;

    phi_ln211_2_reg_1910_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln211_1_fu_2135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_ln211_2_reg_1910 <= ap_const_lv3_0;
            elsif (((icmp_ln211_2_fu_2152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_ln211_2_reg_1910 <= add_ln211_2_fu_2141_p2;
            end if; 
        end if;
    end process;

    phi_ln211_reg_1888_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln211_fu_2118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln211_reg_1888 <= add_ln211_fu_2107_p2;
            elsif (((grp_randombytes_fu_1933_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln211_reg_1888 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_25_reg_2548 <= empty_25_fu_2101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_1993 <= pk_ciphertext_q0;
                reg_1997 <= pk_ciphertext_q1;
                reg_2001 <= pk_plaintext_q0;
                reg_2005 <= pk_plaintext_q1;
                reg_2009 <= sk_data_q0;
                reg_2013 <= sk_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_2017 <= temp_q0(23 downto 16);
                reg_2023 <= temp_q0(31 downto 24);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, empty_25_fu_2101_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln211_2_fu_2152_p2, grp_randombytes_fu_1933_ap_done, grp_LowMCEnc_fu_1948_ap_done, ap_CS_fsm_state4, icmp_ln211_fu_2118_p2, icmp_ln211_1_fu_2135_p2, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (empty_25_fu_2101_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                elsif (((ap_start = ap_const_logic_1) and (empty_25_fu_2101_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_randombytes_fu_1933_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_randombytes_fu_1933_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln211_fu_2118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln211_1_fu_2135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln211_2_fu_2152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_LowMCEnc_fu_1948_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    DRBG_ctx_Key_address0 <= grp_randombytes_fu_1933_DRBG_ctx_Key_address0;
    DRBG_ctx_Key_address1 <= grp_randombytes_fu_1933_DRBG_ctx_Key_address1;

    DRBG_ctx_Key_ce0_assign_proc : process(grp_randombytes_fu_1933_DRBG_ctx_Key_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_Key_ce0 <= grp_randombytes_fu_1933_DRBG_ctx_Key_ce0;
        else 
            DRBG_ctx_Key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_Key_ce1_assign_proc : process(grp_randombytes_fu_1933_DRBG_ctx_Key_ce1, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_Key_ce1 <= grp_randombytes_fu_1933_DRBG_ctx_Key_ce1;
        else 
            DRBG_ctx_Key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DRBG_ctx_Key_d0 <= grp_randombytes_fu_1933_DRBG_ctx_Key_d0;
    DRBG_ctx_Key_d1 <= grp_randombytes_fu_1933_DRBG_ctx_Key_d1;

    DRBG_ctx_Key_we0_assign_proc : process(grp_randombytes_fu_1933_DRBG_ctx_Key_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_Key_we0 <= grp_randombytes_fu_1933_DRBG_ctx_Key_we0;
        else 
            DRBG_ctx_Key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_Key_we1_assign_proc : process(grp_randombytes_fu_1933_DRBG_ctx_Key_we1, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_Key_we1 <= grp_randombytes_fu_1933_DRBG_ctx_Key_we1;
        else 
            DRBG_ctx_Key_we1 <= ap_const_logic_0;
        end if; 
    end process;

    DRBG_ctx_V_address0 <= grp_randombytes_fu_1933_DRBG_ctx_V_address0;
    DRBG_ctx_V_address1 <= grp_randombytes_fu_1933_DRBG_ctx_V_address1;

    DRBG_ctx_V_ce0_assign_proc : process(grp_randombytes_fu_1933_DRBG_ctx_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_ce0 <= grp_randombytes_fu_1933_DRBG_ctx_V_ce0;
        else 
            DRBG_ctx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_ce1_assign_proc : process(grp_randombytes_fu_1933_DRBG_ctx_V_ce1, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_ce1 <= grp_randombytes_fu_1933_DRBG_ctx_V_ce1;
        else 
            DRBG_ctx_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DRBG_ctx_V_d0 <= grp_randombytes_fu_1933_DRBG_ctx_V_d0;
    DRBG_ctx_V_d1 <= grp_randombytes_fu_1933_DRBG_ctx_V_d1;

    DRBG_ctx_V_we0_assign_proc : process(grp_randombytes_fu_1933_DRBG_ctx_V_we0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_we0 <= grp_randombytes_fu_1933_DRBG_ctx_V_we0;
        else 
            DRBG_ctx_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_we1_assign_proc : process(grp_randombytes_fu_1933_DRBG_ctx_V_we1, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_we1 <= grp_randombytes_fu_1933_DRBG_ctx_V_we1;
        else 
            DRBG_ctx_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_reseed_counter_o_assign_proc : process(DRBG_ctx_reseed_counter_i, grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o, grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_1)))) then 
            DRBG_ctx_reseed_counter_o <= grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o;
        else 
            DRBG_ctx_reseed_counter_o <= DRBG_ctx_reseed_counter_i;
        end if; 
    end process;


    DRBG_ctx_reseed_counter_o_ap_vld_assign_proc : process(grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_reseed_counter_o_ap_vld <= grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld;
        else 
            DRBG_ctx_reseed_counter_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln211_1_fu_2124_p2 <= std_logic_vector(unsigned(phi_ln211_1_reg_1899) + unsigned(ap_const_lv3_1));
    add_ln211_2_fu_2141_p2 <= std_logic_vector(unsigned(phi_ln211_2_reg_1910) + unsigned(ap_const_lv3_1));
    add_ln211_fu_2107_p2 <= std_logic_vector(unsigned(phi_ln211_reg_1888) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_1925_p4_assign_proc : process(empty_25_reg_2548, p_0_reg_1921, ap_CS_fsm_state42)
    begin
        if (((empty_25_reg_2548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_phi_mux_p_0_phi_fu_1925_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_p_0_phi_fu_1925_p4 <= p_0_reg_1921;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state42, select_ln166_fu_2518_p3, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_return_0 <= select_ln166_fu_2518_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(parameters, ap_CS_fsm_state42, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_return_1 <= parameters;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(parameters, ap_CS_fsm_state42, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_return_2 <= parameters;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;

    empty_14_fu_2035_p2 <= "1" when (parameters = ap_const_lv4_E) else "0";
    empty_15_fu_2041_p2 <= (empty_fu_2029_p2 or empty_14_fu_2035_p2);
    empty_16_fu_2047_p2 <= "1" when (parameters = ap_const_lv4_D) else "0";
    empty_17_fu_2053_p2 <= (empty_16_fu_2047_p2 or empty_15_fu_2041_p2);
    empty_18_fu_2059_p2 <= "1" when (parameters = ap_const_lv4_C) else "0";
    empty_19_fu_2065_p2 <= (empty_18_fu_2059_p2 or empty_17_fu_2053_p2);
    empty_20_fu_2071_p2 <= "1" when (parameters = ap_const_lv4_B) else "0";
    empty_21_fu_2077_p2 <= (empty_20_fu_2071_p2 or empty_19_fu_2065_p2);
    empty_22_fu_2083_p2 <= "1" when (parameters = ap_const_lv4_A) else "0";
    empty_23_fu_2089_p2 <= (empty_22_fu_2083_p2 or empty_21_fu_2077_p2);
    empty_24_fu_2095_p2 <= "1" when (parameters = ap_const_lv4_0) else "0";
    empty_25_fu_2101_p2 <= (empty_24_fu_2095_p2 or empty_23_fu_2089_p2);
    empty_fu_2029_p2 <= "1" when (parameters = ap_const_lv4_F) else "0";
    grp_LowMCEnc_fu_1948_ap_start <= grp_LowMCEnc_fu_1948_ap_start_reg;
    grp_randombytes_fu_1933_ap_start <= grp_randombytes_fu_1933_ap_start_reg;
    icmp_ln211_1_fu_2135_p2 <= "1" when (phi_ln211_1_reg_1899 = ap_const_lv3_7) else "0";
    icmp_ln211_2_fu_2152_p2 <= "1" when (phi_ln211_2_reg_1910 = ap_const_lv3_7) else "0";
    icmp_ln211_fu_2118_p2 <= "1" when (phi_ln211_reg_1888 = ap_const_lv3_7) else "0";
    or_ln215_5_1_fu_2197_p5 <= (((pk_ciphertext_q1 & pk_ciphertext_q0) & reg_1997) & reg_1993);
    or_ln215_5_2_fu_2236_p5 <= (((pk_ciphertext_q1 & pk_ciphertext_q0) & reg_1997) & reg_1993);
    or_ln215_5_3_fu_2275_p5 <= (((pk_ciphertext_q1 & pk_ciphertext_q0) & reg_1997) & reg_1993);
    or_ln215_5_4_fu_2314_p5 <= (((pk_ciphertext_q1 & pk_ciphertext_q0) & reg_1997) & reg_1993);
    or_ln215_5_5_fu_2353_p5 <= (((pk_ciphertext_q1 & pk_ciphertext_q0) & reg_1997) & reg_1993);
    or_ln215_5_6_fu_2392_p5 <= (((pk_ciphertext_q1 & pk_ciphertext_q0) & reg_1997) & reg_1993);
    or_ln215_5_7_fu_2431_p5 <= (((pk_ciphertext_q1 & pk_ciphertext_q0) & reg_1997) & reg_1993);
    or_ln215_5_fu_2158_p5 <= (((pk_ciphertext_q1 & pk_ciphertext_q0) & reg_1997) & reg_1993);
    or_ln216_2_1_fu_2210_p5 <= (((pk_plaintext_q1 & pk_plaintext_q0) & reg_2005) & reg_2001);
    or_ln216_2_2_fu_2249_p5 <= (((pk_plaintext_q1 & pk_plaintext_q0) & reg_2005) & reg_2001);
    or_ln216_2_3_fu_2288_p5 <= (((pk_plaintext_q1 & pk_plaintext_q0) & reg_2005) & reg_2001);
    or_ln216_2_4_fu_2327_p5 <= (((pk_plaintext_q1 & pk_plaintext_q0) & reg_2005) & reg_2001);
    or_ln216_2_5_fu_2366_p5 <= (((pk_plaintext_q1 & pk_plaintext_q0) & reg_2005) & reg_2001);
    or_ln216_2_6_fu_2405_p5 <= (((pk_plaintext_q1 & pk_plaintext_q0) & reg_2005) & reg_2001);
    or_ln216_2_7_fu_2444_p5 <= (((pk_plaintext_q1 & pk_plaintext_q0) & reg_2005) & reg_2001);
    or_ln216_2_fu_2171_p5 <= (((pk_plaintext_q1 & pk_plaintext_q0) & reg_2005) & reg_2001);
    or_ln217_2_1_fu_2223_p5 <= (((sk_data_q1 & sk_data_q0) & reg_2013) & reg_2009);
    or_ln217_2_2_fu_2262_p5 <= (((sk_data_q1 & sk_data_q0) & reg_2013) & reg_2009);
    or_ln217_2_3_fu_2301_p5 <= (((sk_data_q1 & sk_data_q0) & reg_2013) & reg_2009);
    or_ln217_2_4_fu_2340_p5 <= (((sk_data_q1 & sk_data_q0) & reg_2013) & reg_2009);
    or_ln217_2_5_fu_2379_p5 <= (((sk_data_q1 & sk_data_q0) & reg_2013) & reg_2009);
    or_ln217_2_6_fu_2418_p5 <= (((sk_data_q1 & sk_data_q0) & reg_2013) & reg_2009);
    or_ln217_2_7_fu_2457_p5 <= (((sk_data_q1 & sk_data_q0) & reg_2013) & reg_2009);
    or_ln217_2_fu_2184_p5 <= (((sk_data_q1 & sk_data_q0) & reg_2013) & reg_2009);
    pk_ciphertext_addr_10_reg_2706 <= ap_const_lv64_8(5 - 1 downto 0);
    pk_ciphertext_addr_11_reg_2711 <= ap_const_lv64_9(5 - 1 downto 0);
    pk_ciphertext_addr_12_reg_2736 <= ap_const_lv64_A(5 - 1 downto 0);
    pk_ciphertext_addr_13_reg_2741 <= ap_const_lv64_B(5 - 1 downto 0);
    pk_ciphertext_addr_14_reg_2771 <= ap_const_lv64_C(5 - 1 downto 0);
    pk_ciphertext_addr_15_reg_2776 <= ap_const_lv64_D(5 - 1 downto 0);
    pk_ciphertext_addr_16_reg_2801 <= ap_const_lv64_E(5 - 1 downto 0);
    pk_ciphertext_addr_17_reg_2806 <= ap_const_lv64_F(5 - 1 downto 0);
    pk_ciphertext_addr_18_reg_2836 <= ap_const_lv64_10(5 - 1 downto 0);
    pk_ciphertext_addr_19_reg_2841 <= ap_const_lv64_11(5 - 1 downto 0);
    pk_ciphertext_addr_1_reg_2581 <= ap_const_lv64_1(5 - 1 downto 0);
    pk_ciphertext_addr_20_reg_2866 <= ap_const_lv64_12(5 - 1 downto 0);
    pk_ciphertext_addr_21_reg_2871 <= ap_const_lv64_13(5 - 1 downto 0);
    pk_ciphertext_addr_22_reg_2901 <= ap_const_lv64_14(5 - 1 downto 0);
    pk_ciphertext_addr_23_reg_2906 <= ap_const_lv64_15(5 - 1 downto 0);
    pk_ciphertext_addr_24_reg_2931 <= ap_const_lv64_16(5 - 1 downto 0);
    pk_ciphertext_addr_25_reg_2936 <= ap_const_lv64_17(5 - 1 downto 0);
    pk_ciphertext_addr_26_reg_2971 <= ap_const_lv64_19(5 - 1 downto 0);
    pk_ciphertext_addr_27_reg_2996 <= ap_const_lv64_1A(5 - 1 downto 0);
    pk_ciphertext_addr_28_reg_3001 <= ap_const_lv64_1B(5 - 1 downto 0);
    pk_ciphertext_addr_29_reg_3036 <= ap_const_lv64_1D(5 - 1 downto 0);
    pk_ciphertext_addr_2_reg_2606 <= ap_const_lv64_2(5 - 1 downto 0);
    pk_ciphertext_addr_30_reg_3061 <= ap_const_lv64_1E(5 - 1 downto 0);
    pk_ciphertext_addr_31_reg_3066 <= ap_const_lv64_1F(5 - 1 downto 0);
    pk_ciphertext_addr_3_reg_2611 <= ap_const_lv64_3(5 - 1 downto 0);
    pk_ciphertext_addr_4_reg_2641 <= ap_const_lv64_4(5 - 1 downto 0);
    pk_ciphertext_addr_5_reg_2646 <= ap_const_lv64_5(5 - 1 downto 0);
    pk_ciphertext_addr_6_reg_2966 <= ap_const_lv64_18(5 - 1 downto 0);
    pk_ciphertext_addr_7_reg_3031 <= ap_const_lv64_1C(5 - 1 downto 0);
    pk_ciphertext_addr_8_reg_2671 <= ap_const_lv64_6(5 - 1 downto 0);
    pk_ciphertext_addr_9_reg_2676 <= ap_const_lv64_7(5 - 1 downto 0);
    pk_ciphertext_addr_reg_2576 <= ap_const_lv64_0(5 - 1 downto 0);

    pk_ciphertext_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state7, pk_ciphertext_addr_reg_2576, pk_ciphertext_addr_2_reg_2606, ap_CS_fsm_state9, pk_ciphertext_addr_4_reg_2641, pk_ciphertext_addr_8_reg_2671, ap_CS_fsm_state11, pk_ciphertext_addr_10_reg_2706, pk_ciphertext_addr_12_reg_2736, ap_CS_fsm_state13, pk_ciphertext_addr_14_reg_2771, pk_ciphertext_addr_16_reg_2801, ap_CS_fsm_state15, pk_ciphertext_addr_18_reg_2836, pk_ciphertext_addr_20_reg_2866, ap_CS_fsm_state17, pk_ciphertext_addr_22_reg_2901, pk_ciphertext_addr_24_reg_2931, ap_CS_fsm_state19, pk_ciphertext_addr_6_reg_2966, pk_ciphertext_addr_27_reg_2996, ap_CS_fsm_state21, pk_ciphertext_addr_7_reg_3031, pk_ciphertext_addr_30_reg_3061, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_30_reg_3061;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_7_reg_3031;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_27_reg_2996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_6_reg_2966;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_24_reg_2931;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_22_reg_2901;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_20_reg_2866;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_18_reg_2836;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_16_reg_2801;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_14_reg_2771;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_12_reg_2736;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_10_reg_2706;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_8_reg_2671;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_4_reg_2641;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_2_reg_2606;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pk_ciphertext_address0 <= pk_ciphertext_addr_reg_2576;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            pk_ciphertext_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            pk_ciphertext_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            pk_ciphertext_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            pk_ciphertext_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pk_ciphertext_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            pk_ciphertext_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            pk_ciphertext_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pk_ciphertext_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            pk_ciphertext_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_ciphertext_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pk_ciphertext_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pk_ciphertext_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pk_ciphertext_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pk_ciphertext_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pk_ciphertext_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pk_ciphertext_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            pk_ciphertext_address0 <= "XXXXX";
        end if; 
    end process;


    pk_ciphertext_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state7, pk_ciphertext_addr_1_reg_2581, pk_ciphertext_addr_3_reg_2611, ap_CS_fsm_state9, pk_ciphertext_addr_5_reg_2646, pk_ciphertext_addr_9_reg_2676, ap_CS_fsm_state11, pk_ciphertext_addr_11_reg_2711, pk_ciphertext_addr_13_reg_2741, ap_CS_fsm_state13, pk_ciphertext_addr_15_reg_2776, pk_ciphertext_addr_17_reg_2806, ap_CS_fsm_state15, pk_ciphertext_addr_19_reg_2841, pk_ciphertext_addr_21_reg_2871, ap_CS_fsm_state17, pk_ciphertext_addr_23_reg_2906, pk_ciphertext_addr_25_reg_2936, ap_CS_fsm_state19, pk_ciphertext_addr_26_reg_2971, pk_ciphertext_addr_28_reg_3001, ap_CS_fsm_state21, pk_ciphertext_addr_29_reg_3036, pk_ciphertext_addr_31_reg_3066, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_31_reg_3066;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_29_reg_3036;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_28_reg_3001;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_26_reg_2971;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_25_reg_2936;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_23_reg_2906;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_21_reg_2871;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_19_reg_2841;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_17_reg_2806;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_15_reg_2776;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_13_reg_2741;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_11_reg_2711;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_9_reg_2676;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_5_reg_2646;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_3_reg_2611;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pk_ciphertext_address1 <= pk_ciphertext_addr_1_reg_2581;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            pk_ciphertext_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            pk_ciphertext_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            pk_ciphertext_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            pk_ciphertext_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pk_ciphertext_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            pk_ciphertext_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            pk_ciphertext_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pk_ciphertext_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            pk_ciphertext_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_ciphertext_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pk_ciphertext_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pk_ciphertext_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pk_ciphertext_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pk_ciphertext_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pk_ciphertext_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pk_ciphertext_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            pk_ciphertext_address1 <= "XXXXX";
        end if; 
    end process;


    pk_ciphertext_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            pk_ciphertext_ce0 <= ap_const_logic_1;
        else 
            pk_ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ciphertext_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            pk_ciphertext_ce1 <= ap_const_logic_1;
        else 
            pk_ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ciphertext_d0_assign_proc : process(reg_2017, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, trunc_ln227_fu_2470_p1, trunc_ln227_4_fu_2476_p1, trunc_ln227_8_fu_2482_p1, trunc_ln227_11_fu_2488_p1, trunc_ln227_15_fu_2494_p1, trunc_ln227_19_fu_2500_p1, trunc_ln227_23_fu_2506_p1, trunc_ln227_27_fu_2512_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            pk_ciphertext_d0 <= trunc_ln227_27_fu_2512_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            pk_ciphertext_d0 <= trunc_ln227_23_fu_2506_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            pk_ciphertext_d0 <= trunc_ln227_19_fu_2500_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            pk_ciphertext_d0 <= trunc_ln227_15_fu_2494_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            pk_ciphertext_d0 <= trunc_ln227_11_fu_2488_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            pk_ciphertext_d0 <= trunc_ln227_8_fu_2482_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pk_ciphertext_d0 <= trunc_ln227_4_fu_2476_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            pk_ciphertext_d0 <= reg_2017;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pk_ciphertext_d0 <= trunc_ln227_fu_2470_p1;
        else 
            pk_ciphertext_d0 <= "XXXXXXXX";
        end if; 
    end process;


    pk_ciphertext_d1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, reg_2023, temp_q0, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            pk_ciphertext_d1 <= reg_2023;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            pk_ciphertext_d1 <= temp_q0(15 downto 8);
        else 
            pk_ciphertext_d1 <= "XXXXXXXX";
        end if; 
    end process;


    pk_ciphertext_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, empty_25_reg_2548, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((empty_25_reg_2548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            pk_ciphertext_we0 <= ap_const_logic_1;
        else 
            pk_ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ciphertext_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, empty_25_reg_2548, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((empty_25_reg_2548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            pk_ciphertext_we1 <= ap_const_logic_1;
        else 
            pk_ciphertext_we1 <= ap_const_logic_0;
        end if; 
    end process;

    pk_plaintext_addr_10_reg_2746 <= ap_const_lv64_A(5 - 1 downto 0);
    pk_plaintext_addr_11_reg_2751 <= ap_const_lv64_B(5 - 1 downto 0);
    pk_plaintext_addr_12_reg_2781 <= ap_const_lv64_C(5 - 1 downto 0);
    pk_plaintext_addr_13_reg_2786 <= ap_const_lv64_D(5 - 1 downto 0);
    pk_plaintext_addr_14_reg_2811 <= ap_const_lv64_E(5 - 1 downto 0);
    pk_plaintext_addr_15_reg_2816 <= ap_const_lv64_F(5 - 1 downto 0);
    pk_plaintext_addr_16_reg_2846 <= ap_const_lv64_10(5 - 1 downto 0);
    pk_plaintext_addr_17_reg_2851 <= ap_const_lv64_11(5 - 1 downto 0);
    pk_plaintext_addr_18_reg_2876 <= ap_const_lv64_12(5 - 1 downto 0);
    pk_plaintext_addr_19_reg_2881 <= ap_const_lv64_13(5 - 1 downto 0);
    pk_plaintext_addr_1_reg_2591 <= ap_const_lv64_1(5 - 1 downto 0);
    pk_plaintext_addr_20_reg_2911 <= ap_const_lv64_14(5 - 1 downto 0);
    pk_plaintext_addr_21_reg_2916 <= ap_const_lv64_15(5 - 1 downto 0);
    pk_plaintext_addr_22_reg_2941 <= ap_const_lv64_16(5 - 1 downto 0);
    pk_plaintext_addr_23_reg_2946 <= ap_const_lv64_17(5 - 1 downto 0);
    pk_plaintext_addr_24_reg_2976 <= ap_const_lv64_18(5 - 1 downto 0);
    pk_plaintext_addr_25_reg_2981 <= ap_const_lv64_19(5 - 1 downto 0);
    pk_plaintext_addr_26_reg_3006 <= ap_const_lv64_1A(5 - 1 downto 0);
    pk_plaintext_addr_27_reg_3011 <= ap_const_lv64_1B(5 - 1 downto 0);
    pk_plaintext_addr_28_reg_3041 <= ap_const_lv64_1C(5 - 1 downto 0);
    pk_plaintext_addr_29_reg_3046 <= ap_const_lv64_1D(5 - 1 downto 0);
    pk_plaintext_addr_2_reg_2616 <= ap_const_lv64_2(5 - 1 downto 0);
    pk_plaintext_addr_30_reg_3071 <= ap_const_lv64_1E(5 - 1 downto 0);
    pk_plaintext_addr_31_reg_3076 <= ap_const_lv64_1F(5 - 1 downto 0);
    pk_plaintext_addr_3_reg_2621 <= ap_const_lv64_3(5 - 1 downto 0);
    pk_plaintext_addr_4_reg_2651 <= ap_const_lv64_4(5 - 1 downto 0);
    pk_plaintext_addr_5_reg_2656 <= ap_const_lv64_5(5 - 1 downto 0);
    pk_plaintext_addr_6_reg_2681 <= ap_const_lv64_6(5 - 1 downto 0);
    pk_plaintext_addr_7_reg_2686 <= ap_const_lv64_7(5 - 1 downto 0);
    pk_plaintext_addr_8_reg_2716 <= ap_const_lv64_8(5 - 1 downto 0);
    pk_plaintext_addr_9_reg_2721 <= ap_const_lv64_9(5 - 1 downto 0);
    pk_plaintext_addr_reg_2586 <= ap_const_lv64_0(5 - 1 downto 0);

    pk_plaintext_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state7, pk_plaintext_addr_reg_2586, pk_plaintext_addr_2_reg_2616, ap_CS_fsm_state9, pk_plaintext_addr_4_reg_2651, pk_plaintext_addr_6_reg_2681, ap_CS_fsm_state11, pk_plaintext_addr_8_reg_2716, pk_plaintext_addr_10_reg_2746, ap_CS_fsm_state13, pk_plaintext_addr_12_reg_2781, pk_plaintext_addr_14_reg_2811, ap_CS_fsm_state15, pk_plaintext_addr_16_reg_2846, pk_plaintext_addr_18_reg_2876, ap_CS_fsm_state17, pk_plaintext_addr_20_reg_2911, pk_plaintext_addr_22_reg_2941, ap_CS_fsm_state19, pk_plaintext_addr_24_reg_2976, pk_plaintext_addr_26_reg_3006, ap_CS_fsm_state21, pk_plaintext_addr_28_reg_3041, pk_plaintext_addr_30_reg_3071, ap_CS_fsm_state23, grp_randombytes_fu_1933_x_address0, ap_CS_fsm_state4, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_30_reg_3071;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_28_reg_3041;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_26_reg_3006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_24_reg_2976;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_22_reg_2941;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_20_reg_2911;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_18_reg_2876;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_16_reg_2846;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_14_reg_2811;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_12_reg_2781;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_10_reg_2746;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_8_reg_2716;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_6_reg_2681;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_4_reg_2651;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_2_reg_2616;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            pk_plaintext_address0 <= pk_plaintext_addr_reg_2586;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            pk_plaintext_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            pk_plaintext_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            pk_plaintext_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            pk_plaintext_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pk_plaintext_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            pk_plaintext_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            pk_plaintext_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pk_plaintext_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            pk_plaintext_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_plaintext_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pk_plaintext_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pk_plaintext_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pk_plaintext_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pk_plaintext_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pk_plaintext_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pk_plaintext_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_plaintext_address0 <= grp_randombytes_fu_1933_x_address0;
        else 
            pk_plaintext_address0 <= "XXXXX";
        end if; 
    end process;


    pk_plaintext_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state7, pk_plaintext_addr_1_reg_2591, pk_plaintext_addr_3_reg_2621, ap_CS_fsm_state9, pk_plaintext_addr_5_reg_2656, pk_plaintext_addr_7_reg_2686, ap_CS_fsm_state11, pk_plaintext_addr_9_reg_2721, pk_plaintext_addr_11_reg_2751, ap_CS_fsm_state13, pk_plaintext_addr_13_reg_2786, pk_plaintext_addr_15_reg_2816, ap_CS_fsm_state15, pk_plaintext_addr_17_reg_2851, pk_plaintext_addr_19_reg_2881, ap_CS_fsm_state17, pk_plaintext_addr_21_reg_2916, pk_plaintext_addr_23_reg_2946, ap_CS_fsm_state19, pk_plaintext_addr_25_reg_2981, pk_plaintext_addr_27_reg_3011, ap_CS_fsm_state21, pk_plaintext_addr_29_reg_3046, pk_plaintext_addr_31_reg_3076, ap_CS_fsm_state23, grp_randombytes_fu_1933_x_address1, ap_CS_fsm_state4, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_31_reg_3076;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_29_reg_3046;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_27_reg_3011;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_25_reg_2981;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_23_reg_2946;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_21_reg_2916;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_19_reg_2881;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_17_reg_2851;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_15_reg_2816;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_13_reg_2786;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_11_reg_2751;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_9_reg_2721;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_7_reg_2686;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_5_reg_2656;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_3_reg_2621;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            pk_plaintext_address1 <= pk_plaintext_addr_1_reg_2591;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            pk_plaintext_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            pk_plaintext_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            pk_plaintext_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            pk_plaintext_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pk_plaintext_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            pk_plaintext_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            pk_plaintext_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pk_plaintext_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            pk_plaintext_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_plaintext_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pk_plaintext_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pk_plaintext_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pk_plaintext_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pk_plaintext_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pk_plaintext_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pk_plaintext_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_plaintext_address1 <= grp_randombytes_fu_1933_x_address1;
        else 
            pk_plaintext_address1 <= "XXXXX";
        end if; 
    end process;


    pk_plaintext_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, grp_randombytes_fu_1933_x_ce0, grp_LowMCEnc_fu_1948_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((grp_LowMCEnc_fu_1948_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            pk_plaintext_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_plaintext_ce0 <= grp_randombytes_fu_1933_x_ce0;
        else 
            pk_plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_plaintext_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, grp_randombytes_fu_1933_x_ce1, grp_LowMCEnc_fu_1948_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((grp_LowMCEnc_fu_1948_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            pk_plaintext_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_plaintext_ce1 <= grp_randombytes_fu_1933_x_ce1;
        else 
            pk_plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pk_plaintext_d0 <= grp_randombytes_fu_1933_x_d0;
    pk_plaintext_d1 <= grp_randombytes_fu_1933_x_d1;

    pk_plaintext_we0_assign_proc : process(grp_randombytes_fu_1933_x_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_plaintext_we0 <= grp_randombytes_fu_1933_x_we0;
        else 
            pk_plaintext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_plaintext_we1_assign_proc : process(grp_randombytes_fu_1933_x_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_plaintext_we1 <= grp_randombytes_fu_1933_x_we1;
        else 
            pk_plaintext_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln166_fu_2518_p3 <= 
        ap_const_lv32_FFFFFFFF when (ap_phi_mux_p_0_phi_fu_1925_p4(0) = '1') else 
        ap_const_lv32_0;

    sk_data_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, grp_randombytes_fu_1933_x_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sk_data_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sk_data_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sk_data_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sk_data_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sk_data_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sk_data_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sk_data_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sk_data_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sk_data_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sk_data_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sk_data_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sk_data_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sk_data_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sk_data_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk_data_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sk_data_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_data_address0 <= grp_randombytes_fu_1933_x_address0;
        else 
            sk_data_address0 <= "XXXXX";
        end if; 
    end process;


    sk_data_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, grp_randombytes_fu_1933_x_address1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            sk_data_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sk_data_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sk_data_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sk_data_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sk_data_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sk_data_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sk_data_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sk_data_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sk_data_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sk_data_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sk_data_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sk_data_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sk_data_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sk_data_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk_data_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sk_data_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_data_address1 <= grp_randombytes_fu_1933_x_address1;
        else 
            sk_data_address1 <= "XXXXX";
        end if; 
    end process;


    sk_data_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, grp_randombytes_fu_1933_x_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sk_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_data_ce0 <= grp_randombytes_fu_1933_x_ce0;
        else 
            sk_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_data_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, grp_randombytes_fu_1933_x_ce1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sk_data_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_data_ce1 <= grp_randombytes_fu_1933_x_ce1;
        else 
            sk_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sk_data_d0 <= grp_randombytes_fu_1933_x_d0;
    sk_data_d1 <= grp_randombytes_fu_1933_x_d1;

    sk_data_we0_assign_proc : process(grp_randombytes_fu_1933_x_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_data_we0 <= grp_randombytes_fu_1933_x_we0;
        else 
            sk_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_data_we1_assign_proc : process(grp_randombytes_fu_1933_x_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_data_we1 <= grp_randombytes_fu_1933_x_we1;
        else 
            sk_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_ciphertext_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sk_pk_ciphertext_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            sk_pk_ciphertext_address0 <= "XXXXX";
        end if; 
    end process;


    sk_pk_ciphertext_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sk_pk_ciphertext_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            sk_pk_ciphertext_address1 <= "XXXXX";
        end if; 
    end process;


    sk_pk_ciphertext_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sk_pk_ciphertext_ce0 <= ap_const_logic_1;
        else 
            sk_pk_ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_ciphertext_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sk_pk_ciphertext_ce1 <= ap_const_logic_1;
        else 
            sk_pk_ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_ciphertext_d0_assign_proc : process(reg_2017, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, trunc_ln227_fu_2470_p1, trunc_ln227_4_fu_2476_p1, trunc_ln227_8_fu_2482_p1, trunc_ln227_11_fu_2488_p1, trunc_ln227_15_fu_2494_p1, trunc_ln227_19_fu_2500_p1, trunc_ln227_23_fu_2506_p1, trunc_ln227_27_fu_2512_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sk_pk_ciphertext_d0 <= trunc_ln227_27_fu_2512_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            sk_pk_ciphertext_d0 <= trunc_ln227_23_fu_2506_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            sk_pk_ciphertext_d0 <= trunc_ln227_19_fu_2500_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sk_pk_ciphertext_d0 <= trunc_ln227_15_fu_2494_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sk_pk_ciphertext_d0 <= trunc_ln227_11_fu_2488_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sk_pk_ciphertext_d0 <= trunc_ln227_8_fu_2482_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sk_pk_ciphertext_d0 <= trunc_ln227_4_fu_2476_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            sk_pk_ciphertext_d0 <= reg_2017;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sk_pk_ciphertext_d0 <= trunc_ln227_fu_2470_p1;
        else 
            sk_pk_ciphertext_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sk_pk_ciphertext_d1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, reg_2023, temp_q0, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            sk_pk_ciphertext_d1 <= reg_2023;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            sk_pk_ciphertext_d1 <= temp_q0(15 downto 8);
        else 
            sk_pk_ciphertext_d1 <= "XXXXXXXX";
        end if; 
    end process;


    sk_pk_ciphertext_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, empty_25_reg_2548, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((empty_25_reg_2548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            sk_pk_ciphertext_we0 <= ap_const_logic_1;
        else 
            sk_pk_ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_ciphertext_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, empty_25_reg_2548, ap_CS_fsm_state42, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((empty_25_reg_2548 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            sk_pk_ciphertext_we1 <= ap_const_logic_1;
        else 
            sk_pk_ciphertext_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_plaintext_address0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sk_pk_plaintext_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            sk_pk_plaintext_address0 <= "XXXXX";
        end if; 
    end process;


    sk_pk_plaintext_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sk_pk_plaintext_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            sk_pk_plaintext_address1 <= "XXXXX";
        end if; 
    end process;


    sk_pk_plaintext_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, grp_LowMCEnc_fu_1948_ap_done, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((grp_LowMCEnc_fu_1948_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            sk_pk_plaintext_ce0 <= ap_const_logic_1;
        else 
            sk_pk_plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_plaintext_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, grp_LowMCEnc_fu_1948_ap_done, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((grp_LowMCEnc_fu_1948_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            sk_pk_plaintext_ce1 <= ap_const_logic_1;
        else 
            sk_pk_plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sk_pk_plaintext_d0 <= pk_plaintext_q0;
    sk_pk_plaintext_d1 <= pk_plaintext_q1;

    sk_pk_plaintext_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, grp_LowMCEnc_fu_1948_ap_done, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((grp_LowMCEnc_fu_1948_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            sk_pk_plaintext_we0 <= ap_const_logic_1;
        else 
            sk_pk_plaintext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_plaintext_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, grp_LowMCEnc_fu_1948_ap_done, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((grp_LowMCEnc_fu_1948_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            sk_pk_plaintext_we1 <= ap_const_logic_1;
        else 
            sk_pk_plaintext_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, grp_LowMCEnc_fu_1948_plaintext_address0, ap_CS_fsm_state25, zext_ln211_1_fu_2130_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            temp2_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp2_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp2_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp2_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp2_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp2_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp2_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp2_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp2_address0 <= zext_ln211_1_fu_2130_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp2_address0 <= grp_LowMCEnc_fu_1948_plaintext_address0;
        else 
            temp2_address0 <= "XXX";
        end if; 
    end process;


    temp2_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, grp_LowMCEnc_fu_1948_plaintext_ce0, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            temp2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp2_ce0 <= grp_LowMCEnc_fu_1948_plaintext_ce0;
        else 
            temp2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_ce1_assign_proc : process(grp_LowMCEnc_fu_1948_plaintext_ce1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp2_ce1 <= grp_LowMCEnc_fu_1948_plaintext_ce1;
        else 
            temp2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, or_ln216_2_fu_2171_p5, or_ln216_2_1_fu_2210_p5, or_ln216_2_2_fu_2249_p5, or_ln216_2_3_fu_2288_p5, or_ln216_2_4_fu_2327_p5, or_ln216_2_5_fu_2366_p5, or_ln216_2_6_fu_2405_p5, or_ln216_2_7_fu_2444_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            temp2_d0 <= or_ln216_2_7_fu_2444_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp2_d0 <= or_ln216_2_6_fu_2405_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp2_d0 <= or_ln216_2_5_fu_2366_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp2_d0 <= or_ln216_2_4_fu_2327_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp2_d0 <= or_ln216_2_3_fu_2288_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp2_d0 <= or_ln216_2_2_fu_2249_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp2_d0 <= or_ln216_2_1_fu_2210_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp2_d0 <= or_ln216_2_fu_2171_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp2_d0 <= ap_const_lv32_0;
        else 
            temp2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp2_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            temp2_we0 <= ap_const_logic_1;
        else 
            temp2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp3_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, grp_LowMCEnc_fu_1948_key_address0, ap_CS_fsm_state25, zext_ln211_2_fu_2147_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            temp3_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp3_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp3_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp3_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp3_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp3_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp3_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp3_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp3_address0 <= zext_ln211_2_fu_2147_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp3_address0 <= grp_LowMCEnc_fu_1948_key_address0;
        else 
            temp3_address0 <= "XXX";
        end if; 
    end process;


    temp3_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, grp_LowMCEnc_fu_1948_key_ce0, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp3_ce0 <= grp_LowMCEnc_fu_1948_key_ce0;
        else 
            temp3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp3_ce1_assign_proc : process(grp_LowMCEnc_fu_1948_key_ce1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp3_ce1 <= grp_LowMCEnc_fu_1948_key_ce1;
        else 
            temp3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp3_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, or_ln217_2_fu_2184_p5, or_ln217_2_1_fu_2223_p5, or_ln217_2_2_fu_2262_p5, or_ln217_2_3_fu_2301_p5, or_ln217_2_4_fu_2340_p5, or_ln217_2_5_fu_2379_p5, or_ln217_2_6_fu_2418_p5, or_ln217_2_7_fu_2457_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            temp3_d0 <= or_ln217_2_7_fu_2457_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp3_d0 <= or_ln217_2_6_fu_2418_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp3_d0 <= or_ln217_2_5_fu_2379_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp3_d0 <= or_ln217_2_4_fu_2340_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp3_d0 <= or_ln217_2_3_fu_2301_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp3_d0 <= or_ln217_2_2_fu_2262_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp3_d0 <= or_ln217_2_1_fu_2223_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp3_d0 <= or_ln217_2_fu_2184_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp3_d0 <= ap_const_lv32_0;
        else 
            temp3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp3_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp3_we0 <= ap_const_logic_1;
        else 
            temp3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_addr_1_reg_2636 <= ap_const_lv64_0(3 - 1 downto 0);
    temp_addr_2_reg_2701 <= ap_const_lv64_1(3 - 1 downto 0);
    temp_addr_3_reg_2766 <= ap_const_lv64_2(3 - 1 downto 0);
    temp_addr_4_reg_2831 <= ap_const_lv64_3(3 - 1 downto 0);
    temp_addr_5_reg_2896 <= ap_const_lv64_4(3 - 1 downto 0);
    temp_addr_6_reg_2961 <= ap_const_lv64_5(3 - 1 downto 0);
    temp_addr_7_reg_3026 <= ap_const_lv64_6(3 - 1 downto 0);
    temp_addr_8_reg_3091 <= ap_const_lv64_7(3 - 1 downto 0);

    temp_address0_assign_proc : process(ap_CS_fsm_state5, temp_addr_1_reg_2636, ap_CS_fsm_state9, temp_addr_2_reg_2701, ap_CS_fsm_state11, temp_addr_3_reg_2766, ap_CS_fsm_state13, temp_addr_4_reg_2831, ap_CS_fsm_state15, temp_addr_5_reg_2896, ap_CS_fsm_state17, temp_addr_6_reg_2961, ap_CS_fsm_state19, temp_addr_7_reg_3026, ap_CS_fsm_state21, temp_addr_8_reg_3091, ap_CS_fsm_state23, grp_LowMCEnc_fu_1948_output_r_address0, ap_CS_fsm_state25, zext_ln211_fu_2113_p1, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            temp_address0 <= temp_addr_8_reg_3091;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            temp_address0 <= temp_addr_7_reg_3026;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            temp_address0 <= temp_addr_6_reg_2961;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            temp_address0 <= temp_addr_5_reg_2896;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            temp_address0 <= temp_addr_4_reg_2831;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            temp_address0 <= temp_addr_3_reg_2766;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp_address0 <= temp_addr_2_reg_2701;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            temp_address0 <= temp_addr_1_reg_2636;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            temp_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_address0 <= zext_ln211_fu_2113_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_address0 <= grp_LowMCEnc_fu_1948_output_r_address0;
        else 
            temp_address0 <= "XXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, grp_LowMCEnc_fu_1948_output_r_ce0, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_ce0 <= grp_LowMCEnc_fu_1948_output_r_ce0;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(grp_LowMCEnc_fu_1948_output_r_ce1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_ce1 <= grp_LowMCEnc_fu_1948_output_r_ce1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, grp_LowMCEnc_fu_1948_output_r_d0, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, or_ln215_5_fu_2158_p5, or_ln215_5_1_fu_2197_p5, or_ln215_5_2_fu_2236_p5, or_ln215_5_3_fu_2275_p5, or_ln215_5_4_fu_2314_p5, or_ln215_5_5_fu_2353_p5, or_ln215_5_6_fu_2392_p5, or_ln215_5_7_fu_2431_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            temp_d0 <= or_ln215_5_7_fu_2431_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp_d0 <= or_ln215_5_6_fu_2392_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp_d0 <= or_ln215_5_5_fu_2353_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp_d0 <= or_ln215_5_4_fu_2314_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_d0 <= or_ln215_5_3_fu_2275_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_d0 <= or_ln215_5_2_fu_2236_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_d0 <= or_ln215_5_1_fu_2197_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_d0 <= or_ln215_5_fu_2158_p5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_d0 <= grp_LowMCEnc_fu_1948_output_r_d0;
        else 
            temp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, grp_LowMCEnc_fu_1948_output_r_we0, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            temp_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_we0 <= grp_LowMCEnc_fu_1948_output_r_we0;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we1_assign_proc : process(grp_LowMCEnc_fu_1948_output_r_we1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_we1 <= grp_LowMCEnc_fu_1948_output_r_we1;
        else 
            temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln227_11_fu_2488_p1 <= temp_q0(8 - 1 downto 0);
    trunc_ln227_15_fu_2494_p1 <= temp_q0(8 - 1 downto 0);
    trunc_ln227_19_fu_2500_p1 <= temp_q0(8 - 1 downto 0);
    trunc_ln227_23_fu_2506_p1 <= temp_q0(8 - 1 downto 0);
    trunc_ln227_27_fu_2512_p1 <= temp_q0(8 - 1 downto 0);
    trunc_ln227_4_fu_2476_p1 <= temp_q0(8 - 1 downto 0);
    trunc_ln227_8_fu_2482_p1 <= temp_q0(8 - 1 downto 0);
    trunc_ln227_fu_2470_p1 <= temp_q0(8 - 1 downto 0);
    zext_ln211_1_fu_2130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln211_1_reg_1899),64));
    zext_ln211_2_fu_2147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln211_2_reg_1910),64));
    zext_ln211_fu_2113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln211_reg_1888),64));
end behav;
