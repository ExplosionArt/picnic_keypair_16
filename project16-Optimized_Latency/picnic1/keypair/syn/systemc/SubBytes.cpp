// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "SubBytes.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic SubBytes::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic SubBytes::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> SubBytes::ap_ST_fsm_state1 = "1";
const sc_lv<5> SubBytes::ap_ST_fsm_state2 = "10";
const sc_lv<5> SubBytes::ap_ST_fsm_state3 = "100";
const sc_lv<5> SubBytes::ap_ST_fsm_state4 = "1000";
const sc_lv<5> SubBytes::ap_ST_fsm_state5 = "10000";
const sc_lv<32> SubBytes::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> SubBytes::ap_const_lv32_1 = "1";
const sc_lv<1> SubBytes::ap_const_lv1_0 = "0";
const sc_lv<32> SubBytes::ap_const_lv32_2 = "10";
const sc_lv<32> SubBytes::ap_const_lv32_3 = "11";
const sc_lv<3> SubBytes::ap_const_lv3_0 = "000";
const sc_lv<32> SubBytes::ap_const_lv32_4 = "100";
const sc_lv<3> SubBytes::ap_const_lv3_4 = "100";
const sc_lv<3> SubBytes::ap_const_lv3_1 = "1";
const sc_lv<61> SubBytes::ap_const_lv61_1 = "1";
const sc_lv<1> SubBytes::ap_const_lv1_1 = "1";
const bool SubBytes::ap_const_boolean_1 = true;

SubBytes::SubBytes(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new KeyExpansion_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(sbox_address1);
    sbox_U->ce1(sbox_ce1);
    sbox_U->q1(sbox_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln263_fu_120_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln263_fu_120_p2 );

    SC_METHOD(thread_i_fu_126_p2);
    sensitive << ( i_0_reg_108 );

    SC_METHOD(thread_icmp_ln263_fu_120_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_108 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln268_1_fu_165_p1 );
    sensitive << ( zext_ln268_3_fu_175_p1 );

    SC_METHOD(thread_sbox_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln268_2_fu_170_p1 );
    sensitive << ( zext_ln268_4_fu_180_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sbox_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sext_ln268_fu_157_p1);
    sensitive << ( xor_ln268_reg_198 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_addr_reg_193 );
    sensitive << ( state_addr_2_reg_208 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln268_fu_132_p1 );
    sensitive << ( tmp_fu_148_p3 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_addr_1_reg_203 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( state_addr_3_reg_213 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln268_5_fu_143_p1 );
    sensitive << ( zext_ln268_6_fu_160_p1 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_d0);
    sensitive << ( sbox_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_d1);
    sensitive << ( sbox_q1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_fu_148_p3);
    sensitive << ( i_0_reg_108 );

    SC_METHOD(thread_xor_ln268_fu_137_p2);
    sensitive << ( i_0_reg_108 );

    SC_METHOD(thread_zext_ln268_1_fu_165_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_zext_ln268_2_fu_170_p1);
    sensitive << ( state_q1 );

    SC_METHOD(thread_zext_ln268_3_fu_175_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_zext_ln268_4_fu_180_p1);
    sensitive << ( state_q1 );

    SC_METHOD(thread_zext_ln268_5_fu_143_p1);
    sensitive << ( xor_ln268_fu_137_p2 );

    SC_METHOD(thread_zext_ln268_6_fu_160_p1);
    sensitive << ( sext_ln268_fu_157_p1 );

    SC_METHOD(thread_zext_ln268_fu_132_p1);
    sensitive << ( i_0_reg_108 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln263_fu_120_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "SubBytes_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_address1, "sbox_address1");
    sc_trace(mVcdFile, sbox_ce1, "sbox_ce1");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, i_fu_126_p2, "i_fu_126_p2");
    sc_trace(mVcdFile, i_reg_188, "i_reg_188");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, state_addr_reg_193, "state_addr_reg_193");
    sc_trace(mVcdFile, icmp_ln263_fu_120_p2, "icmp_ln263_fu_120_p2");
    sc_trace(mVcdFile, xor_ln268_fu_137_p2, "xor_ln268_fu_137_p2");
    sc_trace(mVcdFile, xor_ln268_reg_198, "xor_ln268_reg_198");
    sc_trace(mVcdFile, state_addr_1_reg_203, "state_addr_1_reg_203");
    sc_trace(mVcdFile, state_addr_2_reg_208, "state_addr_2_reg_208");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, state_addr_3_reg_213, "state_addr_3_reg_213");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_0_reg_108, "i_0_reg_108");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln268_fu_132_p1, "zext_ln268_fu_132_p1");
    sc_trace(mVcdFile, zext_ln268_5_fu_143_p1, "zext_ln268_5_fu_143_p1");
    sc_trace(mVcdFile, tmp_fu_148_p3, "tmp_fu_148_p3");
    sc_trace(mVcdFile, zext_ln268_6_fu_160_p1, "zext_ln268_6_fu_160_p1");
    sc_trace(mVcdFile, zext_ln268_1_fu_165_p1, "zext_ln268_1_fu_165_p1");
    sc_trace(mVcdFile, zext_ln268_2_fu_170_p1, "zext_ln268_2_fu_170_p1");
    sc_trace(mVcdFile, zext_ln268_3_fu_175_p1, "zext_ln268_3_fu_175_p1");
    sc_trace(mVcdFile, zext_ln268_4_fu_180_p1, "zext_ln268_4_fu_180_p1");
    sc_trace(mVcdFile, sext_ln268_fu_157_p1, "sext_ln268_fu_157_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

SubBytes::~SubBytes() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
}

void SubBytes::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_108 = i_reg_188.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_108 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_188 = i_fu_126_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln263_fu_120_p2.read(), ap_const_lv1_0))) {
        state_addr_1_reg_203 =  (sc_lv<4>) (zext_ln268_5_fu_143_p1.read());
        state_addr_reg_193 =  (sc_lv<4>) (zext_ln268_fu_132_p1.read());
        xor_ln268_reg_198 = xor_ln268_fu_137_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_addr_2_reg_208 =  (sc_lv<4>) (tmp_fu_148_p3.read());
        state_addr_3_reg_213 =  (sc_lv<4>) (zext_ln268_6_fu_160_p1.read());
    }
}

void SubBytes::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void SubBytes::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void SubBytes::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void SubBytes::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void SubBytes::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void SubBytes::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln263_fu_120_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void SubBytes::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void SubBytes::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln263_fu_120_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void SubBytes::thread_i_fu_126_p2() {
    i_fu_126_p2 = (!i_0_reg_108.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_108.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void SubBytes::thread_icmp_ln263_fu_120_p2() {
    icmp_ln263_fu_120_p2 = (!i_0_reg_108.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_108.read() == ap_const_lv3_4);
}

void SubBytes::thread_sbox_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln268_3_fu_175_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln268_1_fu_165_p1.read());
    } else {
        sbox_address0 = "XXXXXXXX";
    }
}

void SubBytes::thread_sbox_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sbox_address1 =  (sc_lv<8>) (zext_ln268_4_fu_180_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sbox_address1 =  (sc_lv<8>) (zext_ln268_2_fu_170_p1.read());
    } else {
        sbox_address1 = "XXXXXXXX";
    }
}

void SubBytes::thread_sbox_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        sbox_ce1 = ap_const_logic_1;
    } else {
        sbox_ce1 = ap_const_logic_0;
    }
}

void SubBytes::thread_sext_ln268_fu_157_p1() {
    sext_ln268_fu_157_p1 = esl_sext<4,3>(xor_ln268_reg_198.read());
}

void SubBytes::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address0 = state_addr_2_reg_208.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address0 = state_addr_reg_193.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 =  (sc_lv<4>) (tmp_fu_148_p3.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address0 =  (sc_lv<4>) (zext_ln268_fu_132_p1.read());
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void SubBytes::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address1 = state_addr_3_reg_213.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address1 = state_addr_1_reg_203.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address1 =  (sc_lv<4>) (zext_ln268_6_fu_160_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address1 =  (sc_lv<4>) (zext_ln268_5_fu_143_p1.read());
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void SubBytes::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void SubBytes::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void SubBytes::thread_state_d0() {
    state_d0 = sbox_q0.read();
}

void SubBytes::thread_state_d1() {
    state_d1 = sbox_q1.read();
}

void SubBytes::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void SubBytes::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void SubBytes::thread_tmp_fu_148_p3() {
    tmp_fu_148_p3 = esl_concat<61,3>(ap_const_lv61_1, i_0_reg_108.read());
}

void SubBytes::thread_xor_ln268_fu_137_p2() {
    xor_ln268_fu_137_p2 = (i_0_reg_108.read() ^ ap_const_lv3_4);
}

void SubBytes::thread_zext_ln268_1_fu_165_p1() {
    zext_ln268_1_fu_165_p1 = esl_zext<64,8>(state_q0.read());
}

void SubBytes::thread_zext_ln268_2_fu_170_p1() {
    zext_ln268_2_fu_170_p1 = esl_zext<64,8>(state_q1.read());
}

void SubBytes::thread_zext_ln268_3_fu_175_p1() {
    zext_ln268_3_fu_175_p1 = esl_zext<64,8>(state_q0.read());
}

void SubBytes::thread_zext_ln268_4_fu_180_p1() {
    zext_ln268_4_fu_180_p1 = esl_zext<64,8>(state_q1.read());
}

void SubBytes::thread_zext_ln268_5_fu_143_p1() {
    zext_ln268_5_fu_143_p1 = esl_zext<64,3>(xor_ln268_fu_137_p2.read());
}

void SubBytes::thread_zext_ln268_6_fu_160_p1() {
    zext_ln268_6_fu_160_p1 = esl_zext<64,4>(sext_ln268_fu_157_p1.read());
}

void SubBytes::thread_zext_ln268_fu_132_p1() {
    zext_ln268_fu_132_p1 = esl_zext<64,3>(i_0_reg_108.read());
}

void SubBytes::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln263_fu_120_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

