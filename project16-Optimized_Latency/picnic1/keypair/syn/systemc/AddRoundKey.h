// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AddRoundKey_HH_
#define _AddRoundKey_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AddRoundKey : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<5> > round;
    sc_out< sc_lv<4> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_in< sc_lv<8> > state_q0;
    sc_out< sc_lv<4> > state_address1;
    sc_out< sc_logic > state_ce1;
    sc_out< sc_logic > state_we1;
    sc_out< sc_lv<8> > state_d1;
    sc_in< sc_lv<8> > state_q1;
    sc_out< sc_lv<8> > RoundKey_address0;
    sc_out< sc_logic > RoundKey_ce0;
    sc_in< sc_lv<8> > RoundKey_q0;
    sc_out< sc_lv<8> > RoundKey_address1;
    sc_out< sc_logic > RoundKey_ce1;
    sc_in< sc_lv<8> > RoundKey_q1;


    // Module declarations
    AddRoundKey(sc_module_name name);
    SC_HAS_PROCESS(AddRoundKey);

    ~AddRoundKey();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > grp_fu_145_p2;
    sc_signal< sc_lv<8> > reg_157;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > grp_fu_151_p2;
    sc_signal< sc_lv<8> > reg_162;
    sc_signal< sc_lv<3> > i_fu_173_p2;
    sc_signal< sc_lv<3> > i_reg_296;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > tmp_s_fu_183_p3;
    sc_signal< sc_lv<5> > tmp_s_reg_301;
    sc_signal< sc_lv<1> > icmp_ln248_fu_167_p2;
    sc_signal< sc_lv<4> > state_addr_reg_307;
    sc_signal< sc_lv<4> > state_addr_1_reg_312;
    sc_signal< sc_lv<8> > add_ln_fu_214_p4;
    sc_signal< sc_lv<8> > add_ln_reg_317;
    sc_signal< sc_lv<4> > state_addr_2_reg_333;
    sc_signal< sc_lv<4> > state_addr_3_reg_338;
    sc_signal< sc_lv<3> > i_0_reg_134;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > zext_ln253_fu_191_p1;
    sc_signal< sc_lv<64> > tmp_1_fu_202_p3;
    sc_signal< sc_lv<64> > zext_ln253_1_fu_224_p1;
    sc_signal< sc_lv<64> > zext_ln253_2_fu_235_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_245_p3;
    sc_signal< sc_lv<64> > tmp_3_fu_259_p3;
    sc_signal< sc_lv<64> > zext_ln253_3_fu_273_p1;
    sc_signal< sc_lv<64> > zext_ln253_4_fu_283_p1;
    sc_signal< sc_lv<5> > or_ln253_3_fu_196_p2;
    sc_signal< sc_lv<4> > trunc_ln253_1_fu_211_p1;
    sc_signal< sc_lv<2> > trunc_ln253_fu_179_p1;
    sc_signal< sc_lv<8> > or_ln253_fu_229_p2;
    sc_signal< sc_lv<5> > or_ln253_4_fu_240_p2;
    sc_signal< sc_lv<5> > or_ln253_5_fu_254_p2;
    sc_signal< sc_lv<8> > or_ln253_1_fu_268_p2;
    sc_signal< sc_lv<8> > or_ln253_2_fu_278_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<59> ap_const_lv59_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<5> ap_const_lv5_3;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_RoundKey_address0();
    void thread_RoundKey_address1();
    void thread_RoundKey_ce0();
    void thread_RoundKey_ce1();
    void thread_add_ln_fu_214_p4();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_145_p2();
    void thread_grp_fu_151_p2();
    void thread_i_fu_173_p2();
    void thread_icmp_ln248_fu_167_p2();
    void thread_or_ln253_1_fu_268_p2();
    void thread_or_ln253_2_fu_278_p2();
    void thread_or_ln253_3_fu_196_p2();
    void thread_or_ln253_4_fu_240_p2();
    void thread_or_ln253_5_fu_254_p2();
    void thread_or_ln253_fu_229_p2();
    void thread_state_address0();
    void thread_state_address1();
    void thread_state_ce0();
    void thread_state_ce1();
    void thread_state_d0();
    void thread_state_d1();
    void thread_state_we0();
    void thread_state_we1();
    void thread_tmp_1_fu_202_p3();
    void thread_tmp_2_fu_245_p3();
    void thread_tmp_3_fu_259_p3();
    void thread_tmp_s_fu_183_p3();
    void thread_trunc_ln253_1_fu_211_p1();
    void thread_trunc_ln253_fu_179_p1();
    void thread_zext_ln253_1_fu_224_p1();
    void thread_zext_ln253_2_fu_235_p1();
    void thread_zext_ln253_3_fu_273_p1();
    void thread_zext_ln253_4_fu_283_p1();
    void thread_zext_ln253_fu_191_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
