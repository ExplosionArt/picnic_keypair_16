// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "picnic_keygen.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic picnic_keygen::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic picnic_keygen::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<42> picnic_keygen::ap_ST_fsm_state1 = "1";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state2 = "10";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state3 = "100";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state4 = "1000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state5 = "10000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state6 = "100000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state7 = "1000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state8 = "10000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state9 = "100000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state10 = "1000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state11 = "10000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state12 = "100000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<42> picnic_keygen::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<32> picnic_keygen::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> picnic_keygen::ap_const_lv32_7 = "111";
const sc_lv<32> picnic_keygen::ap_const_lv32_9 = "1001";
const sc_lv<32> picnic_keygen::ap_const_lv32_B = "1011";
const sc_lv<32> picnic_keygen::ap_const_lv32_D = "1101";
const sc_lv<32> picnic_keygen::ap_const_lv32_F = "1111";
const sc_lv<32> picnic_keygen::ap_const_lv32_11 = "10001";
const sc_lv<32> picnic_keygen::ap_const_lv32_13 = "10011";
const sc_lv<32> picnic_keygen::ap_const_lv32_15 = "10101";
const sc_lv<32> picnic_keygen::ap_const_lv32_1A = "11010";
const sc_lv<32> picnic_keygen::ap_const_lv32_1C = "11100";
const sc_lv<32> picnic_keygen::ap_const_lv32_1E = "11110";
const sc_lv<32> picnic_keygen::ap_const_lv32_20 = "100000";
const sc_lv<32> picnic_keygen::ap_const_lv32_22 = "100010";
const sc_lv<32> picnic_keygen::ap_const_lv32_24 = "100100";
const sc_lv<32> picnic_keygen::ap_const_lv32_26 = "100110";
const sc_lv<32> picnic_keygen::ap_const_lv32_28 = "101000";
const sc_lv<32> picnic_keygen::ap_const_lv32_4 = "100";
const sc_lv<32> picnic_keygen::ap_const_lv32_5 = "101";
const sc_lv<32> picnic_keygen::ap_const_lv32_6 = "110";
const sc_lv<1> picnic_keygen::ap_const_lv1_1 = "1";
const sc_lv<32> picnic_keygen::ap_const_lv32_8 = "1000";
const sc_lv<32> picnic_keygen::ap_const_lv32_A = "1010";
const sc_lv<32> picnic_keygen::ap_const_lv32_C = "1100";
const sc_lv<32> picnic_keygen::ap_const_lv32_E = "1110";
const sc_lv<32> picnic_keygen::ap_const_lv32_10 = "10000";
const sc_lv<32> picnic_keygen::ap_const_lv32_12 = "10010";
const sc_lv<32> picnic_keygen::ap_const_lv32_14 = "10100";
const sc_lv<32> picnic_keygen::ap_const_lv32_16 = "10110";
const sc_lv<3> picnic_keygen::ap_const_lv3_0 = "000";
const sc_lv<32> picnic_keygen::ap_const_lv32_3 = "11";
const sc_lv<1> picnic_keygen::ap_const_lv1_0 = "0";
const sc_lv<32> picnic_keygen::ap_const_lv32_29 = "101001";
const sc_lv<32> picnic_keygen::ap_const_lv32_2 = "10";
const sc_lv<32> picnic_keygen::ap_const_lv32_1 = "1";
const sc_lv<32> picnic_keygen::ap_const_lv32_17 = "10111";
const sc_lv<32> picnic_keygen::ap_const_lv32_18 = "11000";
const sc_lv<64> picnic_keygen::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> picnic_keygen::ap_const_lv64_1 = "1";
const sc_lv<64> picnic_keygen::ap_const_lv64_2 = "10";
const sc_lv<64> picnic_keygen::ap_const_lv64_3 = "11";
const sc_lv<64> picnic_keygen::ap_const_lv64_4 = "100";
const sc_lv<64> picnic_keygen::ap_const_lv64_5 = "101";
const sc_lv<64> picnic_keygen::ap_const_lv64_6 = "110";
const sc_lv<64> picnic_keygen::ap_const_lv64_7 = "111";
const sc_lv<64> picnic_keygen::ap_const_lv64_8 = "1000";
const sc_lv<64> picnic_keygen::ap_const_lv64_9 = "1001";
const sc_lv<64> picnic_keygen::ap_const_lv64_A = "1010";
const sc_lv<64> picnic_keygen::ap_const_lv64_B = "1011";
const sc_lv<64> picnic_keygen::ap_const_lv64_C = "1100";
const sc_lv<64> picnic_keygen::ap_const_lv64_D = "1101";
const sc_lv<64> picnic_keygen::ap_const_lv64_E = "1110";
const sc_lv<64> picnic_keygen::ap_const_lv64_F = "1111";
const sc_lv<64> picnic_keygen::ap_const_lv64_10 = "10000";
const sc_lv<64> picnic_keygen::ap_const_lv64_11 = "10001";
const sc_lv<64> picnic_keygen::ap_const_lv64_12 = "10010";
const sc_lv<64> picnic_keygen::ap_const_lv64_13 = "10011";
const sc_lv<64> picnic_keygen::ap_const_lv64_14 = "10100";
const sc_lv<64> picnic_keygen::ap_const_lv64_15 = "10101";
const sc_lv<64> picnic_keygen::ap_const_lv64_16 = "10110";
const sc_lv<64> picnic_keygen::ap_const_lv64_17 = "10111";
const sc_lv<64> picnic_keygen::ap_const_lv64_18 = "11000";
const sc_lv<64> picnic_keygen::ap_const_lv64_19 = "11001";
const sc_lv<64> picnic_keygen::ap_const_lv64_1A = "11010";
const sc_lv<64> picnic_keygen::ap_const_lv64_1B = "11011";
const sc_lv<64> picnic_keygen::ap_const_lv64_1C = "11100";
const sc_lv<64> picnic_keygen::ap_const_lv64_1D = "11101";
const sc_lv<64> picnic_keygen::ap_const_lv64_1E = "11110";
const sc_lv<64> picnic_keygen::ap_const_lv64_1F = "11111";
const sc_lv<32> picnic_keygen::ap_const_lv32_19 = "11001";
const sc_lv<32> picnic_keygen::ap_const_lv32_1B = "11011";
const sc_lv<32> picnic_keygen::ap_const_lv32_1D = "11101";
const sc_lv<32> picnic_keygen::ap_const_lv32_1F = "11111";
const sc_lv<32> picnic_keygen::ap_const_lv32_21 = "100001";
const sc_lv<32> picnic_keygen::ap_const_lv32_23 = "100011";
const sc_lv<32> picnic_keygen::ap_const_lv32_25 = "100101";
const sc_lv<32> picnic_keygen::ap_const_lv32_27 = "100111";
const sc_lv<4> picnic_keygen::ap_const_lv4_F = "1111";
const sc_lv<4> picnic_keygen::ap_const_lv4_E = "1110";
const sc_lv<4> picnic_keygen::ap_const_lv4_D = "1101";
const sc_lv<4> picnic_keygen::ap_const_lv4_C = "1100";
const sc_lv<4> picnic_keygen::ap_const_lv4_B = "1011";
const sc_lv<4> picnic_keygen::ap_const_lv4_A = "1010";
const sc_lv<4> picnic_keygen::ap_const_lv4_0 = "0000";
const sc_lv<3> picnic_keygen::ap_const_lv3_1 = "1";
const sc_lv<3> picnic_keygen::ap_const_lv3_7 = "111";
const sc_lv<32> picnic_keygen::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const bool picnic_keygen::ap_const_boolean_1 = true;

picnic_keygen::picnic_keygen(sc_module_name name) : sc_module(name), mVcdFile(0) {
    temp_U = new picnic_keygen_temp("temp_U");
    temp_U->clk(ap_clk);
    temp_U->reset(ap_rst);
    temp_U->address0(temp_address0);
    temp_U->ce0(temp_ce0);
    temp_U->we0(temp_we0);
    temp_U->d0(temp_d0);
    temp_U->q0(temp_q0);
    temp_U->address1(grp_LowMCEnc_fu_1948_output_r_address1);
    temp_U->ce1(temp_ce1);
    temp_U->we1(temp_we1);
    temp_U->d1(grp_LowMCEnc_fu_1948_output_r_d1);
    temp_U->q1(temp_q1);
    temp2_U = new picnic_keygen_temp2("temp2_U");
    temp2_U->clk(ap_clk);
    temp2_U->reset(ap_rst);
    temp2_U->address0(temp2_address0);
    temp2_U->ce0(temp2_ce0);
    temp2_U->we0(temp2_we0);
    temp2_U->d0(temp2_d0);
    temp2_U->q0(temp2_q0);
    temp2_U->address1(grp_LowMCEnc_fu_1948_plaintext_address1);
    temp2_U->ce1(temp2_ce1);
    temp2_U->q1(temp2_q1);
    temp3_U = new picnic_keygen_temp2("temp3_U");
    temp3_U->clk(ap_clk);
    temp3_U->reset(ap_rst);
    temp3_U->address0(temp3_address0);
    temp3_U->ce0(temp3_ce0);
    temp3_U->we0(temp3_we0);
    temp3_U->d0(temp3_d0);
    temp3_U->q0(temp3_q0);
    temp3_U->address1(grp_LowMCEnc_fu_1948_key_address1);
    temp3_U->ce1(temp3_ce1);
    temp3_U->q1(temp3_q1);
    grp_randombytes_fu_1933 = new randombytes("grp_randombytes_fu_1933");
    grp_randombytes_fu_1933->ap_clk(ap_clk);
    grp_randombytes_fu_1933->ap_rst(ap_rst);
    grp_randombytes_fu_1933->ap_start(grp_randombytes_fu_1933_ap_start);
    grp_randombytes_fu_1933->ap_done(grp_randombytes_fu_1933_ap_done);
    grp_randombytes_fu_1933->ap_idle(grp_randombytes_fu_1933_ap_idle);
    grp_randombytes_fu_1933->ap_ready(grp_randombytes_fu_1933_ap_ready);
    grp_randombytes_fu_1933->x_address0(grp_randombytes_fu_1933_x_address0);
    grp_randombytes_fu_1933->x_ce0(grp_randombytes_fu_1933_x_ce0);
    grp_randombytes_fu_1933->x_we0(grp_randombytes_fu_1933_x_we0);
    grp_randombytes_fu_1933->x_d0(grp_randombytes_fu_1933_x_d0);
    grp_randombytes_fu_1933->x_address1(grp_randombytes_fu_1933_x_address1);
    grp_randombytes_fu_1933->x_ce1(grp_randombytes_fu_1933_x_ce1);
    grp_randombytes_fu_1933->x_we1(grp_randombytes_fu_1933_x_we1);
    grp_randombytes_fu_1933->x_d1(grp_randombytes_fu_1933_x_d1);
    grp_randombytes_fu_1933->DRBG_ctx_V_address0(grp_randombytes_fu_1933_DRBG_ctx_V_address0);
    grp_randombytes_fu_1933->DRBG_ctx_V_ce0(grp_randombytes_fu_1933_DRBG_ctx_V_ce0);
    grp_randombytes_fu_1933->DRBG_ctx_V_we0(grp_randombytes_fu_1933_DRBG_ctx_V_we0);
    grp_randombytes_fu_1933->DRBG_ctx_V_d0(grp_randombytes_fu_1933_DRBG_ctx_V_d0);
    grp_randombytes_fu_1933->DRBG_ctx_V_q0(DRBG_ctx_V_q0);
    grp_randombytes_fu_1933->DRBG_ctx_V_address1(grp_randombytes_fu_1933_DRBG_ctx_V_address1);
    grp_randombytes_fu_1933->DRBG_ctx_V_ce1(grp_randombytes_fu_1933_DRBG_ctx_V_ce1);
    grp_randombytes_fu_1933->DRBG_ctx_V_we1(grp_randombytes_fu_1933_DRBG_ctx_V_we1);
    grp_randombytes_fu_1933->DRBG_ctx_V_d1(grp_randombytes_fu_1933_DRBG_ctx_V_d1);
    grp_randombytes_fu_1933->DRBG_ctx_V_q1(DRBG_ctx_V_q1);
    grp_randombytes_fu_1933->DRBG_ctx_Key_address0(grp_randombytes_fu_1933_DRBG_ctx_Key_address0);
    grp_randombytes_fu_1933->DRBG_ctx_Key_ce0(grp_randombytes_fu_1933_DRBG_ctx_Key_ce0);
    grp_randombytes_fu_1933->DRBG_ctx_Key_we0(grp_randombytes_fu_1933_DRBG_ctx_Key_we0);
    grp_randombytes_fu_1933->DRBG_ctx_Key_d0(grp_randombytes_fu_1933_DRBG_ctx_Key_d0);
    grp_randombytes_fu_1933->DRBG_ctx_Key_q0(DRBG_ctx_Key_q0);
    grp_randombytes_fu_1933->DRBG_ctx_Key_address1(grp_randombytes_fu_1933_DRBG_ctx_Key_address1);
    grp_randombytes_fu_1933->DRBG_ctx_Key_ce1(grp_randombytes_fu_1933_DRBG_ctx_Key_ce1);
    grp_randombytes_fu_1933->DRBG_ctx_Key_we1(grp_randombytes_fu_1933_DRBG_ctx_Key_we1);
    grp_randombytes_fu_1933->DRBG_ctx_Key_d1(grp_randombytes_fu_1933_DRBG_ctx_Key_d1);
    grp_randombytes_fu_1933->DRBG_ctx_Key_q1(DRBG_ctx_Key_q1);
    grp_randombytes_fu_1933->DRBG_ctx_reseed_counter_i(DRBG_ctx_reseed_counter_i);
    grp_randombytes_fu_1933->DRBG_ctx_reseed_counter_o(grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o);
    grp_randombytes_fu_1933->DRBG_ctx_reseed_counter_o_ap_vld(grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld);
    grp_LowMCEnc_fu_1948 = new LowMCEnc("grp_LowMCEnc_fu_1948");
    grp_LowMCEnc_fu_1948->ap_clk(ap_clk);
    grp_LowMCEnc_fu_1948->ap_rst(ap_rst);
    grp_LowMCEnc_fu_1948->ap_start(grp_LowMCEnc_fu_1948_ap_start);
    grp_LowMCEnc_fu_1948->ap_done(grp_LowMCEnc_fu_1948_ap_done);
    grp_LowMCEnc_fu_1948->ap_idle(grp_LowMCEnc_fu_1948_ap_idle);
    grp_LowMCEnc_fu_1948->ap_ready(grp_LowMCEnc_fu_1948_ap_ready);
    grp_LowMCEnc_fu_1948->plaintext_address0(grp_LowMCEnc_fu_1948_plaintext_address0);
    grp_LowMCEnc_fu_1948->plaintext_ce0(grp_LowMCEnc_fu_1948_plaintext_ce0);
    grp_LowMCEnc_fu_1948->plaintext_q0(temp2_q0);
    grp_LowMCEnc_fu_1948->plaintext_address1(grp_LowMCEnc_fu_1948_plaintext_address1);
    grp_LowMCEnc_fu_1948->plaintext_ce1(grp_LowMCEnc_fu_1948_plaintext_ce1);
    grp_LowMCEnc_fu_1948->plaintext_q1(temp2_q1);
    grp_LowMCEnc_fu_1948->output_r_address0(grp_LowMCEnc_fu_1948_output_r_address0);
    grp_LowMCEnc_fu_1948->output_r_ce0(grp_LowMCEnc_fu_1948_output_r_ce0);
    grp_LowMCEnc_fu_1948->output_r_we0(grp_LowMCEnc_fu_1948_output_r_we0);
    grp_LowMCEnc_fu_1948->output_r_d0(grp_LowMCEnc_fu_1948_output_r_d0);
    grp_LowMCEnc_fu_1948->output_r_q0(temp_q0);
    grp_LowMCEnc_fu_1948->output_r_address1(grp_LowMCEnc_fu_1948_output_r_address1);
    grp_LowMCEnc_fu_1948->output_r_ce1(grp_LowMCEnc_fu_1948_output_r_ce1);
    grp_LowMCEnc_fu_1948->output_r_we1(grp_LowMCEnc_fu_1948_output_r_we1);
    grp_LowMCEnc_fu_1948->output_r_d1(grp_LowMCEnc_fu_1948_output_r_d1);
    grp_LowMCEnc_fu_1948->output_r_q1(temp_q1);
    grp_LowMCEnc_fu_1948->key_address0(grp_LowMCEnc_fu_1948_key_address0);
    grp_LowMCEnc_fu_1948->key_ce0(grp_LowMCEnc_fu_1948_key_ce0);
    grp_LowMCEnc_fu_1948->key_q0(temp3_q0);
    grp_LowMCEnc_fu_1948->key_address1(grp_LowMCEnc_fu_1948_key_address1);
    grp_LowMCEnc_fu_1948->key_ce1(grp_LowMCEnc_fu_1948_key_ce1);
    grp_LowMCEnc_fu_1948->key_q1(temp3_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_DRBG_ctx_Key_address0);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_Key_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_address1);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_Key_address1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_ce0);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_Key_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_ce1);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_Key_ce1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_d0);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_Key_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_d1);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_Key_d1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_we0);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_Key_we0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_we1);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_Key_we1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_address0);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_V_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_address1);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_V_address1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_ce0);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_V_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_ce1);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_V_ce1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_d0);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_V_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_d1);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_V_d1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_we0);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_V_we0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_we1);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_V_we1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o);
    sensitive << ( DRBG_ctx_reseed_counter_i );
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o );
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o_ap_vld);
    sensitive << ( grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_add_ln211_1_fu_2124_p2);
    sensitive << ( phi_ln211_1_reg_1899 );

    SC_METHOD(thread_add_ln211_2_fu_2141_p2);
    sensitive << ( phi_ln211_2_reg_1910 );

    SC_METHOD(thread_add_ln211_fu_2107_p2);
    sensitive << ( phi_ln211_reg_1888 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_p_0_phi_fu_1925_p4);
    sensitive << ( empty_25_reg_2548 );
    sensitive << ( p_0_reg_1921 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( select_ln166_fu_2518_p3 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( parameters );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( parameters );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_empty_14_fu_2035_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( parameters );

    SC_METHOD(thread_empty_15_fu_2041_p2);
    sensitive << ( empty_14_fu_2035_p2 );
    sensitive << ( empty_fu_2029_p2 );

    SC_METHOD(thread_empty_16_fu_2047_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( parameters );

    SC_METHOD(thread_empty_17_fu_2053_p2);
    sensitive << ( empty_16_fu_2047_p2 );
    sensitive << ( empty_15_fu_2041_p2 );

    SC_METHOD(thread_empty_18_fu_2059_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( parameters );

    SC_METHOD(thread_empty_19_fu_2065_p2);
    sensitive << ( empty_18_fu_2059_p2 );
    sensitive << ( empty_17_fu_2053_p2 );

    SC_METHOD(thread_empty_20_fu_2071_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( parameters );

    SC_METHOD(thread_empty_21_fu_2077_p2);
    sensitive << ( empty_20_fu_2071_p2 );
    sensitive << ( empty_19_fu_2065_p2 );

    SC_METHOD(thread_empty_22_fu_2083_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( parameters );

    SC_METHOD(thread_empty_23_fu_2089_p2);
    sensitive << ( empty_22_fu_2083_p2 );
    sensitive << ( empty_21_fu_2077_p2 );

    SC_METHOD(thread_empty_24_fu_2095_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( parameters );

    SC_METHOD(thread_empty_25_fu_2101_p2);
    sensitive << ( empty_24_fu_2095_p2 );
    sensitive << ( empty_23_fu_2089_p2 );

    SC_METHOD(thread_empty_fu_2029_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( parameters );

    SC_METHOD(thread_grp_LowMCEnc_fu_1948_ap_start);
    sensitive << ( grp_LowMCEnc_fu_1948_ap_start_reg );

    SC_METHOD(thread_grp_randombytes_fu_1933_ap_start);
    sensitive << ( grp_randombytes_fu_1933_ap_start_reg );

    SC_METHOD(thread_icmp_ln211_1_fu_2135_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( phi_ln211_1_reg_1899 );

    SC_METHOD(thread_icmp_ln211_2_fu_2152_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( phi_ln211_2_reg_1910 );

    SC_METHOD(thread_icmp_ln211_fu_2118_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( phi_ln211_reg_1888 );

    SC_METHOD(thread_or_ln215_5_1_fu_2197_p5);
    sensitive << ( pk_ciphertext_q0 );
    sensitive << ( pk_ciphertext_q1 );
    sensitive << ( reg_1993 );
    sensitive << ( reg_1997 );

    SC_METHOD(thread_or_ln215_5_2_fu_2236_p5);
    sensitive << ( pk_ciphertext_q0 );
    sensitive << ( pk_ciphertext_q1 );
    sensitive << ( reg_1993 );
    sensitive << ( reg_1997 );

    SC_METHOD(thread_or_ln215_5_3_fu_2275_p5);
    sensitive << ( pk_ciphertext_q0 );
    sensitive << ( pk_ciphertext_q1 );
    sensitive << ( reg_1993 );
    sensitive << ( reg_1997 );

    SC_METHOD(thread_or_ln215_5_4_fu_2314_p5);
    sensitive << ( pk_ciphertext_q0 );
    sensitive << ( pk_ciphertext_q1 );
    sensitive << ( reg_1993 );
    sensitive << ( reg_1997 );

    SC_METHOD(thread_or_ln215_5_5_fu_2353_p5);
    sensitive << ( pk_ciphertext_q0 );
    sensitive << ( pk_ciphertext_q1 );
    sensitive << ( reg_1993 );
    sensitive << ( reg_1997 );

    SC_METHOD(thread_or_ln215_5_6_fu_2392_p5);
    sensitive << ( pk_ciphertext_q0 );
    sensitive << ( pk_ciphertext_q1 );
    sensitive << ( reg_1993 );
    sensitive << ( reg_1997 );

    SC_METHOD(thread_or_ln215_5_7_fu_2431_p5);
    sensitive << ( pk_ciphertext_q0 );
    sensitive << ( pk_ciphertext_q1 );
    sensitive << ( reg_1993 );
    sensitive << ( reg_1997 );

    SC_METHOD(thread_or_ln215_5_fu_2158_p5);
    sensitive << ( pk_ciphertext_q0 );
    sensitive << ( pk_ciphertext_q1 );
    sensitive << ( reg_1993 );
    sensitive << ( reg_1997 );

    SC_METHOD(thread_or_ln216_2_1_fu_2210_p5);
    sensitive << ( pk_plaintext_q0 );
    sensitive << ( pk_plaintext_q1 );
    sensitive << ( reg_2001 );
    sensitive << ( reg_2005 );

    SC_METHOD(thread_or_ln216_2_2_fu_2249_p5);
    sensitive << ( pk_plaintext_q0 );
    sensitive << ( pk_plaintext_q1 );
    sensitive << ( reg_2001 );
    sensitive << ( reg_2005 );

    SC_METHOD(thread_or_ln216_2_3_fu_2288_p5);
    sensitive << ( pk_plaintext_q0 );
    sensitive << ( pk_plaintext_q1 );
    sensitive << ( reg_2001 );
    sensitive << ( reg_2005 );

    SC_METHOD(thread_or_ln216_2_4_fu_2327_p5);
    sensitive << ( pk_plaintext_q0 );
    sensitive << ( pk_plaintext_q1 );
    sensitive << ( reg_2001 );
    sensitive << ( reg_2005 );

    SC_METHOD(thread_or_ln216_2_5_fu_2366_p5);
    sensitive << ( pk_plaintext_q0 );
    sensitive << ( pk_plaintext_q1 );
    sensitive << ( reg_2001 );
    sensitive << ( reg_2005 );

    SC_METHOD(thread_or_ln216_2_6_fu_2405_p5);
    sensitive << ( pk_plaintext_q0 );
    sensitive << ( pk_plaintext_q1 );
    sensitive << ( reg_2001 );
    sensitive << ( reg_2005 );

    SC_METHOD(thread_or_ln216_2_7_fu_2444_p5);
    sensitive << ( pk_plaintext_q0 );
    sensitive << ( pk_plaintext_q1 );
    sensitive << ( reg_2001 );
    sensitive << ( reg_2005 );

    SC_METHOD(thread_or_ln216_2_fu_2171_p5);
    sensitive << ( pk_plaintext_q0 );
    sensitive << ( pk_plaintext_q1 );
    sensitive << ( reg_2001 );
    sensitive << ( reg_2005 );

    SC_METHOD(thread_or_ln217_2_1_fu_2223_p5);
    sensitive << ( sk_data_q0 );
    sensitive << ( sk_data_q1 );
    sensitive << ( reg_2009 );
    sensitive << ( reg_2013 );

    SC_METHOD(thread_or_ln217_2_2_fu_2262_p5);
    sensitive << ( sk_data_q0 );
    sensitive << ( sk_data_q1 );
    sensitive << ( reg_2009 );
    sensitive << ( reg_2013 );

    SC_METHOD(thread_or_ln217_2_3_fu_2301_p5);
    sensitive << ( sk_data_q0 );
    sensitive << ( sk_data_q1 );
    sensitive << ( reg_2009 );
    sensitive << ( reg_2013 );

    SC_METHOD(thread_or_ln217_2_4_fu_2340_p5);
    sensitive << ( sk_data_q0 );
    sensitive << ( sk_data_q1 );
    sensitive << ( reg_2009 );
    sensitive << ( reg_2013 );

    SC_METHOD(thread_or_ln217_2_5_fu_2379_p5);
    sensitive << ( sk_data_q0 );
    sensitive << ( sk_data_q1 );
    sensitive << ( reg_2009 );
    sensitive << ( reg_2013 );

    SC_METHOD(thread_or_ln217_2_6_fu_2418_p5);
    sensitive << ( sk_data_q0 );
    sensitive << ( sk_data_q1 );
    sensitive << ( reg_2009 );
    sensitive << ( reg_2013 );

    SC_METHOD(thread_or_ln217_2_7_fu_2457_p5);
    sensitive << ( sk_data_q0 );
    sensitive << ( sk_data_q1 );
    sensitive << ( reg_2009 );
    sensitive << ( reg_2013 );

    SC_METHOD(thread_or_ln217_2_fu_2184_p5);
    sensitive << ( sk_data_q0 );
    sensitive << ( sk_data_q1 );
    sensitive << ( reg_2009 );
    sensitive << ( reg_2013 );

    SC_METHOD(thread_pk_ciphertext_addr_10_reg_2706);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_pk_ciphertext_addr_11_reg_2711);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_pk_ciphertext_addr_12_reg_2736);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_pk_ciphertext_addr_13_reg_2741);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_pk_ciphertext_addr_14_reg_2771);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_pk_ciphertext_addr_15_reg_2776);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_pk_ciphertext_addr_16_reg_2801);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_pk_ciphertext_addr_17_reg_2806);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_pk_ciphertext_addr_18_reg_2836);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_pk_ciphertext_addr_19_reg_2841);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_pk_ciphertext_addr_1_reg_2581);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln211_2_fu_2152_p2 );

    SC_METHOD(thread_pk_ciphertext_addr_20_reg_2866);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_pk_ciphertext_addr_21_reg_2871);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_pk_ciphertext_addr_22_reg_2901);
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_pk_ciphertext_addr_23_reg_2906);
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_pk_ciphertext_addr_24_reg_2931);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_pk_ciphertext_addr_25_reg_2936);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_pk_ciphertext_addr_26_reg_2971);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_pk_ciphertext_addr_27_reg_2996);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_pk_ciphertext_addr_28_reg_3001);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_pk_ciphertext_addr_29_reg_3036);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_pk_ciphertext_addr_2_reg_2606);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_pk_ciphertext_addr_30_reg_3061);
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_pk_ciphertext_addr_31_reg_3066);
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_pk_ciphertext_addr_3_reg_2611);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_pk_ciphertext_addr_4_reg_2641);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_pk_ciphertext_addr_5_reg_2646);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_pk_ciphertext_addr_6_reg_2966);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_pk_ciphertext_addr_7_reg_3031);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_pk_ciphertext_addr_8_reg_2671);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_pk_ciphertext_addr_9_reg_2676);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_pk_ciphertext_addr_reg_2576);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln211_2_fu_2152_p2 );

    SC_METHOD(thread_pk_ciphertext_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( pk_ciphertext_addr_reg_2576 );
    sensitive << ( pk_ciphertext_addr_2_reg_2606 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( pk_ciphertext_addr_4_reg_2641 );
    sensitive << ( pk_ciphertext_addr_8_reg_2671 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( pk_ciphertext_addr_10_reg_2706 );
    sensitive << ( pk_ciphertext_addr_12_reg_2736 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( pk_ciphertext_addr_14_reg_2771 );
    sensitive << ( pk_ciphertext_addr_16_reg_2801 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( pk_ciphertext_addr_18_reg_2836 );
    sensitive << ( pk_ciphertext_addr_20_reg_2866 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( pk_ciphertext_addr_22_reg_2901 );
    sensitive << ( pk_ciphertext_addr_24_reg_2931 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( pk_ciphertext_addr_6_reg_2966 );
    sensitive << ( pk_ciphertext_addr_27_reg_2996 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( pk_ciphertext_addr_7_reg_3031 );
    sensitive << ( pk_ciphertext_addr_30_reg_3061 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_pk_ciphertext_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( pk_ciphertext_addr_1_reg_2581 );
    sensitive << ( pk_ciphertext_addr_3_reg_2611 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( pk_ciphertext_addr_5_reg_2646 );
    sensitive << ( pk_ciphertext_addr_9_reg_2676 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( pk_ciphertext_addr_11_reg_2711 );
    sensitive << ( pk_ciphertext_addr_13_reg_2741 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( pk_ciphertext_addr_15_reg_2776 );
    sensitive << ( pk_ciphertext_addr_17_reg_2806 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( pk_ciphertext_addr_19_reg_2841 );
    sensitive << ( pk_ciphertext_addr_21_reg_2871 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( pk_ciphertext_addr_23_reg_2906 );
    sensitive << ( pk_ciphertext_addr_25_reg_2936 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( pk_ciphertext_addr_26_reg_2971 );
    sensitive << ( pk_ciphertext_addr_28_reg_3001 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( pk_ciphertext_addr_29_reg_3036 );
    sensitive << ( pk_ciphertext_addr_31_reg_3066 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_pk_ciphertext_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_pk_ciphertext_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_pk_ciphertext_d0);
    sensitive << ( reg_2017 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( trunc_ln227_fu_2470_p1 );
    sensitive << ( trunc_ln227_4_fu_2476_p1 );
    sensitive << ( trunc_ln227_8_fu_2482_p1 );
    sensitive << ( trunc_ln227_11_fu_2488_p1 );
    sensitive << ( trunc_ln227_15_fu_2494_p1 );
    sensitive << ( trunc_ln227_19_fu_2500_p1 );
    sensitive << ( trunc_ln227_23_fu_2506_p1 );
    sensitive << ( trunc_ln227_27_fu_2512_p1 );

    SC_METHOD(thread_pk_ciphertext_d1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( reg_2023 );
    sensitive << ( temp_q0 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_pk_ciphertext_we0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( empty_25_reg_2548 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_pk_ciphertext_we1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( empty_25_reg_2548 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_pk_plaintext_addr_10_reg_2746);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_pk_plaintext_addr_11_reg_2751);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_pk_plaintext_addr_12_reg_2781);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_pk_plaintext_addr_13_reg_2786);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_pk_plaintext_addr_14_reg_2811);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_pk_plaintext_addr_15_reg_2816);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_pk_plaintext_addr_16_reg_2846);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_pk_plaintext_addr_17_reg_2851);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_pk_plaintext_addr_18_reg_2876);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_pk_plaintext_addr_19_reg_2881);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_pk_plaintext_addr_1_reg_2591);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln211_2_fu_2152_p2 );

    SC_METHOD(thread_pk_plaintext_addr_20_reg_2911);
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_pk_plaintext_addr_21_reg_2916);
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_pk_plaintext_addr_22_reg_2941);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_pk_plaintext_addr_23_reg_2946);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_pk_plaintext_addr_24_reg_2976);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_pk_plaintext_addr_25_reg_2981);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_pk_plaintext_addr_26_reg_3006);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_pk_plaintext_addr_27_reg_3011);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_pk_plaintext_addr_28_reg_3041);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_pk_plaintext_addr_29_reg_3046);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_pk_plaintext_addr_2_reg_2616);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_pk_plaintext_addr_30_reg_3071);
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_pk_plaintext_addr_31_reg_3076);
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_pk_plaintext_addr_3_reg_2621);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_pk_plaintext_addr_4_reg_2651);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_pk_plaintext_addr_5_reg_2656);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_pk_plaintext_addr_6_reg_2681);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_pk_plaintext_addr_7_reg_2686);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_pk_plaintext_addr_8_reg_2716);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_pk_plaintext_addr_9_reg_2721);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_pk_plaintext_addr_reg_2586);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln211_2_fu_2152_p2 );

    SC_METHOD(thread_pk_plaintext_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( pk_plaintext_addr_reg_2586 );
    sensitive << ( pk_plaintext_addr_2_reg_2616 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( pk_plaintext_addr_4_reg_2651 );
    sensitive << ( pk_plaintext_addr_6_reg_2681 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( pk_plaintext_addr_8_reg_2716 );
    sensitive << ( pk_plaintext_addr_10_reg_2746 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( pk_plaintext_addr_12_reg_2781 );
    sensitive << ( pk_plaintext_addr_14_reg_2811 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( pk_plaintext_addr_16_reg_2846 );
    sensitive << ( pk_plaintext_addr_18_reg_2876 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( pk_plaintext_addr_20_reg_2911 );
    sensitive << ( pk_plaintext_addr_22_reg_2941 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( pk_plaintext_addr_24_reg_2976 );
    sensitive << ( pk_plaintext_addr_26_reg_3006 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( pk_plaintext_addr_28_reg_3041 );
    sensitive << ( pk_plaintext_addr_30_reg_3071 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_randombytes_fu_1933_x_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_pk_plaintext_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( pk_plaintext_addr_1_reg_2591 );
    sensitive << ( pk_plaintext_addr_3_reg_2621 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( pk_plaintext_addr_5_reg_2656 );
    sensitive << ( pk_plaintext_addr_7_reg_2686 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( pk_plaintext_addr_9_reg_2721 );
    sensitive << ( pk_plaintext_addr_11_reg_2751 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( pk_plaintext_addr_13_reg_2786 );
    sensitive << ( pk_plaintext_addr_15_reg_2816 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( pk_plaintext_addr_17_reg_2851 );
    sensitive << ( pk_plaintext_addr_19_reg_2881 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( pk_plaintext_addr_21_reg_2916 );
    sensitive << ( pk_plaintext_addr_23_reg_2946 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( pk_plaintext_addr_25_reg_2981 );
    sensitive << ( pk_plaintext_addr_27_reg_3011 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( pk_plaintext_addr_29_reg_3046 );
    sensitive << ( pk_plaintext_addr_31_reg_3076 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_randombytes_fu_1933_x_address1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_pk_plaintext_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_randombytes_fu_1933_x_ce0 );
    sensitive << ( grp_LowMCEnc_fu_1948_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_pk_plaintext_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_randombytes_fu_1933_x_ce1 );
    sensitive << ( grp_LowMCEnc_fu_1948_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_pk_plaintext_d0);
    sensitive << ( grp_randombytes_fu_1933_x_d0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pk_plaintext_d1);
    sensitive << ( grp_randombytes_fu_1933_x_d1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pk_plaintext_we0);
    sensitive << ( grp_randombytes_fu_1933_x_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pk_plaintext_we1);
    sensitive << ( grp_randombytes_fu_1933_x_we1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_select_ln166_fu_2518_p3);
    sensitive << ( ap_phi_mux_p_0_phi_fu_1925_p4 );

    SC_METHOD(thread_sk_data_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_randombytes_fu_1933_x_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sk_data_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_randombytes_fu_1933_x_address1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sk_data_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_randombytes_fu_1933_x_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sk_data_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_randombytes_fu_1933_x_ce1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sk_data_d0);
    sensitive << ( grp_randombytes_fu_1933_x_d0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sk_data_d1);
    sensitive << ( grp_randombytes_fu_1933_x_d1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sk_data_we0);
    sensitive << ( grp_randombytes_fu_1933_x_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sk_data_we1);
    sensitive << ( grp_randombytes_fu_1933_x_we1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sk_pk_ciphertext_address0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_sk_pk_ciphertext_address1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_sk_pk_ciphertext_ce0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_sk_pk_ciphertext_ce1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_sk_pk_ciphertext_d0);
    sensitive << ( reg_2017 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( trunc_ln227_fu_2470_p1 );
    sensitive << ( trunc_ln227_4_fu_2476_p1 );
    sensitive << ( trunc_ln227_8_fu_2482_p1 );
    sensitive << ( trunc_ln227_11_fu_2488_p1 );
    sensitive << ( trunc_ln227_15_fu_2494_p1 );
    sensitive << ( trunc_ln227_19_fu_2500_p1 );
    sensitive << ( trunc_ln227_23_fu_2506_p1 );
    sensitive << ( trunc_ln227_27_fu_2512_p1 );

    SC_METHOD(thread_sk_pk_ciphertext_d1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( reg_2023 );
    sensitive << ( temp_q0 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_sk_pk_ciphertext_we0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( empty_25_reg_2548 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_sk_pk_ciphertext_we1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( empty_25_reg_2548 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_sk_pk_plaintext_address0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_sk_pk_plaintext_address1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_sk_pk_plaintext_ce0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( grp_LowMCEnc_fu_1948_ap_done );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_sk_pk_plaintext_ce1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( grp_LowMCEnc_fu_1948_ap_done );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_sk_pk_plaintext_d0);
    sensitive << ( pk_plaintext_q0 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_sk_pk_plaintext_d1);
    sensitive << ( pk_plaintext_q1 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_sk_pk_plaintext_we0);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( grp_LowMCEnc_fu_1948_ap_done );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_sk_pk_plaintext_we1);
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( grp_LowMCEnc_fu_1948_ap_done );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_temp2_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_LowMCEnc_fu_1948_plaintext_address0 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( zext_ln211_1_fu_2130_p1 );

    SC_METHOD(thread_temp2_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_LowMCEnc_fu_1948_plaintext_ce0 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_temp2_ce1);
    sensitive << ( grp_LowMCEnc_fu_1948_plaintext_ce1 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_temp2_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( or_ln216_2_fu_2171_p5 );
    sensitive << ( or_ln216_2_1_fu_2210_p5 );
    sensitive << ( or_ln216_2_2_fu_2249_p5 );
    sensitive << ( or_ln216_2_3_fu_2288_p5 );
    sensitive << ( or_ln216_2_4_fu_2327_p5 );
    sensitive << ( or_ln216_2_5_fu_2366_p5 );
    sensitive << ( or_ln216_2_6_fu_2405_p5 );
    sensitive << ( or_ln216_2_7_fu_2444_p5 );

    SC_METHOD(thread_temp2_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_temp3_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_LowMCEnc_fu_1948_key_address0 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( zext_ln211_2_fu_2147_p1 );

    SC_METHOD(thread_temp3_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_LowMCEnc_fu_1948_key_ce0 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_temp3_ce1);
    sensitive << ( grp_LowMCEnc_fu_1948_key_ce1 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_temp3_d0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( or_ln217_2_fu_2184_p5 );
    sensitive << ( or_ln217_2_1_fu_2223_p5 );
    sensitive << ( or_ln217_2_2_fu_2262_p5 );
    sensitive << ( or_ln217_2_3_fu_2301_p5 );
    sensitive << ( or_ln217_2_4_fu_2340_p5 );
    sensitive << ( or_ln217_2_5_fu_2379_p5 );
    sensitive << ( or_ln217_2_6_fu_2418_p5 );
    sensitive << ( or_ln217_2_7_fu_2457_p5 );

    SC_METHOD(thread_temp3_we0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_temp_addr_1_reg_2636);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_temp_addr_2_reg_2701);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_temp_addr_3_reg_2766);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_temp_addr_4_reg_2831);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_temp_addr_5_reg_2896);
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_temp_addr_6_reg_2961);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_temp_addr_7_reg_3026);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_temp_addr_8_reg_3091);
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_temp_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( temp_addr_1_reg_2636 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( temp_addr_2_reg_2701 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( temp_addr_3_reg_2766 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( temp_addr_4_reg_2831 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( temp_addr_5_reg_2896 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( temp_addr_6_reg_2961 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( temp_addr_7_reg_3026 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( temp_addr_8_reg_3091 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_LowMCEnc_fu_1948_output_r_address0 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( zext_ln211_fu_2113_p1 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_temp_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_LowMCEnc_fu_1948_output_r_ce0 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_temp_ce1);
    sensitive << ( grp_LowMCEnc_fu_1948_output_r_ce1 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_temp_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_LowMCEnc_fu_1948_output_r_d0 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( or_ln215_5_fu_2158_p5 );
    sensitive << ( or_ln215_5_1_fu_2197_p5 );
    sensitive << ( or_ln215_5_2_fu_2236_p5 );
    sensitive << ( or_ln215_5_3_fu_2275_p5 );
    sensitive << ( or_ln215_5_4_fu_2314_p5 );
    sensitive << ( or_ln215_5_5_fu_2353_p5 );
    sensitive << ( or_ln215_5_6_fu_2392_p5 );
    sensitive << ( or_ln215_5_7_fu_2431_p5 );

    SC_METHOD(thread_temp_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_LowMCEnc_fu_1948_output_r_we0 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_temp_we1);
    sensitive << ( grp_LowMCEnc_fu_1948_output_r_we1 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_trunc_ln227_11_fu_2488_p1);
    sensitive << ( temp_q0 );

    SC_METHOD(thread_trunc_ln227_15_fu_2494_p1);
    sensitive << ( temp_q0 );

    SC_METHOD(thread_trunc_ln227_19_fu_2500_p1);
    sensitive << ( temp_q0 );

    SC_METHOD(thread_trunc_ln227_23_fu_2506_p1);
    sensitive << ( temp_q0 );

    SC_METHOD(thread_trunc_ln227_27_fu_2512_p1);
    sensitive << ( temp_q0 );

    SC_METHOD(thread_trunc_ln227_4_fu_2476_p1);
    sensitive << ( temp_q0 );

    SC_METHOD(thread_trunc_ln227_8_fu_2482_p1);
    sensitive << ( temp_q0 );

    SC_METHOD(thread_trunc_ln227_fu_2470_p1);
    sensitive << ( temp_q0 );

    SC_METHOD(thread_zext_ln211_1_fu_2130_p1);
    sensitive << ( phi_ln211_1_reg_1899 );

    SC_METHOD(thread_zext_ln211_2_fu_2147_p1);
    sensitive << ( phi_ln211_2_reg_1910 );

    SC_METHOD(thread_zext_ln211_fu_2113_p1);
    sensitive << ( phi_ln211_reg_1888 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( empty_25_fu_2101_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln211_2_fu_2152_p2 );
    sensitive << ( grp_randombytes_fu_1933_ap_done );
    sensitive << ( grp_LowMCEnc_fu_1948_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln211_fu_2118_p2 );
    sensitive << ( icmp_ln211_1_fu_2135_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state25 );

    ap_CS_fsm = "000000000000000000000000000000000000000001";
    grp_randombytes_fu_1933_ap_start_reg = SC_LOGIC_0;
    grp_LowMCEnc_fu_1948_ap_start_reg = SC_LOGIC_0;
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "0000";
    ap_return_2_preg = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "picnic_keygen_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, parameters, "(port)parameters");
    sc_trace(mVcdFile, pk_plaintext_address0, "(port)pk_plaintext_address0");
    sc_trace(mVcdFile, pk_plaintext_ce0, "(port)pk_plaintext_ce0");
    sc_trace(mVcdFile, pk_plaintext_we0, "(port)pk_plaintext_we0");
    sc_trace(mVcdFile, pk_plaintext_d0, "(port)pk_plaintext_d0");
    sc_trace(mVcdFile, pk_plaintext_q0, "(port)pk_plaintext_q0");
    sc_trace(mVcdFile, pk_plaintext_address1, "(port)pk_plaintext_address1");
    sc_trace(mVcdFile, pk_plaintext_ce1, "(port)pk_plaintext_ce1");
    sc_trace(mVcdFile, pk_plaintext_we1, "(port)pk_plaintext_we1");
    sc_trace(mVcdFile, pk_plaintext_d1, "(port)pk_plaintext_d1");
    sc_trace(mVcdFile, pk_plaintext_q1, "(port)pk_plaintext_q1");
    sc_trace(mVcdFile, pk_ciphertext_address0, "(port)pk_ciphertext_address0");
    sc_trace(mVcdFile, pk_ciphertext_ce0, "(port)pk_ciphertext_ce0");
    sc_trace(mVcdFile, pk_ciphertext_we0, "(port)pk_ciphertext_we0");
    sc_trace(mVcdFile, pk_ciphertext_d0, "(port)pk_ciphertext_d0");
    sc_trace(mVcdFile, pk_ciphertext_q0, "(port)pk_ciphertext_q0");
    sc_trace(mVcdFile, pk_ciphertext_address1, "(port)pk_ciphertext_address1");
    sc_trace(mVcdFile, pk_ciphertext_ce1, "(port)pk_ciphertext_ce1");
    sc_trace(mVcdFile, pk_ciphertext_we1, "(port)pk_ciphertext_we1");
    sc_trace(mVcdFile, pk_ciphertext_d1, "(port)pk_ciphertext_d1");
    sc_trace(mVcdFile, pk_ciphertext_q1, "(port)pk_ciphertext_q1");
    sc_trace(mVcdFile, sk_data_address0, "(port)sk_data_address0");
    sc_trace(mVcdFile, sk_data_ce0, "(port)sk_data_ce0");
    sc_trace(mVcdFile, sk_data_we0, "(port)sk_data_we0");
    sc_trace(mVcdFile, sk_data_d0, "(port)sk_data_d0");
    sc_trace(mVcdFile, sk_data_q0, "(port)sk_data_q0");
    sc_trace(mVcdFile, sk_data_address1, "(port)sk_data_address1");
    sc_trace(mVcdFile, sk_data_ce1, "(port)sk_data_ce1");
    sc_trace(mVcdFile, sk_data_we1, "(port)sk_data_we1");
    sc_trace(mVcdFile, sk_data_d1, "(port)sk_data_d1");
    sc_trace(mVcdFile, sk_data_q1, "(port)sk_data_q1");
    sc_trace(mVcdFile, sk_pk_plaintext_address0, "(port)sk_pk_plaintext_address0");
    sc_trace(mVcdFile, sk_pk_plaintext_ce0, "(port)sk_pk_plaintext_ce0");
    sc_trace(mVcdFile, sk_pk_plaintext_we0, "(port)sk_pk_plaintext_we0");
    sc_trace(mVcdFile, sk_pk_plaintext_d0, "(port)sk_pk_plaintext_d0");
    sc_trace(mVcdFile, sk_pk_plaintext_address1, "(port)sk_pk_plaintext_address1");
    sc_trace(mVcdFile, sk_pk_plaintext_ce1, "(port)sk_pk_plaintext_ce1");
    sc_trace(mVcdFile, sk_pk_plaintext_we1, "(port)sk_pk_plaintext_we1");
    sc_trace(mVcdFile, sk_pk_plaintext_d1, "(port)sk_pk_plaintext_d1");
    sc_trace(mVcdFile, sk_pk_ciphertext_address0, "(port)sk_pk_ciphertext_address0");
    sc_trace(mVcdFile, sk_pk_ciphertext_ce0, "(port)sk_pk_ciphertext_ce0");
    sc_trace(mVcdFile, sk_pk_ciphertext_we0, "(port)sk_pk_ciphertext_we0");
    sc_trace(mVcdFile, sk_pk_ciphertext_d0, "(port)sk_pk_ciphertext_d0");
    sc_trace(mVcdFile, sk_pk_ciphertext_address1, "(port)sk_pk_ciphertext_address1");
    sc_trace(mVcdFile, sk_pk_ciphertext_ce1, "(port)sk_pk_ciphertext_ce1");
    sc_trace(mVcdFile, sk_pk_ciphertext_we1, "(port)sk_pk_ciphertext_we1");
    sc_trace(mVcdFile, sk_pk_ciphertext_d1, "(port)sk_pk_ciphertext_d1");
    sc_trace(mVcdFile, DRBG_ctx_V_address0, "(port)DRBG_ctx_V_address0");
    sc_trace(mVcdFile, DRBG_ctx_V_ce0, "(port)DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, DRBG_ctx_V_we0, "(port)DRBG_ctx_V_we0");
    sc_trace(mVcdFile, DRBG_ctx_V_d0, "(port)DRBG_ctx_V_d0");
    sc_trace(mVcdFile, DRBG_ctx_V_q0, "(port)DRBG_ctx_V_q0");
    sc_trace(mVcdFile, DRBG_ctx_V_address1, "(port)DRBG_ctx_V_address1");
    sc_trace(mVcdFile, DRBG_ctx_V_ce1, "(port)DRBG_ctx_V_ce1");
    sc_trace(mVcdFile, DRBG_ctx_V_we1, "(port)DRBG_ctx_V_we1");
    sc_trace(mVcdFile, DRBG_ctx_V_d1, "(port)DRBG_ctx_V_d1");
    sc_trace(mVcdFile, DRBG_ctx_V_q1, "(port)DRBG_ctx_V_q1");
    sc_trace(mVcdFile, DRBG_ctx_Key_address0, "(port)DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce0, "(port)DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, DRBG_ctx_Key_we0, "(port)DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, DRBG_ctx_Key_d0, "(port)DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, DRBG_ctx_Key_q0, "(port)DRBG_ctx_Key_q0");
    sc_trace(mVcdFile, DRBG_ctx_Key_address1, "(port)DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce1, "(port)DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, DRBG_ctx_Key_we1, "(port)DRBG_ctx_Key_we1");
    sc_trace(mVcdFile, DRBG_ctx_Key_d1, "(port)DRBG_ctx_Key_d1");
    sc_trace(mVcdFile, DRBG_ctx_Key_q1, "(port)DRBG_ctx_Key_q1");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_i, "(port)DRBG_ctx_reseed_counter_i");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o, "(port)DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o_ap_vld, "(port)DRBG_ctx_reseed_counter_o_ap_vld");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_1993, "reg_1993");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, reg_1997, "reg_1997");
    sc_trace(mVcdFile, reg_2001, "reg_2001");
    sc_trace(mVcdFile, reg_2005, "reg_2005");
    sc_trace(mVcdFile, reg_2009, "reg_2009");
    sc_trace(mVcdFile, reg_2013, "reg_2013");
    sc_trace(mVcdFile, reg_2017, "reg_2017");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, reg_2023, "reg_2023");
    sc_trace(mVcdFile, empty_25_fu_2101_p2, "empty_25_fu_2101_p2");
    sc_trace(mVcdFile, empty_25_reg_2548, "empty_25_reg_2548");
    sc_trace(mVcdFile, add_ln211_fu_2107_p2, "add_ln211_fu_2107_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, add_ln211_1_fu_2124_p2, "add_ln211_1_fu_2124_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, add_ln211_2_fu_2141_p2, "add_ln211_2_fu_2141_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, pk_ciphertext_addr_reg_2576, "pk_ciphertext_addr_reg_2576");
    sc_trace(mVcdFile, icmp_ln211_2_fu_2152_p2, "icmp_ln211_2_fu_2152_p2");
    sc_trace(mVcdFile, pk_ciphertext_addr_1_reg_2581, "pk_ciphertext_addr_1_reg_2581");
    sc_trace(mVcdFile, pk_plaintext_addr_reg_2586, "pk_plaintext_addr_reg_2586");
    sc_trace(mVcdFile, pk_plaintext_addr_1_reg_2591, "pk_plaintext_addr_1_reg_2591");
    sc_trace(mVcdFile, pk_ciphertext_addr_2_reg_2606, "pk_ciphertext_addr_2_reg_2606");
    sc_trace(mVcdFile, pk_ciphertext_addr_3_reg_2611, "pk_ciphertext_addr_3_reg_2611");
    sc_trace(mVcdFile, pk_plaintext_addr_2_reg_2616, "pk_plaintext_addr_2_reg_2616");
    sc_trace(mVcdFile, pk_plaintext_addr_3_reg_2621, "pk_plaintext_addr_3_reg_2621");
    sc_trace(mVcdFile, temp_addr_1_reg_2636, "temp_addr_1_reg_2636");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, pk_ciphertext_addr_4_reg_2641, "pk_ciphertext_addr_4_reg_2641");
    sc_trace(mVcdFile, pk_ciphertext_addr_5_reg_2646, "pk_ciphertext_addr_5_reg_2646");
    sc_trace(mVcdFile, pk_plaintext_addr_4_reg_2651, "pk_plaintext_addr_4_reg_2651");
    sc_trace(mVcdFile, pk_plaintext_addr_5_reg_2656, "pk_plaintext_addr_5_reg_2656");
    sc_trace(mVcdFile, pk_ciphertext_addr_8_reg_2671, "pk_ciphertext_addr_8_reg_2671");
    sc_trace(mVcdFile, pk_ciphertext_addr_9_reg_2676, "pk_ciphertext_addr_9_reg_2676");
    sc_trace(mVcdFile, pk_plaintext_addr_6_reg_2681, "pk_plaintext_addr_6_reg_2681");
    sc_trace(mVcdFile, pk_plaintext_addr_7_reg_2686, "pk_plaintext_addr_7_reg_2686");
    sc_trace(mVcdFile, temp_addr_2_reg_2701, "temp_addr_2_reg_2701");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, pk_ciphertext_addr_10_reg_2706, "pk_ciphertext_addr_10_reg_2706");
    sc_trace(mVcdFile, pk_ciphertext_addr_11_reg_2711, "pk_ciphertext_addr_11_reg_2711");
    sc_trace(mVcdFile, pk_plaintext_addr_8_reg_2716, "pk_plaintext_addr_8_reg_2716");
    sc_trace(mVcdFile, pk_plaintext_addr_9_reg_2721, "pk_plaintext_addr_9_reg_2721");
    sc_trace(mVcdFile, pk_ciphertext_addr_12_reg_2736, "pk_ciphertext_addr_12_reg_2736");
    sc_trace(mVcdFile, pk_ciphertext_addr_13_reg_2741, "pk_ciphertext_addr_13_reg_2741");
    sc_trace(mVcdFile, pk_plaintext_addr_10_reg_2746, "pk_plaintext_addr_10_reg_2746");
    sc_trace(mVcdFile, pk_plaintext_addr_11_reg_2751, "pk_plaintext_addr_11_reg_2751");
    sc_trace(mVcdFile, temp_addr_3_reg_2766, "temp_addr_3_reg_2766");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, pk_ciphertext_addr_14_reg_2771, "pk_ciphertext_addr_14_reg_2771");
    sc_trace(mVcdFile, pk_ciphertext_addr_15_reg_2776, "pk_ciphertext_addr_15_reg_2776");
    sc_trace(mVcdFile, pk_plaintext_addr_12_reg_2781, "pk_plaintext_addr_12_reg_2781");
    sc_trace(mVcdFile, pk_plaintext_addr_13_reg_2786, "pk_plaintext_addr_13_reg_2786");
    sc_trace(mVcdFile, pk_ciphertext_addr_16_reg_2801, "pk_ciphertext_addr_16_reg_2801");
    sc_trace(mVcdFile, pk_ciphertext_addr_17_reg_2806, "pk_ciphertext_addr_17_reg_2806");
    sc_trace(mVcdFile, pk_plaintext_addr_14_reg_2811, "pk_plaintext_addr_14_reg_2811");
    sc_trace(mVcdFile, pk_plaintext_addr_15_reg_2816, "pk_plaintext_addr_15_reg_2816");
    sc_trace(mVcdFile, temp_addr_4_reg_2831, "temp_addr_4_reg_2831");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, pk_ciphertext_addr_18_reg_2836, "pk_ciphertext_addr_18_reg_2836");
    sc_trace(mVcdFile, pk_ciphertext_addr_19_reg_2841, "pk_ciphertext_addr_19_reg_2841");
    sc_trace(mVcdFile, pk_plaintext_addr_16_reg_2846, "pk_plaintext_addr_16_reg_2846");
    sc_trace(mVcdFile, pk_plaintext_addr_17_reg_2851, "pk_plaintext_addr_17_reg_2851");
    sc_trace(mVcdFile, pk_ciphertext_addr_20_reg_2866, "pk_ciphertext_addr_20_reg_2866");
    sc_trace(mVcdFile, pk_ciphertext_addr_21_reg_2871, "pk_ciphertext_addr_21_reg_2871");
    sc_trace(mVcdFile, pk_plaintext_addr_18_reg_2876, "pk_plaintext_addr_18_reg_2876");
    sc_trace(mVcdFile, pk_plaintext_addr_19_reg_2881, "pk_plaintext_addr_19_reg_2881");
    sc_trace(mVcdFile, temp_addr_5_reg_2896, "temp_addr_5_reg_2896");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, pk_ciphertext_addr_22_reg_2901, "pk_ciphertext_addr_22_reg_2901");
    sc_trace(mVcdFile, pk_ciphertext_addr_23_reg_2906, "pk_ciphertext_addr_23_reg_2906");
    sc_trace(mVcdFile, pk_plaintext_addr_20_reg_2911, "pk_plaintext_addr_20_reg_2911");
    sc_trace(mVcdFile, pk_plaintext_addr_21_reg_2916, "pk_plaintext_addr_21_reg_2916");
    sc_trace(mVcdFile, pk_ciphertext_addr_24_reg_2931, "pk_ciphertext_addr_24_reg_2931");
    sc_trace(mVcdFile, pk_ciphertext_addr_25_reg_2936, "pk_ciphertext_addr_25_reg_2936");
    sc_trace(mVcdFile, pk_plaintext_addr_22_reg_2941, "pk_plaintext_addr_22_reg_2941");
    sc_trace(mVcdFile, pk_plaintext_addr_23_reg_2946, "pk_plaintext_addr_23_reg_2946");
    sc_trace(mVcdFile, temp_addr_6_reg_2961, "temp_addr_6_reg_2961");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, pk_ciphertext_addr_6_reg_2966, "pk_ciphertext_addr_6_reg_2966");
    sc_trace(mVcdFile, pk_ciphertext_addr_26_reg_2971, "pk_ciphertext_addr_26_reg_2971");
    sc_trace(mVcdFile, pk_plaintext_addr_24_reg_2976, "pk_plaintext_addr_24_reg_2976");
    sc_trace(mVcdFile, pk_plaintext_addr_25_reg_2981, "pk_plaintext_addr_25_reg_2981");
    sc_trace(mVcdFile, pk_ciphertext_addr_27_reg_2996, "pk_ciphertext_addr_27_reg_2996");
    sc_trace(mVcdFile, pk_ciphertext_addr_28_reg_3001, "pk_ciphertext_addr_28_reg_3001");
    sc_trace(mVcdFile, pk_plaintext_addr_26_reg_3006, "pk_plaintext_addr_26_reg_3006");
    sc_trace(mVcdFile, pk_plaintext_addr_27_reg_3011, "pk_plaintext_addr_27_reg_3011");
    sc_trace(mVcdFile, temp_addr_7_reg_3026, "temp_addr_7_reg_3026");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, pk_ciphertext_addr_7_reg_3031, "pk_ciphertext_addr_7_reg_3031");
    sc_trace(mVcdFile, pk_ciphertext_addr_29_reg_3036, "pk_ciphertext_addr_29_reg_3036");
    sc_trace(mVcdFile, pk_plaintext_addr_28_reg_3041, "pk_plaintext_addr_28_reg_3041");
    sc_trace(mVcdFile, pk_plaintext_addr_29_reg_3046, "pk_plaintext_addr_29_reg_3046");
    sc_trace(mVcdFile, pk_ciphertext_addr_30_reg_3061, "pk_ciphertext_addr_30_reg_3061");
    sc_trace(mVcdFile, pk_ciphertext_addr_31_reg_3066, "pk_ciphertext_addr_31_reg_3066");
    sc_trace(mVcdFile, pk_plaintext_addr_30_reg_3071, "pk_plaintext_addr_30_reg_3071");
    sc_trace(mVcdFile, pk_plaintext_addr_31_reg_3076, "pk_plaintext_addr_31_reg_3076");
    sc_trace(mVcdFile, temp_addr_8_reg_3091, "temp_addr_8_reg_3091");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, temp_address0, "temp_address0");
    sc_trace(mVcdFile, temp_ce0, "temp_ce0");
    sc_trace(mVcdFile, temp_we0, "temp_we0");
    sc_trace(mVcdFile, temp_d0, "temp_d0");
    sc_trace(mVcdFile, temp_q0, "temp_q0");
    sc_trace(mVcdFile, temp_ce1, "temp_ce1");
    sc_trace(mVcdFile, temp_we1, "temp_we1");
    sc_trace(mVcdFile, temp_q1, "temp_q1");
    sc_trace(mVcdFile, temp2_address0, "temp2_address0");
    sc_trace(mVcdFile, temp2_ce0, "temp2_ce0");
    sc_trace(mVcdFile, temp2_we0, "temp2_we0");
    sc_trace(mVcdFile, temp2_d0, "temp2_d0");
    sc_trace(mVcdFile, temp2_q0, "temp2_q0");
    sc_trace(mVcdFile, temp2_ce1, "temp2_ce1");
    sc_trace(mVcdFile, temp2_q1, "temp2_q1");
    sc_trace(mVcdFile, temp3_address0, "temp3_address0");
    sc_trace(mVcdFile, temp3_ce0, "temp3_ce0");
    sc_trace(mVcdFile, temp3_we0, "temp3_we0");
    sc_trace(mVcdFile, temp3_d0, "temp3_d0");
    sc_trace(mVcdFile, temp3_q0, "temp3_q0");
    sc_trace(mVcdFile, temp3_ce1, "temp3_ce1");
    sc_trace(mVcdFile, temp3_q1, "temp3_q1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_ap_start, "grp_randombytes_fu_1933_ap_start");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_ap_done, "grp_randombytes_fu_1933_ap_done");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_ap_idle, "grp_randombytes_fu_1933_ap_idle");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_ap_ready, "grp_randombytes_fu_1933_ap_ready");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_x_address0, "grp_randombytes_fu_1933_x_address0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_x_ce0, "grp_randombytes_fu_1933_x_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_x_we0, "grp_randombytes_fu_1933_x_we0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_x_d0, "grp_randombytes_fu_1933_x_d0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_x_address1, "grp_randombytes_fu_1933_x_address1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_x_ce1, "grp_randombytes_fu_1933_x_ce1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_x_we1, "grp_randombytes_fu_1933_x_we1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_x_d1, "grp_randombytes_fu_1933_x_d1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_V_address0, "grp_randombytes_fu_1933_DRBG_ctx_V_address0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_V_ce0, "grp_randombytes_fu_1933_DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_V_we0, "grp_randombytes_fu_1933_DRBG_ctx_V_we0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_V_d0, "grp_randombytes_fu_1933_DRBG_ctx_V_d0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_V_address1, "grp_randombytes_fu_1933_DRBG_ctx_V_address1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_V_ce1, "grp_randombytes_fu_1933_DRBG_ctx_V_ce1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_V_we1, "grp_randombytes_fu_1933_DRBG_ctx_V_we1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_V_d1, "grp_randombytes_fu_1933_DRBG_ctx_V_d1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_Key_address0, "grp_randombytes_fu_1933_DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_Key_ce0, "grp_randombytes_fu_1933_DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_Key_we0, "grp_randombytes_fu_1933_DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_Key_d0, "grp_randombytes_fu_1933_DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_Key_address1, "grp_randombytes_fu_1933_DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_Key_ce1, "grp_randombytes_fu_1933_DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_Key_we1, "grp_randombytes_fu_1933_DRBG_ctx_Key_we1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_Key_d1, "grp_randombytes_fu_1933_DRBG_ctx_Key_d1");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o, "grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld, "grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_ap_start, "grp_LowMCEnc_fu_1948_ap_start");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_ap_done, "grp_LowMCEnc_fu_1948_ap_done");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_ap_idle, "grp_LowMCEnc_fu_1948_ap_idle");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_ap_ready, "grp_LowMCEnc_fu_1948_ap_ready");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_plaintext_address0, "grp_LowMCEnc_fu_1948_plaintext_address0");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_plaintext_ce0, "grp_LowMCEnc_fu_1948_plaintext_ce0");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_plaintext_address1, "grp_LowMCEnc_fu_1948_plaintext_address1");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_plaintext_ce1, "grp_LowMCEnc_fu_1948_plaintext_ce1");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_output_r_address0, "grp_LowMCEnc_fu_1948_output_r_address0");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_output_r_ce0, "grp_LowMCEnc_fu_1948_output_r_ce0");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_output_r_we0, "grp_LowMCEnc_fu_1948_output_r_we0");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_output_r_d0, "grp_LowMCEnc_fu_1948_output_r_d0");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_output_r_address1, "grp_LowMCEnc_fu_1948_output_r_address1");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_output_r_ce1, "grp_LowMCEnc_fu_1948_output_r_ce1");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_output_r_we1, "grp_LowMCEnc_fu_1948_output_r_we1");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_output_r_d1, "grp_LowMCEnc_fu_1948_output_r_d1");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_key_address0, "grp_LowMCEnc_fu_1948_key_address0");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_key_ce0, "grp_LowMCEnc_fu_1948_key_ce0");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_key_address1, "grp_LowMCEnc_fu_1948_key_address1");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_key_ce1, "grp_LowMCEnc_fu_1948_key_ce1");
    sc_trace(mVcdFile, phi_ln211_reg_1888, "phi_ln211_reg_1888");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln211_fu_2118_p2, "icmp_ln211_fu_2118_p2");
    sc_trace(mVcdFile, phi_ln211_1_reg_1899, "phi_ln211_1_reg_1899");
    sc_trace(mVcdFile, icmp_ln211_1_fu_2135_p2, "icmp_ln211_1_fu_2135_p2");
    sc_trace(mVcdFile, phi_ln211_2_reg_1910, "phi_ln211_2_reg_1910");
    sc_trace(mVcdFile, ap_phi_mux_p_0_phi_fu_1925_p4, "ap_phi_mux_p_0_phi_fu_1925_p4");
    sc_trace(mVcdFile, p_0_reg_1921, "p_0_reg_1921");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, grp_randombytes_fu_1933_ap_start_reg, "grp_randombytes_fu_1933_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_LowMCEnc_fu_1948_ap_start_reg, "grp_LowMCEnc_fu_1948_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, zext_ln211_fu_2113_p1, "zext_ln211_fu_2113_p1");
    sc_trace(mVcdFile, zext_ln211_1_fu_2130_p1, "zext_ln211_1_fu_2130_p1");
    sc_trace(mVcdFile, zext_ln211_2_fu_2147_p1, "zext_ln211_2_fu_2147_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, or_ln215_5_fu_2158_p5, "or_ln215_5_fu_2158_p5");
    sc_trace(mVcdFile, or_ln215_5_1_fu_2197_p5, "or_ln215_5_1_fu_2197_p5");
    sc_trace(mVcdFile, or_ln215_5_2_fu_2236_p5, "or_ln215_5_2_fu_2236_p5");
    sc_trace(mVcdFile, or_ln215_5_3_fu_2275_p5, "or_ln215_5_3_fu_2275_p5");
    sc_trace(mVcdFile, or_ln215_5_4_fu_2314_p5, "or_ln215_5_4_fu_2314_p5");
    sc_trace(mVcdFile, or_ln215_5_5_fu_2353_p5, "or_ln215_5_5_fu_2353_p5");
    sc_trace(mVcdFile, or_ln215_5_6_fu_2392_p5, "or_ln215_5_6_fu_2392_p5");
    sc_trace(mVcdFile, or_ln215_5_7_fu_2431_p5, "or_ln215_5_7_fu_2431_p5");
    sc_trace(mVcdFile, or_ln216_2_fu_2171_p5, "or_ln216_2_fu_2171_p5");
    sc_trace(mVcdFile, or_ln216_2_1_fu_2210_p5, "or_ln216_2_1_fu_2210_p5");
    sc_trace(mVcdFile, or_ln216_2_2_fu_2249_p5, "or_ln216_2_2_fu_2249_p5");
    sc_trace(mVcdFile, or_ln216_2_3_fu_2288_p5, "or_ln216_2_3_fu_2288_p5");
    sc_trace(mVcdFile, or_ln216_2_4_fu_2327_p5, "or_ln216_2_4_fu_2327_p5");
    sc_trace(mVcdFile, or_ln216_2_5_fu_2366_p5, "or_ln216_2_5_fu_2366_p5");
    sc_trace(mVcdFile, or_ln216_2_6_fu_2405_p5, "or_ln216_2_6_fu_2405_p5");
    sc_trace(mVcdFile, or_ln216_2_7_fu_2444_p5, "or_ln216_2_7_fu_2444_p5");
    sc_trace(mVcdFile, or_ln217_2_fu_2184_p5, "or_ln217_2_fu_2184_p5");
    sc_trace(mVcdFile, or_ln217_2_1_fu_2223_p5, "or_ln217_2_1_fu_2223_p5");
    sc_trace(mVcdFile, or_ln217_2_2_fu_2262_p5, "or_ln217_2_2_fu_2262_p5");
    sc_trace(mVcdFile, or_ln217_2_3_fu_2301_p5, "or_ln217_2_3_fu_2301_p5");
    sc_trace(mVcdFile, or_ln217_2_4_fu_2340_p5, "or_ln217_2_4_fu_2340_p5");
    sc_trace(mVcdFile, or_ln217_2_5_fu_2379_p5, "or_ln217_2_5_fu_2379_p5");
    sc_trace(mVcdFile, or_ln217_2_6_fu_2418_p5, "or_ln217_2_6_fu_2418_p5");
    sc_trace(mVcdFile, or_ln217_2_7_fu_2457_p5, "or_ln217_2_7_fu_2457_p5");
    sc_trace(mVcdFile, trunc_ln227_fu_2470_p1, "trunc_ln227_fu_2470_p1");
    sc_trace(mVcdFile, trunc_ln227_4_fu_2476_p1, "trunc_ln227_4_fu_2476_p1");
    sc_trace(mVcdFile, trunc_ln227_8_fu_2482_p1, "trunc_ln227_8_fu_2482_p1");
    sc_trace(mVcdFile, trunc_ln227_11_fu_2488_p1, "trunc_ln227_11_fu_2488_p1");
    sc_trace(mVcdFile, trunc_ln227_15_fu_2494_p1, "trunc_ln227_15_fu_2494_p1");
    sc_trace(mVcdFile, trunc_ln227_19_fu_2500_p1, "trunc_ln227_19_fu_2500_p1");
    sc_trace(mVcdFile, trunc_ln227_23_fu_2506_p1, "trunc_ln227_23_fu_2506_p1");
    sc_trace(mVcdFile, trunc_ln227_27_fu_2512_p1, "trunc_ln227_27_fu_2512_p1");
    sc_trace(mVcdFile, empty_14_fu_2035_p2, "empty_14_fu_2035_p2");
    sc_trace(mVcdFile, empty_fu_2029_p2, "empty_fu_2029_p2");
    sc_trace(mVcdFile, empty_16_fu_2047_p2, "empty_16_fu_2047_p2");
    sc_trace(mVcdFile, empty_15_fu_2041_p2, "empty_15_fu_2041_p2");
    sc_trace(mVcdFile, empty_18_fu_2059_p2, "empty_18_fu_2059_p2");
    sc_trace(mVcdFile, empty_17_fu_2053_p2, "empty_17_fu_2053_p2");
    sc_trace(mVcdFile, empty_20_fu_2071_p2, "empty_20_fu_2071_p2");
    sc_trace(mVcdFile, empty_19_fu_2065_p2, "empty_19_fu_2065_p2");
    sc_trace(mVcdFile, empty_22_fu_2083_p2, "empty_22_fu_2083_p2");
    sc_trace(mVcdFile, empty_21_fu_2077_p2, "empty_21_fu_2077_p2");
    sc_trace(mVcdFile, empty_24_fu_2095_p2, "empty_24_fu_2095_p2");
    sc_trace(mVcdFile, empty_23_fu_2089_p2, "empty_23_fu_2089_p2");
    sc_trace(mVcdFile, select_ln166_fu_2518_p3, "select_ln166_fu_2518_p3");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

picnic_keygen::~picnic_keygen() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete temp_U;
    delete temp2_U;
    delete temp3_U;
    delete grp_randombytes_fu_1933;
    delete grp_LowMCEnc_fu_1948;
}

void picnic_keygen::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
            ap_return_0_preg = select_ln166_fu_2518_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv4_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
            ap_return_1_preg = parameters.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv4_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
            ap_return_2_preg = parameters.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_LowMCEnc_fu_1948_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
            grp_LowMCEnc_fu_1948_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_LowMCEnc_fu_1948_ap_ready.read())) {
            grp_LowMCEnc_fu_1948_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_randombytes_fu_1933_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
              esl_seteq<1,1,1>(empty_25_fu_2101_p2.read(), ap_const_lv1_0)) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
            grp_randombytes_fu_1933_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_randombytes_fu_1933_ap_ready.read())) {
            grp_randombytes_fu_1933_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(empty_25_fu_2101_p2.read(), ap_const_lv1_1))) {
        p_0_reg_1921 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
                esl_seteq<1,1,1>(empty_25_reg_2548.read(), ap_const_lv1_0))) {
        p_0_reg_1921 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln211_fu_2118_p2.read()))) {
        phi_ln211_1_reg_1899 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln211_1_fu_2135_p2.read()))) {
        phi_ln211_1_reg_1899 = add_ln211_1_fu_2124_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln211_1_fu_2135_p2.read()))) {
        phi_ln211_2_reg_1910 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(icmp_ln211_2_fu_2152_p2.read(), ap_const_lv1_0))) {
        phi_ln211_2_reg_1910 = add_ln211_2_fu_2141_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln211_fu_2118_p2.read(), ap_const_lv1_0))) {
        phi_ln211_reg_1888 = add_ln211_fu_2107_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(grp_randombytes_fu_1933_ap_done.read(), ap_const_logic_1))) {
        phi_ln211_reg_1888 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        empty_25_reg_2548 = empty_25_fu_2101_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        reg_1993 = pk_ciphertext_q0.read();
        reg_1997 = pk_ciphertext_q1.read();
        reg_2001 = pk_plaintext_q0.read();
        reg_2005 = pk_plaintext_q1.read();
        reg_2009 = sk_data_q0.read();
        reg_2013 = sk_data_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        reg_2017 = temp_q0.read().range(23, 16);
        reg_2023 = temp_q0.read().range(31, 24);
    }
}

void picnic_keygen::thread_DRBG_ctx_Key_address0() {
    DRBG_ctx_Key_address0 = grp_randombytes_fu_1933_DRBG_ctx_Key_address0.read();
}

void picnic_keygen::thread_DRBG_ctx_Key_address1() {
    DRBG_ctx_Key_address1 = grp_randombytes_fu_1933_DRBG_ctx_Key_address1.read();
}

void picnic_keygen::thread_DRBG_ctx_Key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        DRBG_ctx_Key_ce0 = grp_randombytes_fu_1933_DRBG_ctx_Key_ce0.read();
    } else {
        DRBG_ctx_Key_ce0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_DRBG_ctx_Key_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        DRBG_ctx_Key_ce1 = grp_randombytes_fu_1933_DRBG_ctx_Key_ce1.read();
    } else {
        DRBG_ctx_Key_ce1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_DRBG_ctx_Key_d0() {
    DRBG_ctx_Key_d0 = grp_randombytes_fu_1933_DRBG_ctx_Key_d0.read();
}

void picnic_keygen::thread_DRBG_ctx_Key_d1() {
    DRBG_ctx_Key_d1 = grp_randombytes_fu_1933_DRBG_ctx_Key_d1.read();
}

void picnic_keygen::thread_DRBG_ctx_Key_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        DRBG_ctx_Key_we0 = grp_randombytes_fu_1933_DRBG_ctx_Key_we0.read();
    } else {
        DRBG_ctx_Key_we0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_DRBG_ctx_Key_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        DRBG_ctx_Key_we1 = grp_randombytes_fu_1933_DRBG_ctx_Key_we1.read();
    } else {
        DRBG_ctx_Key_we1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_DRBG_ctx_V_address0() {
    DRBG_ctx_V_address0 = grp_randombytes_fu_1933_DRBG_ctx_V_address0.read();
}

void picnic_keygen::thread_DRBG_ctx_V_address1() {
    DRBG_ctx_V_address1 = grp_randombytes_fu_1933_DRBG_ctx_V_address1.read();
}

void picnic_keygen::thread_DRBG_ctx_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        DRBG_ctx_V_ce0 = grp_randombytes_fu_1933_DRBG_ctx_V_ce0.read();
    } else {
        DRBG_ctx_V_ce0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_DRBG_ctx_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        DRBG_ctx_V_ce1 = grp_randombytes_fu_1933_DRBG_ctx_V_ce1.read();
    } else {
        DRBG_ctx_V_ce1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_DRBG_ctx_V_d0() {
    DRBG_ctx_V_d0 = grp_randombytes_fu_1933_DRBG_ctx_V_d0.read();
}

void picnic_keygen::thread_DRBG_ctx_V_d1() {
    DRBG_ctx_V_d1 = grp_randombytes_fu_1933_DRBG_ctx_V_d1.read();
}

void picnic_keygen::thread_DRBG_ctx_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        DRBG_ctx_V_we0 = grp_randombytes_fu_1933_DRBG_ctx_V_we0.read();
    } else {
        DRBG_ctx_V_we0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_DRBG_ctx_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        DRBG_ctx_V_we1 = grp_randombytes_fu_1933_DRBG_ctx_V_we1.read();
    } else {
        DRBG_ctx_V_we1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_DRBG_ctx_reseed_counter_o() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld.read())))) {
        DRBG_ctx_reseed_counter_o = grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o.read();
    } else {
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i.read();
    }
}

void picnic_keygen::thread_DRBG_ctx_reseed_counter_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        DRBG_ctx_reseed_counter_o_ap_vld = grp_randombytes_fu_1933_DRBG_ctx_reseed_counter_o_ap_vld.read();
    } else {
        DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_0;
    }
}

void picnic_keygen::thread_add_ln211_1_fu_2124_p2() {
    add_ln211_1_fu_2124_p2 = (!phi_ln211_1_reg_1899.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(phi_ln211_1_reg_1899.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void picnic_keygen::thread_add_ln211_2_fu_2141_p2() {
    add_ln211_2_fu_2141_p2 = (!phi_ln211_2_reg_1910.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(phi_ln211_2_reg_1910.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void picnic_keygen::thread_add_ln211_fu_2107_p2() {
    add_ln211_fu_2107_p2 = (!phi_ln211_reg_1888.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(phi_ln211_reg_1888.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void picnic_keygen::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void picnic_keygen::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void picnic_keygen::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void picnic_keygen::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void picnic_keygen::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void picnic_keygen::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void picnic_keygen::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void picnic_keygen::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void picnic_keygen::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void picnic_keygen::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void picnic_keygen::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void picnic_keygen::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void picnic_keygen::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void picnic_keygen::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void picnic_keygen::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void picnic_keygen::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void picnic_keygen::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void picnic_keygen::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void picnic_keygen::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void picnic_keygen::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void picnic_keygen::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void picnic_keygen::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void picnic_keygen::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void picnic_keygen::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void picnic_keygen::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void picnic_keygen::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void picnic_keygen::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void picnic_keygen::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void picnic_keygen::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void picnic_keygen::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void picnic_keygen::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void picnic_keygen::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void picnic_keygen::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void picnic_keygen::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void picnic_keygen::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void picnic_keygen::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void picnic_keygen::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void picnic_keygen::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void picnic_keygen::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void picnic_keygen::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void picnic_keygen::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void picnic_keygen::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void picnic_keygen::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void picnic_keygen::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void picnic_keygen::thread_ap_phi_mux_p_0_phi_fu_1925_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
         esl_seteq<1,1,1>(empty_25_reg_2548.read(), ap_const_lv1_0))) {
        ap_phi_mux_p_0_phi_fu_1925_p4 = ap_const_lv1_0;
    } else {
        ap_phi_mux_p_0_phi_fu_1925_p4 = p_0_reg_1921.read();
    }
}

void picnic_keygen::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void picnic_keygen::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        ap_return_0 = select_ln166_fu_2518_p3.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void picnic_keygen::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        ap_return_1 = parameters.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void picnic_keygen::thread_ap_return_2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        ap_return_2 = parameters.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void picnic_keygen::thread_empty_14_fu_2035_p2() {
    empty_14_fu_2035_p2 = (!parameters.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(parameters.read() == ap_const_lv4_E);
}

void picnic_keygen::thread_empty_15_fu_2041_p2() {
    empty_15_fu_2041_p2 = (empty_14_fu_2035_p2.read() | empty_fu_2029_p2.read());
}

void picnic_keygen::thread_empty_16_fu_2047_p2() {
    empty_16_fu_2047_p2 = (!parameters.read().is_01() || !ap_const_lv4_D.is_01())? sc_lv<1>(): sc_lv<1>(parameters.read() == ap_const_lv4_D);
}

void picnic_keygen::thread_empty_17_fu_2053_p2() {
    empty_17_fu_2053_p2 = (empty_16_fu_2047_p2.read() | empty_15_fu_2041_p2.read());
}

void picnic_keygen::thread_empty_18_fu_2059_p2() {
    empty_18_fu_2059_p2 = (!parameters.read().is_01() || !ap_const_lv4_C.is_01())? sc_lv<1>(): sc_lv<1>(parameters.read() == ap_const_lv4_C);
}

void picnic_keygen::thread_empty_19_fu_2065_p2() {
    empty_19_fu_2065_p2 = (empty_18_fu_2059_p2.read() | empty_17_fu_2053_p2.read());
}

void picnic_keygen::thread_empty_20_fu_2071_p2() {
    empty_20_fu_2071_p2 = (!parameters.read().is_01() || !ap_const_lv4_B.is_01())? sc_lv<1>(): sc_lv<1>(parameters.read() == ap_const_lv4_B);
}

void picnic_keygen::thread_empty_21_fu_2077_p2() {
    empty_21_fu_2077_p2 = (empty_20_fu_2071_p2.read() | empty_19_fu_2065_p2.read());
}

void picnic_keygen::thread_empty_22_fu_2083_p2() {
    empty_22_fu_2083_p2 = (!parameters.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(parameters.read() == ap_const_lv4_A);
}

void picnic_keygen::thread_empty_23_fu_2089_p2() {
    empty_23_fu_2089_p2 = (empty_22_fu_2083_p2.read() | empty_21_fu_2077_p2.read());
}

void picnic_keygen::thread_empty_24_fu_2095_p2() {
    empty_24_fu_2095_p2 = (!parameters.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(parameters.read() == ap_const_lv4_0);
}

void picnic_keygen::thread_empty_25_fu_2101_p2() {
    empty_25_fu_2101_p2 = (empty_24_fu_2095_p2.read() | empty_23_fu_2089_p2.read());
}

void picnic_keygen::thread_empty_fu_2029_p2() {
    empty_fu_2029_p2 = (!parameters.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<1>(): sc_lv<1>(parameters.read() == ap_const_lv4_F);
}

void picnic_keygen::thread_grp_LowMCEnc_fu_1948_ap_start() {
    grp_LowMCEnc_fu_1948_ap_start = grp_LowMCEnc_fu_1948_ap_start_reg.read();
}

void picnic_keygen::thread_grp_randombytes_fu_1933_ap_start() {
    grp_randombytes_fu_1933_ap_start = grp_randombytes_fu_1933_ap_start_reg.read();
}

void picnic_keygen::thread_icmp_ln211_1_fu_2135_p2() {
    icmp_ln211_1_fu_2135_p2 = (!phi_ln211_1_reg_1899.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln211_1_reg_1899.read() == ap_const_lv3_7);
}

void picnic_keygen::thread_icmp_ln211_2_fu_2152_p2() {
    icmp_ln211_2_fu_2152_p2 = (!phi_ln211_2_reg_1910.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln211_2_reg_1910.read() == ap_const_lv3_7);
}

void picnic_keygen::thread_icmp_ln211_fu_2118_p2() {
    icmp_ln211_fu_2118_p2 = (!phi_ln211_reg_1888.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln211_reg_1888.read() == ap_const_lv3_7);
}

void picnic_keygen::thread_or_ln215_5_1_fu_2197_p5() {
    or_ln215_5_1_fu_2197_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_ciphertext_q1.read(), pk_ciphertext_q0.read()), reg_1997.read()), reg_1993.read());
}

void picnic_keygen::thread_or_ln215_5_2_fu_2236_p5() {
    or_ln215_5_2_fu_2236_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_ciphertext_q1.read(), pk_ciphertext_q0.read()), reg_1997.read()), reg_1993.read());
}

void picnic_keygen::thread_or_ln215_5_3_fu_2275_p5() {
    or_ln215_5_3_fu_2275_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_ciphertext_q1.read(), pk_ciphertext_q0.read()), reg_1997.read()), reg_1993.read());
}

void picnic_keygen::thread_or_ln215_5_4_fu_2314_p5() {
    or_ln215_5_4_fu_2314_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_ciphertext_q1.read(), pk_ciphertext_q0.read()), reg_1997.read()), reg_1993.read());
}

void picnic_keygen::thread_or_ln215_5_5_fu_2353_p5() {
    or_ln215_5_5_fu_2353_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_ciphertext_q1.read(), pk_ciphertext_q0.read()), reg_1997.read()), reg_1993.read());
}

void picnic_keygen::thread_or_ln215_5_6_fu_2392_p5() {
    or_ln215_5_6_fu_2392_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_ciphertext_q1.read(), pk_ciphertext_q0.read()), reg_1997.read()), reg_1993.read());
}

void picnic_keygen::thread_or_ln215_5_7_fu_2431_p5() {
    or_ln215_5_7_fu_2431_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_ciphertext_q1.read(), pk_ciphertext_q0.read()), reg_1997.read()), reg_1993.read());
}

void picnic_keygen::thread_or_ln215_5_fu_2158_p5() {
    or_ln215_5_fu_2158_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_ciphertext_q1.read(), pk_ciphertext_q0.read()), reg_1997.read()), reg_1993.read());
}

void picnic_keygen::thread_or_ln216_2_1_fu_2210_p5() {
    or_ln216_2_1_fu_2210_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_plaintext_q1.read(), pk_plaintext_q0.read()), reg_2005.read()), reg_2001.read());
}

void picnic_keygen::thread_or_ln216_2_2_fu_2249_p5() {
    or_ln216_2_2_fu_2249_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_plaintext_q1.read(), pk_plaintext_q0.read()), reg_2005.read()), reg_2001.read());
}

void picnic_keygen::thread_or_ln216_2_3_fu_2288_p5() {
    or_ln216_2_3_fu_2288_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_plaintext_q1.read(), pk_plaintext_q0.read()), reg_2005.read()), reg_2001.read());
}

void picnic_keygen::thread_or_ln216_2_4_fu_2327_p5() {
    or_ln216_2_4_fu_2327_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_plaintext_q1.read(), pk_plaintext_q0.read()), reg_2005.read()), reg_2001.read());
}

void picnic_keygen::thread_or_ln216_2_5_fu_2366_p5() {
    or_ln216_2_5_fu_2366_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_plaintext_q1.read(), pk_plaintext_q0.read()), reg_2005.read()), reg_2001.read());
}

void picnic_keygen::thread_or_ln216_2_6_fu_2405_p5() {
    or_ln216_2_6_fu_2405_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_plaintext_q1.read(), pk_plaintext_q0.read()), reg_2005.read()), reg_2001.read());
}

void picnic_keygen::thread_or_ln216_2_7_fu_2444_p5() {
    or_ln216_2_7_fu_2444_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_plaintext_q1.read(), pk_plaintext_q0.read()), reg_2005.read()), reg_2001.read());
}

void picnic_keygen::thread_or_ln216_2_fu_2171_p5() {
    or_ln216_2_fu_2171_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(pk_plaintext_q1.read(), pk_plaintext_q0.read()), reg_2005.read()), reg_2001.read());
}

void picnic_keygen::thread_or_ln217_2_1_fu_2223_p5() {
    or_ln217_2_1_fu_2223_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(sk_data_q1.read(), sk_data_q0.read()), reg_2013.read()), reg_2009.read());
}

void picnic_keygen::thread_or_ln217_2_2_fu_2262_p5() {
    or_ln217_2_2_fu_2262_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(sk_data_q1.read(), sk_data_q0.read()), reg_2013.read()), reg_2009.read());
}

void picnic_keygen::thread_or_ln217_2_3_fu_2301_p5() {
    or_ln217_2_3_fu_2301_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(sk_data_q1.read(), sk_data_q0.read()), reg_2013.read()), reg_2009.read());
}

void picnic_keygen::thread_or_ln217_2_4_fu_2340_p5() {
    or_ln217_2_4_fu_2340_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(sk_data_q1.read(), sk_data_q0.read()), reg_2013.read()), reg_2009.read());
}

void picnic_keygen::thread_or_ln217_2_5_fu_2379_p5() {
    or_ln217_2_5_fu_2379_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(sk_data_q1.read(), sk_data_q0.read()), reg_2013.read()), reg_2009.read());
}

void picnic_keygen::thread_or_ln217_2_6_fu_2418_p5() {
    or_ln217_2_6_fu_2418_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(sk_data_q1.read(), sk_data_q0.read()), reg_2013.read()), reg_2009.read());
}

void picnic_keygen::thread_or_ln217_2_7_fu_2457_p5() {
    or_ln217_2_7_fu_2457_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(sk_data_q1.read(), sk_data_q0.read()), reg_2013.read()), reg_2009.read());
}

void picnic_keygen::thread_or_ln217_2_fu_2184_p5() {
    or_ln217_2_fu_2184_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(sk_data_q1.read(), sk_data_q0.read()), reg_2013.read()), reg_2009.read());
}

void picnic_keygen::thread_pk_ciphertext_addr_10_reg_2706() {
    pk_ciphertext_addr_10_reg_2706 =  (sc_lv<5>) (ap_const_lv64_8);
}

void picnic_keygen::thread_pk_ciphertext_addr_11_reg_2711() {
    pk_ciphertext_addr_11_reg_2711 =  (sc_lv<5>) (ap_const_lv64_9);
}

void picnic_keygen::thread_pk_ciphertext_addr_12_reg_2736() {
    pk_ciphertext_addr_12_reg_2736 =  (sc_lv<5>) (ap_const_lv64_A);
}

void picnic_keygen::thread_pk_ciphertext_addr_13_reg_2741() {
    pk_ciphertext_addr_13_reg_2741 =  (sc_lv<5>) (ap_const_lv64_B);
}

void picnic_keygen::thread_pk_ciphertext_addr_14_reg_2771() {
    pk_ciphertext_addr_14_reg_2771 =  (sc_lv<5>) (ap_const_lv64_C);
}

void picnic_keygen::thread_pk_ciphertext_addr_15_reg_2776() {
    pk_ciphertext_addr_15_reg_2776 =  (sc_lv<5>) (ap_const_lv64_D);
}

void picnic_keygen::thread_pk_ciphertext_addr_16_reg_2801() {
    pk_ciphertext_addr_16_reg_2801 =  (sc_lv<5>) (ap_const_lv64_E);
}

void picnic_keygen::thread_pk_ciphertext_addr_17_reg_2806() {
    pk_ciphertext_addr_17_reg_2806 =  (sc_lv<5>) (ap_const_lv64_F);
}

void picnic_keygen::thread_pk_ciphertext_addr_18_reg_2836() {
    pk_ciphertext_addr_18_reg_2836 =  (sc_lv<5>) (ap_const_lv64_10);
}

void picnic_keygen::thread_pk_ciphertext_addr_19_reg_2841() {
    pk_ciphertext_addr_19_reg_2841 =  (sc_lv<5>) (ap_const_lv64_11);
}

void picnic_keygen::thread_pk_ciphertext_addr_1_reg_2581() {
    pk_ciphertext_addr_1_reg_2581 =  (sc_lv<5>) (ap_const_lv64_1);
}

void picnic_keygen::thread_pk_ciphertext_addr_20_reg_2866() {
    pk_ciphertext_addr_20_reg_2866 =  (sc_lv<5>) (ap_const_lv64_12);
}

void picnic_keygen::thread_pk_ciphertext_addr_21_reg_2871() {
    pk_ciphertext_addr_21_reg_2871 =  (sc_lv<5>) (ap_const_lv64_13);
}

void picnic_keygen::thread_pk_ciphertext_addr_22_reg_2901() {
    pk_ciphertext_addr_22_reg_2901 =  (sc_lv<5>) (ap_const_lv64_14);
}

void picnic_keygen::thread_pk_ciphertext_addr_23_reg_2906() {
    pk_ciphertext_addr_23_reg_2906 =  (sc_lv<5>) (ap_const_lv64_15);
}

void picnic_keygen::thread_pk_ciphertext_addr_24_reg_2931() {
    pk_ciphertext_addr_24_reg_2931 =  (sc_lv<5>) (ap_const_lv64_16);
}

void picnic_keygen::thread_pk_ciphertext_addr_25_reg_2936() {
    pk_ciphertext_addr_25_reg_2936 =  (sc_lv<5>) (ap_const_lv64_17);
}

void picnic_keygen::thread_pk_ciphertext_addr_26_reg_2971() {
    pk_ciphertext_addr_26_reg_2971 =  (sc_lv<5>) (ap_const_lv64_19);
}

void picnic_keygen::thread_pk_ciphertext_addr_27_reg_2996() {
    pk_ciphertext_addr_27_reg_2996 =  (sc_lv<5>) (ap_const_lv64_1A);
}

void picnic_keygen::thread_pk_ciphertext_addr_28_reg_3001() {
    pk_ciphertext_addr_28_reg_3001 =  (sc_lv<5>) (ap_const_lv64_1B);
}

void picnic_keygen::thread_pk_ciphertext_addr_29_reg_3036() {
    pk_ciphertext_addr_29_reg_3036 =  (sc_lv<5>) (ap_const_lv64_1D);
}

void picnic_keygen::thread_pk_ciphertext_addr_2_reg_2606() {
    pk_ciphertext_addr_2_reg_2606 =  (sc_lv<5>) (ap_const_lv64_2);
}

void picnic_keygen::thread_pk_ciphertext_addr_30_reg_3061() {
    pk_ciphertext_addr_30_reg_3061 =  (sc_lv<5>) (ap_const_lv64_1E);
}

void picnic_keygen::thread_pk_ciphertext_addr_31_reg_3066() {
    pk_ciphertext_addr_31_reg_3066 =  (sc_lv<5>) (ap_const_lv64_1F);
}

void picnic_keygen::thread_pk_ciphertext_addr_3_reg_2611() {
    pk_ciphertext_addr_3_reg_2611 =  (sc_lv<5>) (ap_const_lv64_3);
}

void picnic_keygen::thread_pk_ciphertext_addr_4_reg_2641() {
    pk_ciphertext_addr_4_reg_2641 =  (sc_lv<5>) (ap_const_lv64_4);
}

void picnic_keygen::thread_pk_ciphertext_addr_5_reg_2646() {
    pk_ciphertext_addr_5_reg_2646 =  (sc_lv<5>) (ap_const_lv64_5);
}

void picnic_keygen::thread_pk_ciphertext_addr_6_reg_2966() {
    pk_ciphertext_addr_6_reg_2966 =  (sc_lv<5>) (ap_const_lv64_18);
}

void picnic_keygen::thread_pk_ciphertext_addr_7_reg_3031() {
    pk_ciphertext_addr_7_reg_3031 =  (sc_lv<5>) (ap_const_lv64_1C);
}

void picnic_keygen::thread_pk_ciphertext_addr_8_reg_2671() {
    pk_ciphertext_addr_8_reg_2671 =  (sc_lv<5>) (ap_const_lv64_6);
}

void picnic_keygen::thread_pk_ciphertext_addr_9_reg_2676() {
    pk_ciphertext_addr_9_reg_2676 =  (sc_lv<5>) (ap_const_lv64_7);
}

void picnic_keygen::thread_pk_ciphertext_addr_reg_2576() {
    pk_ciphertext_addr_reg_2576 =  (sc_lv<5>) (ap_const_lv64_0);
}

void picnic_keygen::thread_pk_ciphertext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_30_reg_3061.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_7_reg_3031.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_27_reg_2996.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_6_reg_2966.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_24_reg_2931.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_22_reg_2901.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_20_reg_2866.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_18_reg_2836.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_16_reg_2801.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_14_reg_2771.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_12_reg_2736.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_10_reg_2706.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_8_reg_2671.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_4_reg_2641.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_2_reg_2606.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        pk_ciphertext_address0 = pk_ciphertext_addr_reg_2576.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_1E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_1C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_1A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        pk_ciphertext_address0 = "XXXXX";
    }
}

void picnic_keygen::thread_pk_ciphertext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_31_reg_3066.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_29_reg_3036.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_28_reg_3001.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_26_reg_2971.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_25_reg_2936.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_23_reg_2906.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_21_reg_2871.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_19_reg_2841.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_17_reg_2806.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_15_reg_2776.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_13_reg_2741.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_11_reg_2711.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_9_reg_2676.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_5_reg_2646.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_3_reg_2611.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        pk_ciphertext_address1 = pk_ciphertext_addr_1_reg_2581.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_1D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_1B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_19);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_1);
    } else {
        pk_ciphertext_address1 = "XXXXX";
    }
}

void picnic_keygen::thread_pk_ciphertext_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        pk_ciphertext_ce0 = ap_const_logic_1;
    } else {
        pk_ciphertext_ce0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_pk_ciphertext_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        pk_ciphertext_ce1 = ap_const_logic_1;
    } else {
        pk_ciphertext_ce1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_pk_ciphertext_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        pk_ciphertext_d0 = trunc_ln227_27_fu_2512_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        pk_ciphertext_d0 = trunc_ln227_23_fu_2506_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        pk_ciphertext_d0 = trunc_ln227_19_fu_2500_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        pk_ciphertext_d0 = trunc_ln227_15_fu_2494_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        pk_ciphertext_d0 = trunc_ln227_11_fu_2488_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        pk_ciphertext_d0 = trunc_ln227_8_fu_2482_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        pk_ciphertext_d0 = trunc_ln227_4_fu_2476_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        pk_ciphertext_d0 = reg_2017.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        pk_ciphertext_d0 = trunc_ln227_fu_2470_p1.read();
    } else {
        pk_ciphertext_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void picnic_keygen::thread_pk_ciphertext_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        pk_ciphertext_d1 = reg_2023.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        pk_ciphertext_d1 = temp_q0.read().range(15, 8);
    } else {
        pk_ciphertext_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void picnic_keygen::thread_pk_ciphertext_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(empty_25_reg_2548.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        pk_ciphertext_we0 = ap_const_logic_1;
    } else {
        pk_ciphertext_we0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_pk_ciphertext_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(empty_25_reg_2548.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        pk_ciphertext_we1 = ap_const_logic_1;
    } else {
        pk_ciphertext_we1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_pk_plaintext_addr_10_reg_2746() {
    pk_plaintext_addr_10_reg_2746 =  (sc_lv<5>) (ap_const_lv64_A);
}

void picnic_keygen::thread_pk_plaintext_addr_11_reg_2751() {
    pk_plaintext_addr_11_reg_2751 =  (sc_lv<5>) (ap_const_lv64_B);
}

void picnic_keygen::thread_pk_plaintext_addr_12_reg_2781() {
    pk_plaintext_addr_12_reg_2781 =  (sc_lv<5>) (ap_const_lv64_C);
}

void picnic_keygen::thread_pk_plaintext_addr_13_reg_2786() {
    pk_plaintext_addr_13_reg_2786 =  (sc_lv<5>) (ap_const_lv64_D);
}

void picnic_keygen::thread_pk_plaintext_addr_14_reg_2811() {
    pk_plaintext_addr_14_reg_2811 =  (sc_lv<5>) (ap_const_lv64_E);
}

void picnic_keygen::thread_pk_plaintext_addr_15_reg_2816() {
    pk_plaintext_addr_15_reg_2816 =  (sc_lv<5>) (ap_const_lv64_F);
}

void picnic_keygen::thread_pk_plaintext_addr_16_reg_2846() {
    pk_plaintext_addr_16_reg_2846 =  (sc_lv<5>) (ap_const_lv64_10);
}

void picnic_keygen::thread_pk_plaintext_addr_17_reg_2851() {
    pk_plaintext_addr_17_reg_2851 =  (sc_lv<5>) (ap_const_lv64_11);
}

void picnic_keygen::thread_pk_plaintext_addr_18_reg_2876() {
    pk_plaintext_addr_18_reg_2876 =  (sc_lv<5>) (ap_const_lv64_12);
}

void picnic_keygen::thread_pk_plaintext_addr_19_reg_2881() {
    pk_plaintext_addr_19_reg_2881 =  (sc_lv<5>) (ap_const_lv64_13);
}

void picnic_keygen::thread_pk_plaintext_addr_1_reg_2591() {
    pk_plaintext_addr_1_reg_2591 =  (sc_lv<5>) (ap_const_lv64_1);
}

void picnic_keygen::thread_pk_plaintext_addr_20_reg_2911() {
    pk_plaintext_addr_20_reg_2911 =  (sc_lv<5>) (ap_const_lv64_14);
}

void picnic_keygen::thread_pk_plaintext_addr_21_reg_2916() {
    pk_plaintext_addr_21_reg_2916 =  (sc_lv<5>) (ap_const_lv64_15);
}

void picnic_keygen::thread_pk_plaintext_addr_22_reg_2941() {
    pk_plaintext_addr_22_reg_2941 =  (sc_lv<5>) (ap_const_lv64_16);
}

void picnic_keygen::thread_pk_plaintext_addr_23_reg_2946() {
    pk_plaintext_addr_23_reg_2946 =  (sc_lv<5>) (ap_const_lv64_17);
}

void picnic_keygen::thread_pk_plaintext_addr_24_reg_2976() {
    pk_plaintext_addr_24_reg_2976 =  (sc_lv<5>) (ap_const_lv64_18);
}

void picnic_keygen::thread_pk_plaintext_addr_25_reg_2981() {
    pk_plaintext_addr_25_reg_2981 =  (sc_lv<5>) (ap_const_lv64_19);
}

void picnic_keygen::thread_pk_plaintext_addr_26_reg_3006() {
    pk_plaintext_addr_26_reg_3006 =  (sc_lv<5>) (ap_const_lv64_1A);
}

void picnic_keygen::thread_pk_plaintext_addr_27_reg_3011() {
    pk_plaintext_addr_27_reg_3011 =  (sc_lv<5>) (ap_const_lv64_1B);
}

void picnic_keygen::thread_pk_plaintext_addr_28_reg_3041() {
    pk_plaintext_addr_28_reg_3041 =  (sc_lv<5>) (ap_const_lv64_1C);
}

void picnic_keygen::thread_pk_plaintext_addr_29_reg_3046() {
    pk_plaintext_addr_29_reg_3046 =  (sc_lv<5>) (ap_const_lv64_1D);
}

void picnic_keygen::thread_pk_plaintext_addr_2_reg_2616() {
    pk_plaintext_addr_2_reg_2616 =  (sc_lv<5>) (ap_const_lv64_2);
}

void picnic_keygen::thread_pk_plaintext_addr_30_reg_3071() {
    pk_plaintext_addr_30_reg_3071 =  (sc_lv<5>) (ap_const_lv64_1E);
}

void picnic_keygen::thread_pk_plaintext_addr_31_reg_3076() {
    pk_plaintext_addr_31_reg_3076 =  (sc_lv<5>) (ap_const_lv64_1F);
}

void picnic_keygen::thread_pk_plaintext_addr_3_reg_2621() {
    pk_plaintext_addr_3_reg_2621 =  (sc_lv<5>) (ap_const_lv64_3);
}

void picnic_keygen::thread_pk_plaintext_addr_4_reg_2651() {
    pk_plaintext_addr_4_reg_2651 =  (sc_lv<5>) (ap_const_lv64_4);
}

void picnic_keygen::thread_pk_plaintext_addr_5_reg_2656() {
    pk_plaintext_addr_5_reg_2656 =  (sc_lv<5>) (ap_const_lv64_5);
}

void picnic_keygen::thread_pk_plaintext_addr_6_reg_2681() {
    pk_plaintext_addr_6_reg_2681 =  (sc_lv<5>) (ap_const_lv64_6);
}

void picnic_keygen::thread_pk_plaintext_addr_7_reg_2686() {
    pk_plaintext_addr_7_reg_2686 =  (sc_lv<5>) (ap_const_lv64_7);
}

void picnic_keygen::thread_pk_plaintext_addr_8_reg_2716() {
    pk_plaintext_addr_8_reg_2716 =  (sc_lv<5>) (ap_const_lv64_8);
}

void picnic_keygen::thread_pk_plaintext_addr_9_reg_2721() {
    pk_plaintext_addr_9_reg_2721 =  (sc_lv<5>) (ap_const_lv64_9);
}

void picnic_keygen::thread_pk_plaintext_addr_reg_2586() {
    pk_plaintext_addr_reg_2586 =  (sc_lv<5>) (ap_const_lv64_0);
}

void picnic_keygen::thread_pk_plaintext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_30_reg_3071.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_28_reg_3041.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_26_reg_3006.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_24_reg_2976.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_22_reg_2941.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_20_reg_2911.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_18_reg_2876.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_16_reg_2846.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_14_reg_2811.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_12_reg_2781.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_10_reg_2746.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_8_reg_2716.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_6_reg_2681.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_4_reg_2651.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_2_reg_2616.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        pk_plaintext_address0 = pk_plaintext_addr_reg_2586.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_1E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_1C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_1A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pk_plaintext_address0 = grp_randombytes_fu_1933_x_address0.read();
    } else {
        pk_plaintext_address0 = "XXXXX";
    }
}

void picnic_keygen::thread_pk_plaintext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_31_reg_3076.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_29_reg_3046.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_27_reg_3011.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_25_reg_2981.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_23_reg_2946.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_21_reg_2916.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_19_reg_2881.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_17_reg_2851.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_15_reg_2816.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_13_reg_2786.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_11_reg_2751.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_9_reg_2721.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_7_reg_2686.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_5_reg_2656.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_3_reg_2621.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        pk_plaintext_address1 = pk_plaintext_addr_1_reg_2591.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_1D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_1B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_19);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pk_plaintext_address1 = grp_randombytes_fu_1933_x_address1.read();
    } else {
        pk_plaintext_address1 = "XXXXX";
    }
}

void picnic_keygen::thread_pk_plaintext_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(grp_LowMCEnc_fu_1948_ap_done.read(), ap_const_logic_1)))) {
        pk_plaintext_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pk_plaintext_ce0 = grp_randombytes_fu_1933_x_ce0.read();
    } else {
        pk_plaintext_ce0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_pk_plaintext_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(grp_LowMCEnc_fu_1948_ap_done.read(), ap_const_logic_1)))) {
        pk_plaintext_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pk_plaintext_ce1 = grp_randombytes_fu_1933_x_ce1.read();
    } else {
        pk_plaintext_ce1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_pk_plaintext_d0() {
    pk_plaintext_d0 = grp_randombytes_fu_1933_x_d0.read();
}

void picnic_keygen::thread_pk_plaintext_d1() {
    pk_plaintext_d1 = grp_randombytes_fu_1933_x_d1.read();
}

void picnic_keygen::thread_pk_plaintext_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pk_plaintext_we0 = grp_randombytes_fu_1933_x_we0.read();
    } else {
        pk_plaintext_we0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_pk_plaintext_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pk_plaintext_we1 = grp_randombytes_fu_1933_x_we1.read();
    } else {
        pk_plaintext_we1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_select_ln166_fu_2518_p3() {
    select_ln166_fu_2518_p3 = (!ap_phi_mux_p_0_phi_fu_1925_p4.read()[0].is_01())? sc_lv<32>(): ((ap_phi_mux_p_0_phi_fu_1925_p4.read()[0].to_bool())? ap_const_lv32_FFFFFFFF: ap_const_lv32_0);
}

void picnic_keygen::thread_sk_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_1E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_1C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_1A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sk_data_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sk_data_address0 = grp_randombytes_fu_1933_x_address0.read();
    } else {
        sk_data_address0 = "XXXXX";
    }
}

void picnic_keygen::thread_sk_data_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_1D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_1B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_19);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sk_data_address1 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sk_data_address1 = grp_randombytes_fu_1933_x_address1.read();
    } else {
        sk_data_address1 = "XXXXX";
    }
}

void picnic_keygen::thread_sk_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        sk_data_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sk_data_ce0 = grp_randombytes_fu_1933_x_ce0.read();
    } else {
        sk_data_ce0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_data_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        sk_data_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sk_data_ce1 = grp_randombytes_fu_1933_x_ce1.read();
    } else {
        sk_data_ce1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_data_d0() {
    sk_data_d0 = grp_randombytes_fu_1933_x_d0.read();
}

void picnic_keygen::thread_sk_data_d1() {
    sk_data_d1 = grp_randombytes_fu_1933_x_d1.read();
}

void picnic_keygen::thread_sk_data_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sk_data_we0 = grp_randombytes_fu_1933_x_we0.read();
    } else {
        sk_data_we0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_data_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sk_data_we1 = grp_randombytes_fu_1933_x_we1.read();
    } else {
        sk_data_we1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_pk_ciphertext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_1E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_1C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_1A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        sk_pk_ciphertext_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        sk_pk_ciphertext_address0 = "XXXXX";
    }
}

void picnic_keygen::thread_sk_pk_ciphertext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_1D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_1B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_19);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        sk_pk_ciphertext_address1 =  (sc_lv<5>) (ap_const_lv64_1);
    } else {
        sk_pk_ciphertext_address1 = "XXXXX";
    }
}

void picnic_keygen::thread_sk_pk_ciphertext_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        sk_pk_ciphertext_ce0 = ap_const_logic_1;
    } else {
        sk_pk_ciphertext_ce0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_pk_ciphertext_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        sk_pk_ciphertext_ce1 = ap_const_logic_1;
    } else {
        sk_pk_ciphertext_ce1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_pk_ciphertext_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        sk_pk_ciphertext_d0 = trunc_ln227_27_fu_2512_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        sk_pk_ciphertext_d0 = trunc_ln227_23_fu_2506_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        sk_pk_ciphertext_d0 = trunc_ln227_19_fu_2500_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        sk_pk_ciphertext_d0 = trunc_ln227_15_fu_2494_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        sk_pk_ciphertext_d0 = trunc_ln227_11_fu_2488_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        sk_pk_ciphertext_d0 = trunc_ln227_8_fu_2482_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        sk_pk_ciphertext_d0 = trunc_ln227_4_fu_2476_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        sk_pk_ciphertext_d0 = reg_2017.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        sk_pk_ciphertext_d0 = trunc_ln227_fu_2470_p1.read();
    } else {
        sk_pk_ciphertext_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void picnic_keygen::thread_sk_pk_ciphertext_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        sk_pk_ciphertext_d1 = reg_2023.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        sk_pk_ciphertext_d1 = temp_q0.read().range(15, 8);
    } else {
        sk_pk_ciphertext_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void picnic_keygen::thread_sk_pk_ciphertext_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(empty_25_reg_2548.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        sk_pk_ciphertext_we0 = ap_const_logic_1;
    } else {
        sk_pk_ciphertext_we0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_pk_ciphertext_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(empty_25_reg_2548.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        sk_pk_ciphertext_we1 = ap_const_logic_1;
    } else {
        sk_pk_ciphertext_we1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_pk_plaintext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_1E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_1C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_1A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        sk_pk_plaintext_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        sk_pk_plaintext_address0 = "XXXXX";
    }
}

void picnic_keygen::thread_sk_pk_plaintext_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_1D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_1B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_19);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        sk_pk_plaintext_address1 =  (sc_lv<5>) (ap_const_lv64_1);
    } else {
        sk_pk_plaintext_address1 = "XXXXX";
    }
}

void picnic_keygen::thread_sk_pk_plaintext_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(grp_LowMCEnc_fu_1948_ap_done.read(), ap_const_logic_1)))) {
        sk_pk_plaintext_ce0 = ap_const_logic_1;
    } else {
        sk_pk_plaintext_ce0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_pk_plaintext_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(grp_LowMCEnc_fu_1948_ap_done.read(), ap_const_logic_1)))) {
        sk_pk_plaintext_ce1 = ap_const_logic_1;
    } else {
        sk_pk_plaintext_ce1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_pk_plaintext_d0() {
    sk_pk_plaintext_d0 = pk_plaintext_q0.read();
}

void picnic_keygen::thread_sk_pk_plaintext_d1() {
    sk_pk_plaintext_d1 = pk_plaintext_q1.read();
}

void picnic_keygen::thread_sk_pk_plaintext_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(grp_LowMCEnc_fu_1948_ap_done.read(), ap_const_logic_1)))) {
        sk_pk_plaintext_we0 = ap_const_logic_1;
    } else {
        sk_pk_plaintext_we0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_sk_pk_plaintext_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(grp_LowMCEnc_fu_1948_ap_done.read(), ap_const_logic_1)))) {
        sk_pk_plaintext_we1 = ap_const_logic_1;
    } else {
        sk_pk_plaintext_we1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_temp2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        temp2_address0 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        temp2_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        temp2_address0 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        temp2_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        temp2_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        temp2_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp2_address0 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        temp2_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        temp2_address0 =  (sc_lv<3>) (zext_ln211_1_fu_2130_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp2_address0 = grp_LowMCEnc_fu_1948_plaintext_address0.read();
    } else {
        temp2_address0 =  (sc_lv<3>) ("XXX");
    }
}

void picnic_keygen::thread_temp2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        temp2_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp2_ce0 = grp_LowMCEnc_fu_1948_plaintext_ce0.read();
    } else {
        temp2_ce0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_temp2_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp2_ce1 = grp_LowMCEnc_fu_1948_plaintext_ce1.read();
    } else {
        temp2_ce1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_temp2_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        temp2_d0 = or_ln216_2_7_fu_2444_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        temp2_d0 = or_ln216_2_6_fu_2405_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        temp2_d0 = or_ln216_2_5_fu_2366_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        temp2_d0 = or_ln216_2_4_fu_2327_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        temp2_d0 = or_ln216_2_3_fu_2288_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        temp2_d0 = or_ln216_2_2_fu_2249_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp2_d0 = or_ln216_2_1_fu_2210_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        temp2_d0 = or_ln216_2_fu_2171_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        temp2_d0 = ap_const_lv32_0;
    } else {
        temp2_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void picnic_keygen::thread_temp2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        temp2_we0 = ap_const_logic_1;
    } else {
        temp2_we0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_temp3_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        temp3_address0 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        temp3_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        temp3_address0 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        temp3_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        temp3_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        temp3_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp3_address0 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        temp3_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        temp3_address0 =  (sc_lv<3>) (zext_ln211_2_fu_2147_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp3_address0 = grp_LowMCEnc_fu_1948_key_address0.read();
    } else {
        temp3_address0 =  (sc_lv<3>) ("XXX");
    }
}

void picnic_keygen::thread_temp3_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        temp3_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp3_ce0 = grp_LowMCEnc_fu_1948_key_ce0.read();
    } else {
        temp3_ce0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_temp3_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp3_ce1 = grp_LowMCEnc_fu_1948_key_ce1.read();
    } else {
        temp3_ce1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_temp3_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        temp3_d0 = or_ln217_2_7_fu_2457_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        temp3_d0 = or_ln217_2_6_fu_2418_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        temp3_d0 = or_ln217_2_5_fu_2379_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        temp3_d0 = or_ln217_2_4_fu_2340_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        temp3_d0 = or_ln217_2_3_fu_2301_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        temp3_d0 = or_ln217_2_2_fu_2262_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp3_d0 = or_ln217_2_1_fu_2223_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        temp3_d0 = or_ln217_2_fu_2184_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        temp3_d0 = ap_const_lv32_0;
    } else {
        temp3_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void picnic_keygen::thread_temp3_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        temp3_we0 = ap_const_logic_1;
    } else {
        temp3_we0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_temp_addr_1_reg_2636() {
    temp_addr_1_reg_2636 =  (sc_lv<3>) (ap_const_lv64_0);
}

void picnic_keygen::thread_temp_addr_2_reg_2701() {
    temp_addr_2_reg_2701 =  (sc_lv<3>) (ap_const_lv64_1);
}

void picnic_keygen::thread_temp_addr_3_reg_2766() {
    temp_addr_3_reg_2766 =  (sc_lv<3>) (ap_const_lv64_2);
}

void picnic_keygen::thread_temp_addr_4_reg_2831() {
    temp_addr_4_reg_2831 =  (sc_lv<3>) (ap_const_lv64_3);
}

void picnic_keygen::thread_temp_addr_5_reg_2896() {
    temp_addr_5_reg_2896 =  (sc_lv<3>) (ap_const_lv64_4);
}

void picnic_keygen::thread_temp_addr_6_reg_2961() {
    temp_addr_6_reg_2961 =  (sc_lv<3>) (ap_const_lv64_5);
}

void picnic_keygen::thread_temp_addr_7_reg_3026() {
    temp_addr_7_reg_3026 =  (sc_lv<3>) (ap_const_lv64_6);
}

void picnic_keygen::thread_temp_addr_8_reg_3091() {
    temp_addr_8_reg_3091 =  (sc_lv<3>) (ap_const_lv64_7);
}

void picnic_keygen::thread_temp_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        temp_address0 = temp_addr_8_reg_3091.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        temp_address0 = temp_addr_7_reg_3026.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        temp_address0 = temp_addr_6_reg_2961.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        temp_address0 = temp_addr_5_reg_2896.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        temp_address0 = temp_addr_4_reg_2831.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        temp_address0 = temp_addr_3_reg_2766.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        temp_address0 = temp_addr_2_reg_2701.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        temp_address0 = temp_addr_1_reg_2636.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        temp_address0 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        temp_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        temp_address0 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        temp_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        temp_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        temp_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp_address0 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        temp_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        temp_address0 =  (sc_lv<3>) (zext_ln211_fu_2113_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp_address0 = grp_LowMCEnc_fu_1948_output_r_address0.read();
    } else {
        temp_address0 =  (sc_lv<3>) ("XXX");
    }
}

void picnic_keygen::thread_temp_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        temp_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp_ce0 = grp_LowMCEnc_fu_1948_output_r_ce0.read();
    } else {
        temp_ce0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_temp_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp_ce1 = grp_LowMCEnc_fu_1948_output_r_ce1.read();
    } else {
        temp_ce1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_temp_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        temp_d0 = or_ln215_5_7_fu_2431_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        temp_d0 = or_ln215_5_6_fu_2392_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        temp_d0 = or_ln215_5_5_fu_2353_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        temp_d0 = or_ln215_5_4_fu_2314_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        temp_d0 = or_ln215_5_3_fu_2275_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        temp_d0 = or_ln215_5_2_fu_2236_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp_d0 = or_ln215_5_1_fu_2197_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        temp_d0 = or_ln215_5_fu_2158_p5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        temp_d0 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp_d0 = grp_LowMCEnc_fu_1948_output_r_d0.read();
    } else {
        temp_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void picnic_keygen::thread_temp_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        temp_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp_we0 = grp_LowMCEnc_fu_1948_output_r_we0.read();
    } else {
        temp_we0 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_temp_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        temp_we1 = grp_LowMCEnc_fu_1948_output_r_we1.read();
    } else {
        temp_we1 = ap_const_logic_0;
    }
}

void picnic_keygen::thread_trunc_ln227_11_fu_2488_p1() {
    trunc_ln227_11_fu_2488_p1 = temp_q0.read().range(8-1, 0);
}

void picnic_keygen::thread_trunc_ln227_15_fu_2494_p1() {
    trunc_ln227_15_fu_2494_p1 = temp_q0.read().range(8-1, 0);
}

void picnic_keygen::thread_trunc_ln227_19_fu_2500_p1() {
    trunc_ln227_19_fu_2500_p1 = temp_q0.read().range(8-1, 0);
}

void picnic_keygen::thread_trunc_ln227_23_fu_2506_p1() {
    trunc_ln227_23_fu_2506_p1 = temp_q0.read().range(8-1, 0);
}

void picnic_keygen::thread_trunc_ln227_27_fu_2512_p1() {
    trunc_ln227_27_fu_2512_p1 = temp_q0.read().range(8-1, 0);
}

void picnic_keygen::thread_trunc_ln227_4_fu_2476_p1() {
    trunc_ln227_4_fu_2476_p1 = temp_q0.read().range(8-1, 0);
}

void picnic_keygen::thread_trunc_ln227_8_fu_2482_p1() {
    trunc_ln227_8_fu_2482_p1 = temp_q0.read().range(8-1, 0);
}

void picnic_keygen::thread_trunc_ln227_fu_2470_p1() {
    trunc_ln227_fu_2470_p1 = temp_q0.read().range(8-1, 0);
}

void picnic_keygen::thread_zext_ln211_1_fu_2130_p1() {
    zext_ln211_1_fu_2130_p1 = esl_zext<64,3>(phi_ln211_1_reg_1899.read());
}

void picnic_keygen::thread_zext_ln211_2_fu_2147_p1() {
    zext_ln211_2_fu_2147_p1 = esl_zext<64,3>(phi_ln211_2_reg_1910.read());
}

void picnic_keygen::thread_zext_ln211_fu_2113_p1() {
    zext_ln211_fu_2113_p1 = esl_zext<64,3>(phi_ln211_reg_1888.read());
}

void picnic_keygen::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(empty_25_fu_2101_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state42;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(empty_25_fu_2101_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(grp_randombytes_fu_1933_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_randombytes_fu_1933_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln211_fu_2118_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln211_1_fu_2135_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(icmp_ln211_2_fu_2152_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(grp_LowMCEnc_fu_1948_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<42>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

