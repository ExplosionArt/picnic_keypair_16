// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LowMCEnc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        plaintext_address0,
        plaintext_ce0,
        plaintext_q0,
        plaintext_address1,
        plaintext_ce1,
        plaintext_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        output_r_address1,
        output_r_ce1,
        output_r_we1,
        output_r_d1,
        output_r_q1,
        key_address0,
        key_ce0,
        key_q0,
        key_address1,
        key_ce1,
        key_q1
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_pp0_stage0 = 24'd2;
parameter    ap_ST_fsm_state4 = 24'd4;
parameter    ap_ST_fsm_state5 = 24'd8;
parameter    ap_ST_fsm_state6 = 24'd16;
parameter    ap_ST_fsm_state7 = 24'd32;
parameter    ap_ST_fsm_state8 = 24'd64;
parameter    ap_ST_fsm_state9 = 24'd128;
parameter    ap_ST_fsm_state10 = 24'd256;
parameter    ap_ST_fsm_state11 = 24'd512;
parameter    ap_ST_fsm_state12 = 24'd1024;
parameter    ap_ST_fsm_state13 = 24'd2048;
parameter    ap_ST_fsm_state14 = 24'd4096;
parameter    ap_ST_fsm_state15 = 24'd8192;
parameter    ap_ST_fsm_state16 = 24'd16384;
parameter    ap_ST_fsm_state17 = 24'd32768;
parameter    ap_ST_fsm_state18 = 24'd65536;
parameter    ap_ST_fsm_state19 = 24'd131072;
parameter    ap_ST_fsm_state20 = 24'd262144;
parameter    ap_ST_fsm_state21 = 24'd524288;
parameter    ap_ST_fsm_state22 = 24'd1048576;
parameter    ap_ST_fsm_state23 = 24'd2097152;
parameter    ap_ST_fsm_state24 = 24'd4194304;
parameter    ap_ST_fsm_state25 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] plaintext_address0;
output   plaintext_ce0;
input  [31:0] plaintext_q0;
output  [2:0] plaintext_address1;
output   plaintext_ce1;
input  [31:0] plaintext_q1;
output  [2:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [2:0] output_r_address1;
output   output_r_ce1;
output   output_r_we1;
output  [31:0] output_r_d1;
input  [31:0] output_r_q1;
output  [2:0] key_address0;
output   key_ce0;
input  [31:0] key_q0;
output  [2:0] key_address1;
output   key_ce1;
input  [31:0] key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg plaintext_ce0;
reg plaintext_ce1;
reg[2:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;
reg[2:0] output_r_address1;
reg output_r_ce1;
reg output_r_we1;
reg[31:0] output_r_d1;
reg key_ce0;
reg key_ce1;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] temp_matrix3_address0;
reg    temp_matrix3_ce0;
wire   [31:0] temp_matrix3_q0;
wire   [6:0] temp_matrix3_address1;
reg    temp_matrix3_ce1;
wire   [31:0] temp_matrix3_q1;
reg   [2:0] loop_0_0_reg_360;
wire   [7:0] temp_q0;
reg   [7:0] reg_462;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire   [0:0] tmp_36_fu_466_p3;
reg   [0:0] tmp_36_reg_1016;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln174_fu_478_p1;
reg   [63:0] zext_ln174_reg_1020;
wire   [63:0] zext_ln174_1_fu_489_p1;
reg   [63:0] zext_ln174_1_reg_1030;
wire   [2:0] add_ln171_fu_494_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [2:0] output_addr_6_reg_1048;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln110_1_fu_500_p2;
reg   [2:0] output_addr_7_reg_1058;
wire   [2:0] add_ln110_1_fu_528_p2;
reg   [2:0] add_ln110_1_reg_1068;
wire   [13:0] shl_ln_fu_540_p3;
reg   [13:0] shl_ln_reg_1096;
wire    ap_CS_fsm_state9;
reg   [7:0] trunc_ln1_reg_1102;
reg   [7:0] trunc_ln2_reg_1107;
reg   [6:0] temp_addr_11_reg_1115;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln209_fu_585_p2;
wire   [2:0] trunc_ln209_fu_612_p1;
reg   [2:0] trunc_ln209_reg_1121;
reg   [6:0] temp_addr_12_reg_1128;
reg   [6:0] temp_addr_13_reg_1134;
wire   [4:0] add_ln209_fu_652_p2;
reg   [4:0] add_ln209_reg_1140;
wire   [0:0] a_fu_673_p1;
reg   [0:0] a_reg_1145;
wire    ap_CS_fsm_state13;
wire   [7:0] zext_ln55_3_fu_682_p1;
reg   [7:0] zext_ln55_3_reg_1152;
wire   [0:0] b_fu_692_p1;
reg   [0:0] b_reg_1158;
wire   [7:0] zext_ln55_5_fu_701_p1;
reg   [7:0] zext_ln55_5_reg_1164;
wire   [0:0] c_fu_711_p1;
reg   [0:0] c_reg_1170;
wire   [0:0] xor_ln223_fu_766_p2;
reg   [0:0] xor_ln223_reg_1176;
wire    ap_CS_fsm_state15;
wire   [7:0] temp_q1;
reg   [7:0] temp_load_1_reg_1181;
wire   [13:0] add_ln243_fu_868_p2;
reg   [13:0] add_ln243_reg_1186;
wire    ap_CS_fsm_state20;
wire   [6:0] add_ln244_fu_882_p2;
reg   [6:0] add_ln244_reg_1191;
wire    ap_CS_fsm_state21;
wire    grp_matrix_mul_fu_428_ap_ready;
wire    grp_matrix_mul_fu_428_ap_done;
reg   [2:0] output_addr_4_reg_1200;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln110_fu_888_p2;
reg   [2:0] output_addr_5_reg_1210;
wire   [2:0] add_ln110_fu_950_p2;
reg   [2:0] add_ln110_reg_1220;
reg   [2:0] output_addr_8_reg_1228;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln110_2_fu_970_p2;
reg   [2:0] output_addr_9_reg_1238;
wire   [2:0] add_ln110_2_fu_998_p2;
reg   [2:0] add_ln110_2_reg_1248;
wire   [4:0] r_fu_1004_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] roundKey_address0;
reg    roundKey_ce0;
reg    roundKey_we0;
wire   [31:0] roundKey_q0;
reg   [3:0] roundKey_address1;
reg    roundKey_ce1;
reg    roundKey_we1;
wire   [31:0] roundKey_q1;
reg   [6:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
reg   [7:0] temp_d0;
reg   [6:0] temp_address1;
reg    temp_ce1;
reg    temp_we1;
reg   [7:0] temp_d1;
wire    grp_matrix_mul_fu_428_ap_start;
wire    grp_matrix_mul_fu_428_ap_idle;
wire   [2:0] grp_matrix_mul_fu_428_output_r_address0;
wire    grp_matrix_mul_fu_428_output_r_ce0;
wire    grp_matrix_mul_fu_428_output_r_we0;
wire   [31:0] grp_matrix_mul_fu_428_output_r_d0;
wire   [2:0] grp_matrix_mul_fu_428_output_r_address1;
wire    grp_matrix_mul_fu_428_output_r_ce1;
wire    grp_matrix_mul_fu_428_output_r_we1;
wire   [31:0] grp_matrix_mul_fu_428_output_r_d1;
wire    grp_matrix_mul_1_fu_437_ap_start;
wire    grp_matrix_mul_1_fu_437_ap_done;
wire    grp_matrix_mul_1_fu_437_ap_idle;
wire    grp_matrix_mul_1_fu_437_ap_ready;
wire   [3:0] grp_matrix_mul_1_fu_437_output_r_address0;
wire    grp_matrix_mul_1_fu_437_output_r_ce0;
wire    grp_matrix_mul_1_fu_437_output_r_we0;
wire   [31:0] grp_matrix_mul_1_fu_437_output_r_d0;
wire   [3:0] grp_matrix_mul_1_fu_437_output_r_address1;
wire    grp_matrix_mul_1_fu_437_output_r_ce1;
wire    grp_matrix_mul_1_fu_437_output_r_we1;
wire   [31:0] grp_matrix_mul_1_fu_437_output_r_d1;
wire   [2:0] grp_matrix_mul_1_fu_437_state_address0;
wire    grp_matrix_mul_1_fu_437_state_ce0;
wire   [2:0] grp_matrix_mul_1_fu_437_state_address1;
wire    grp_matrix_mul_1_fu_437_state_ce1;
reg   [13:0] grp_matrix_mul_1_fu_437_matrix_offset;
reg   [2:0] i_0_0_i1_reg_371;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
reg   [4:0] r_0_reg_382;
reg   [4:0] bitNumber_assign_2_reg_394;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state17;
reg   [2:0] i_0_0_i_reg_406;
wire    ap_CS_fsm_state23;
reg   [2:0] i_0_0_i2_reg_417;
wire    ap_CS_fsm_state25;
reg    grp_matrix_mul_fu_428_ap_start_reg;
reg    grp_matrix_mul_1_fu_437_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln114_1_fu_506_p1;
wire   [63:0] zext_ln114_3_fu_522_p1;
wire   [63:0] zext_ln55_fu_607_p1;
wire   [63:0] zext_ln55_2_fu_632_p1;
wire   [63:0] zext_ln55_4_fu_647_p1;
wire   [63:0] zext_ln114_fu_894_p1;
wire   [63:0] zext_ln114_5_fu_908_p1;
wire   [63:0] zext_ln114_2_fu_923_p1;
wire   [63:0] zext_ln114_6_fu_945_p1;
wire   [63:0] zext_ln114_7_fu_976_p1;
wire   [63:0] zext_ln114_8_fu_992_p1;
wire   [31:0] grp_fu_448_p2;
wire   [31:0] grp_fu_455_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state19;
wire   [31:0] or_ln239_2_fu_856_p5;
wire   [31:0] xor_ln114_fu_956_p2;
wire   [31:0] xor_ln114_2_fu_963_p2;
wire   [7:0] trunc_ln194_fu_549_p1;
wire   [7:0] or_ln68_fu_755_p2;
wire    ap_CS_fsm_state14;
wire   [7:0] or_ln68_1_fu_802_p2;
wire    ap_CS_fsm_state16;
wire   [7:0] or_ln68_2_fu_849_p2;
wire   [1:0] trunc_ln171_fu_474_p1;
wire   [1:0] or_ln171_fu_483_p2;
wire   [1:0] trunc_ln110_fu_512_p1;
wire   [1:0] or_ln110_1_fu_516_p2;
wire   [4:0] add_ln218_fu_591_p2;
wire   [1:0] lshr_ln_fu_597_p4;
wire   [4:0] add_ln219_fu_616_p2;
wire   [1:0] lshr_ln55_2_fu_622_p4;
wire   [1:0] lshr_ln55_4_fu_637_p4;
wire   [2:0] sub_ln55_fu_658_p2;
wire   [7:0] zext_ln55_1_fu_663_p1;
wire   [7:0] lshr_ln55_fu_667_p2;
wire   [2:0] sub_ln55_1_fu_677_p2;
wire   [7:0] lshr_ln55_1_fu_686_p2;
wire   [2:0] xor_ln55_fu_696_p2;
wire   [7:0] lshr_ln55_3_fu_705_p2;
wire   [0:0] and_ln222_fu_715_p2;
wire   [0:0] xor_ln222_fu_721_p2;
wire   [7:0] shl_ln68_fu_731_p2;
wire   [7:0] zext_ln222_fu_727_p1;
wire   [7:0] xor_ln68_fu_737_p2;
wire   [7:0] and_ln68_fu_749_p2;
wire   [7:0] shl_ln68_3_fu_743_p2;
wire   [0:0] and_ln223_fu_762_p2;
wire   [0:0] xor_ln223_1_fu_770_p2;
wire   [7:0] shl_ln68_4_fu_780_p2;
wire   [7:0] zext_ln223_fu_776_p1;
wire   [7:0] xor_ln68_3_fu_785_p2;
wire   [7:0] and_ln68_1_fu_796_p2;
wire   [7:0] shl_ln68_5_fu_791_p2;
wire   [0:0] xor_ln224_fu_813_p2;
wire   [0:0] and_ln224_fu_809_p2;
wire   [0:0] xor_ln224_1_fu_817_p2;
wire   [7:0] shl_ln68_6_fu_827_p2;
wire   [7:0] zext_ln224_fu_823_p1;
wire   [7:0] xor_ln68_4_fu_832_p2;
wire   [7:0] and_ln68_2_fu_843_p2;
wire   [7:0] shl_ln68_7_fu_838_p2;
wire   [6:0] shl_ln1_fu_874_p3;
wire   [6:0] zext_ln114_4_fu_899_p1;
wire   [6:0] add_ln114_fu_903_p2;
wire   [1:0] trunc_ln110_1_fu_913_p1;
wire   [1:0] or_ln110_fu_917_p2;
wire   [4:0] tmp_3_fu_928_p4;
wire   [6:0] add_ln114_1_fu_937_p3;
wire   [1:0] trunc_ln110_2_fu_982_p1;
wire   [1:0] or_ln110_2_fu_986_p2;
wire   [0:0] icmp_ln188_fu_534_p2;
reg   [23:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_matrix_mul_fu_428_ap_start_reg = 1'b0;
#0 grp_matrix_mul_1_fu_437_ap_start_reg = 1'b0;
end

LowMCEnc_temp_matg8j #(
    .DataWidth( 32 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
temp_matrix3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_matrix3_address0),
    .ce0(temp_matrix3_ce0),
    .q0(temp_matrix3_q0),
    .address1(temp_matrix3_address1),
    .ce1(temp_matrix3_ce1),
    .q1(temp_matrix3_q1)
);

LowMCEnc_roundKey #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
roundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(roundKey_address0),
    .ce0(roundKey_ce0),
    .we0(roundKey_we0),
    .d0(grp_matrix_mul_1_fu_437_output_r_d0),
    .q0(roundKey_q0),
    .address1(roundKey_address1),
    .ce1(roundKey_ce1),
    .we1(roundKey_we1),
    .d1(grp_matrix_mul_1_fu_437_output_r_d1),
    .q1(roundKey_q1)
);

LowMCEnc_temp #(
    .DataWidth( 8 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0),
    .address1(temp_address1),
    .ce1(temp_ce1),
    .we1(temp_we1),
    .d1(temp_d1),
    .q1(temp_q1)
);

matrix_mul grp_matrix_mul_fu_428(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrix_mul_fu_428_ap_start),
    .ap_done(grp_matrix_mul_fu_428_ap_done),
    .ap_idle(grp_matrix_mul_fu_428_ap_idle),
    .ap_ready(grp_matrix_mul_fu_428_ap_ready),
    .output_r_address0(grp_matrix_mul_fu_428_output_r_address0),
    .output_r_ce0(grp_matrix_mul_fu_428_output_r_ce0),
    .output_r_we0(grp_matrix_mul_fu_428_output_r_we0),
    .output_r_d0(grp_matrix_mul_fu_428_output_r_d0),
    .output_r_q0(output_r_q0),
    .output_r_address1(grp_matrix_mul_fu_428_output_r_address1),
    .output_r_ce1(grp_matrix_mul_fu_428_output_r_ce1),
    .output_r_we1(grp_matrix_mul_fu_428_output_r_we1),
    .output_r_d1(grp_matrix_mul_fu_428_output_r_d1),
    .output_r_q1(output_r_q1),
    .matrix_offset(add_ln243_reg_1186)
);

matrix_mul_1 grp_matrix_mul_1_fu_437(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrix_mul_1_fu_437_ap_start),
    .ap_done(grp_matrix_mul_1_fu_437_ap_done),
    .ap_idle(grp_matrix_mul_1_fu_437_ap_idle),
    .ap_ready(grp_matrix_mul_1_fu_437_ap_ready),
    .output_r_address0(grp_matrix_mul_1_fu_437_output_r_address0),
    .output_r_ce0(grp_matrix_mul_1_fu_437_output_r_ce0),
    .output_r_we0(grp_matrix_mul_1_fu_437_output_r_we0),
    .output_r_d0(grp_matrix_mul_1_fu_437_output_r_d0),
    .output_r_address1(grp_matrix_mul_1_fu_437_output_r_address1),
    .output_r_ce1(grp_matrix_mul_1_fu_437_output_r_ce1),
    .output_r_we1(grp_matrix_mul_1_fu_437_output_r_we1),
    .output_r_d1(grp_matrix_mul_1_fu_437_output_r_d1),
    .state_address0(grp_matrix_mul_1_fu_437_state_address0),
    .state_ce0(grp_matrix_mul_1_fu_437_state_ce0),
    .state_q0(key_q0),
    .state_address1(grp_matrix_mul_1_fu_437_state_address1),
    .state_ce1(grp_matrix_mul_1_fu_437_state_ce1),
    .state_q1(key_q1),
    .matrix_offset(grp_matrix_mul_1_fu_437_matrix_offset)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrix_mul_1_fu_437_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
            grp_matrix_mul_1_fu_437_ap_start_reg <= 1'b1;
        end else if ((grp_matrix_mul_1_fu_437_ap_ready == 1'b1)) begin
            grp_matrix_mul_1_fu_437_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrix_mul_fu_428_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            grp_matrix_mul_fu_428_ap_start_reg <= 1'b1;
        end else if ((grp_matrix_mul_fu_428_ap_ready == 1'b1)) begin
            grp_matrix_mul_fu_428_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        bitNumber_assign_2_reg_394 <= add_ln209_reg_1140;
    end else if (((grp_matrix_mul_1_fu_437_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        bitNumber_assign_2_reg_394 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_0_i1_reg_371 <= add_ln110_1_reg_1068;
    end else if (((grp_matrix_mul_1_fu_437_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_0_i1_reg_371 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln110_fu_888_p2 == 1'd1))) begin
        i_0_0_i2_reg_417 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i_0_0_i2_reg_417 <= add_ln110_2_reg_1248;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_0_0_i_reg_406 <= add_ln110_reg_1220;
    end else if (((grp_matrix_mul_fu_428_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        i_0_0_i_reg_406 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_36_fu_466_p3 == 1'd0))) begin
        loop_0_0_reg_360 <= add_ln171_fu_494_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        loop_0_0_reg_360 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln110_2_fu_970_p2 == 1'd1))) begin
        r_0_reg_382 <= r_fu_1004_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln110_1_fu_500_p2 == 1'd1))) begin
        r_0_reg_382 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        a_reg_1145 <= a_fu_673_p1;
        b_reg_1158 <= b_fu_692_p1;
        c_reg_1170 <= c_fu_711_p1;
        zext_ln55_3_reg_1152[2 : 0] <= zext_ln55_3_fu_682_p1[2 : 0];
        zext_ln55_5_reg_1164[2 : 0] <= zext_ln55_5_fu_701_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln110_1_fu_500_p2 == 1'd0))) begin
        add_ln110_1_reg_1068 <= add_ln110_1_fu_528_p2;
        output_addr_6_reg_1048 <= zext_ln114_1_fu_506_p1;
        output_addr_7_reg_1058[1] <= zext_ln114_3_fu_522_p1[1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln110_2_fu_970_p2 == 1'd0))) begin
        add_ln110_2_reg_1248 <= add_ln110_2_fu_998_p2;
        output_addr_8_reg_1228 <= zext_ln114_7_fu_976_p1;
        output_addr_9_reg_1238[1] <= zext_ln114_8_fu_992_p1[1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln110_fu_888_p2 == 1'd0))) begin
        add_ln110_reg_1220 <= add_ln110_fu_950_p2;
        output_addr_4_reg_1200 <= zext_ln114_fu_894_p1;
        output_addr_5_reg_1210[1] <= zext_ln114_2_fu_923_p1[1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln209_reg_1140 <= add_ln209_fu_652_p2;
        temp_addr_12_reg_1128[1 : 0] <= zext_ln55_2_fu_632_p1[1 : 0];
        temp_addr_13_reg_1134[1 : 0] <= zext_ln55_4_fu_647_p1[1 : 0];
        trunc_ln209_reg_1121 <= trunc_ln209_fu_612_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln243_reg_1186[13 : 9] <= add_ln243_fu_868_p2[13 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_matrix_mul_fu_428_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        add_ln244_reg_1191[6 : 2] <= add_ln244_fu_882_p2[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_462 <= temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        shl_ln_reg_1096[13 : 9] <= shl_ln_fu_540_p3[13 : 9];
        trunc_ln1_reg_1102 <= {{output_r_q0[23:16]}};
        trunc_ln2_reg_1107 <= {{output_r_q0[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln209_fu_585_p2 == 1'd1))) begin
        temp_addr_11_reg_1115[1 : 0] <= zext_ln55_fu_607_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_load_1_reg_1181 <= temp_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_36_reg_1016 <= loop_0_0_reg_360[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        xor_ln223_reg_1176 <= xor_ln223_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_36_fu_466_p3 == 1'd0))) begin
        zext_ln174_1_reg_1030[1] <= zext_ln174_1_fu_489_p1[1];
        zext_ln174_reg_1020[2 : 0] <= zext_ln174_fu_478_p1[2 : 0];
    end
end

always @ (*) begin
    if ((tmp_36_fu_466_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (icmp_ln188_fu_534_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln188_fu_534_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_matrix_mul_1_fu_437_matrix_offset = shl_ln_reg_1096;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_matrix_mul_1_fu_437_matrix_offset = 14'd0;
    end else begin
        grp_matrix_mul_1_fu_437_matrix_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        key_ce0 = grp_matrix_mul_1_fu_437_state_ce0;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        key_ce1 = grp_matrix_mul_1_fu_437_state_ce1;
    end else begin
        key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_address0 = output_addr_8_reg_1228;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_address0 = zext_ln114_7_fu_976_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_address0 = output_addr_4_reg_1200;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_address0 = zext_ln114_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = output_addr_6_reg_1048;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = zext_ln114_1_fu_506_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_address0 = zext_ln174_reg_1020;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_address0 = grp_matrix_mul_fu_428_output_r_address0;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_address1 = output_addr_9_reg_1238;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_address1 = zext_ln114_8_fu_992_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_address1 = output_addr_5_reg_1210;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_address1 = zext_ln114_2_fu_923_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_r_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address1 = output_addr_7_reg_1058;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address1 = zext_ln114_3_fu_522_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_address1 = zext_ln174_1_reg_1030;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_address1 = grp_matrix_mul_fu_428_output_r_address1;
    end else begin
        output_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_r_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_ce0 = grp_matrix_mul_fu_428_output_r_ce0;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_r_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_ce1 = grp_matrix_mul_fu_428_output_r_ce1;
    end else begin
        output_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_d0 = xor_ln114_fu_956_p2;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_d0 = grp_fu_448_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_d0 = plaintext_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_d0 = grp_matrix_mul_fu_428_output_r_d0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_d1 = xor_ln114_2_fu_963_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_r_d1 = or_ln239_2_fu_856_p5;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_d1 = grp_fu_455_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_d1 = plaintext_q1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_d1 = grp_matrix_mul_fu_428_output_r_d1;
    end else begin
        output_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_36_reg_1016 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_we0 = grp_matrix_mul_fu_428_output_r_we0;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_36_reg_1016 == 1'd0)))) begin
        output_r_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_we1 = grp_matrix_mul_fu_428_output_r_we1;
    end else begin
        output_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        plaintext_ce0 = 1'b1;
    end else begin
        plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        plaintext_ce1 = 1'b1;
    end else begin
        plaintext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        roundKey_address0 = zext_ln114_7_fu_976_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        roundKey_address0 = zext_ln114_1_fu_506_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        roundKey_address0 = grp_matrix_mul_1_fu_437_output_r_address0;
    end else begin
        roundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        roundKey_address1 = zext_ln114_8_fu_992_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        roundKey_address1 = zext_ln114_3_fu_522_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        roundKey_address1 = grp_matrix_mul_1_fu_437_output_r_address1;
    end else begin
        roundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state6))) begin
        roundKey_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        roundKey_ce0 = grp_matrix_mul_1_fu_437_output_r_ce0;
    end else begin
        roundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state6))) begin
        roundKey_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        roundKey_ce1 = grp_matrix_mul_1_fu_437_output_r_ce1;
    end else begin
        roundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        roundKey_we0 = grp_matrix_mul_1_fu_437_output_r_we0;
    end else begin
        roundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        roundKey_we1 = grp_matrix_mul_1_fu_437_output_r_we1;
    end else begin
        roundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        temp_address0 = temp_addr_13_reg_1134;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        temp_address0 = temp_addr_12_reg_1128;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_address0 = zext_ln55_4_fu_647_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln209_fu_585_p2 == 1'd1))) begin
        temp_address0 = zext_ln55_fu_607_p1;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        temp_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln209_fu_585_p2 == 1'd0)))) begin
        temp_address0 = 64'd0;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_address1 = temp_addr_13_reg_1134;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        temp_address1 = temp_addr_12_reg_1128;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        temp_address1 = temp_addr_11_reg_1115;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_address1 = zext_ln55_2_fu_632_p1;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        temp_address1 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        temp_address1 = 64'd1;
    end else begin
        temp_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9) | ((grp_matrix_mul_1_fu_437_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln209_fu_585_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln209_fu_585_p2 == 1'd1)))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | ((grp_matrix_mul_1_fu_437_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        temp_ce1 = 1'b1;
    end else begin
        temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_d0 = trunc_ln1_reg_1102;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_d0 = trunc_ln194_fu_549_p1;
    end else begin
        temp_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_d1 = or_ln68_2_fu_849_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        temp_d1 = or_ln68_1_fu_802_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        temp_d1 = or_ln68_fu_755_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_d1 = trunc_ln2_reg_1107;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp_d1 = {{output_r_q0[15:8]}};
    end else begin
        temp_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_matrix3_ce0 = 1'b1;
    end else begin
        temp_matrix3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        temp_matrix3_ce1 = 1'b1;
    end else begin
        temp_matrix3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((grp_matrix_mul_1_fu_437_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        temp_we0 = 1'b1;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | ((grp_matrix_mul_1_fu_437_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        temp_we1 = 1'b1;
    end else begin
        temp_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_36_fu_466_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_36_fu_466_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_matrix_mul_1_fu_437_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln110_1_fu_500_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln188_fu_534_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_matrix_mul_1_fu_437_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln209_fu_585_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_matrix_mul_fu_428_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln110_fu_888_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln110_2_fu_970_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_673_p1 = lshr_ln55_fu_667_p2[0:0];

assign add_ln110_1_fu_528_p2 = (3'd2 + i_0_0_i1_reg_371);

assign add_ln110_2_fu_998_p2 = (3'd2 + i_0_0_i2_reg_417);

assign add_ln110_fu_950_p2 = (3'd2 + i_0_0_i_reg_406);

assign add_ln114_1_fu_937_p3 = {{tmp_3_fu_928_p4}, {or_ln110_fu_917_p2}};

assign add_ln114_fu_903_p2 = (add_ln244_reg_1191 + zext_ln114_4_fu_899_p1);

assign add_ln171_fu_494_p2 = (3'd2 + loop_0_0_reg_360);

assign add_ln209_fu_652_p2 = (5'd3 + bitNumber_assign_2_reg_394);

assign add_ln218_fu_591_p2 = (5'd2 + bitNumber_assign_2_reg_394);

assign add_ln219_fu_616_p2 = (5'd1 + bitNumber_assign_2_reg_394);

assign add_ln243_fu_868_p2 = ($signed(shl_ln_reg_1096) + $signed(14'd15872));

assign add_ln244_fu_882_p2 = ($signed(shl_ln1_fu_874_p3) + $signed(7'd124));

assign and_ln222_fu_715_p2 = (c_fu_711_p1 & b_fu_692_p1);

assign and_ln223_fu_762_p2 = (c_reg_1170 & a_reg_1145);

assign and_ln224_fu_809_p2 = (b_reg_1158 & a_reg_1145);

assign and_ln68_1_fu_796_p2 = (xor_ln68_3_fu_785_p2 & temp_q0);

assign and_ln68_2_fu_843_p2 = (xor_ln68_4_fu_832_p2 & temp_q0);

assign and_ln68_fu_749_p2 = (xor_ln68_fu_737_p2 & reg_462);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_fu_692_p1 = lshr_ln55_1_fu_686_p2[0:0];

assign c_fu_711_p1 = lshr_ln55_3_fu_705_p2[0:0];

assign grp_fu_448_p2 = (roundKey_q0 ^ output_r_q0);

assign grp_fu_455_p2 = (roundKey_q1 ^ output_r_q1);

assign grp_matrix_mul_1_fu_437_ap_start = grp_matrix_mul_1_fu_437_ap_start_reg;

assign grp_matrix_mul_fu_428_ap_start = grp_matrix_mul_fu_428_ap_start_reg;

assign icmp_ln110_1_fu_500_p2 = ((i_0_0_i1_reg_371 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln110_2_fu_970_p2 = ((i_0_0_i2_reg_417 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_888_p2 = ((i_0_0_i_reg_406 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln188_fu_534_p2 = ((r_0_reg_382 == 5'd21) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_585_p2 = ((bitNumber_assign_2_reg_394 < 5'd30) ? 1'b1 : 1'b0);

assign key_address0 = grp_matrix_mul_1_fu_437_state_address0;

assign key_address1 = grp_matrix_mul_1_fu_437_state_address1;

assign lshr_ln55_1_fu_686_p2 = temp_q1 >> zext_ln55_3_fu_682_p1;

assign lshr_ln55_2_fu_622_p4 = {{add_ln219_fu_616_p2[4:3]}};

assign lshr_ln55_3_fu_705_p2 = temp_q0 >> zext_ln55_5_fu_701_p1;

assign lshr_ln55_4_fu_637_p4 = {{bitNumber_assign_2_reg_394[4:3]}};

assign lshr_ln55_fu_667_p2 = reg_462 >> zext_ln55_1_fu_663_p1;

assign lshr_ln_fu_597_p4 = {{add_ln218_fu_591_p2[4:3]}};

assign or_ln110_1_fu_516_p2 = (trunc_ln110_fu_512_p1 | 2'd1);

assign or_ln110_2_fu_986_p2 = (trunc_ln110_2_fu_982_p1 | 2'd1);

assign or_ln110_fu_917_p2 = (trunc_ln110_1_fu_913_p1 | 2'd1);

assign or_ln171_fu_483_p2 = (trunc_ln171_fu_474_p1 | 2'd1);

assign or_ln239_2_fu_856_p5 = {{{{temp_q1}, {temp_q0}}, {temp_load_1_reg_1181}}, {reg_462}};

assign or_ln68_1_fu_802_p2 = (shl_ln68_5_fu_791_p2 | and_ln68_1_fu_796_p2);

assign or_ln68_2_fu_849_p2 = (shl_ln68_7_fu_838_p2 | and_ln68_2_fu_843_p2);

assign or_ln68_fu_755_p2 = (shl_ln68_3_fu_743_p2 | and_ln68_fu_749_p2);

assign plaintext_address0 = zext_ln174_fu_478_p1;

assign plaintext_address1 = zext_ln174_1_fu_489_p1;

assign r_fu_1004_p2 = (r_0_reg_382 + 5'd1);

assign shl_ln1_fu_874_p3 = {{r_0_reg_382}, {2'd0}};

assign shl_ln68_3_fu_743_p2 = zext_ln222_fu_727_p1 << zext_ln55_1_fu_663_p1;

assign shl_ln68_4_fu_780_p2 = 8'd1 << zext_ln55_3_reg_1152;

assign shl_ln68_5_fu_791_p2 = zext_ln223_fu_776_p1 << zext_ln55_3_reg_1152;

assign shl_ln68_6_fu_827_p2 = 8'd1 << zext_ln55_5_reg_1164;

assign shl_ln68_7_fu_838_p2 = zext_ln224_fu_823_p1 << zext_ln55_5_reg_1164;

assign shl_ln68_fu_731_p2 = 8'd1 << zext_ln55_1_fu_663_p1;

assign shl_ln_fu_540_p3 = {{r_0_reg_382}, {9'd0}};

assign sub_ln55_1_fu_677_p2 = ($signed(3'd6) - $signed(trunc_ln209_reg_1121));

assign sub_ln55_fu_658_p2 = ($signed(3'd5) - $signed(trunc_ln209_reg_1121));

assign temp_matrix3_address0 = zext_ln114_5_fu_908_p1;

assign temp_matrix3_address1 = zext_ln114_6_fu_945_p1;

assign tmp_36_fu_466_p3 = loop_0_0_reg_360[32'd2];

assign tmp_3_fu_928_p4 = {{add_ln244_reg_1191[6:2]}};

assign trunc_ln110_1_fu_913_p1 = i_0_0_i_reg_406[1:0];

assign trunc_ln110_2_fu_982_p1 = i_0_0_i2_reg_417[1:0];

assign trunc_ln110_fu_512_p1 = i_0_0_i1_reg_371[1:0];

assign trunc_ln171_fu_474_p1 = loop_0_0_reg_360[1:0];

assign trunc_ln194_fu_549_p1 = output_r_q0[7:0];

assign trunc_ln209_fu_612_p1 = bitNumber_assign_2_reg_394[2:0];

assign xor_ln114_2_fu_963_p2 = (temp_matrix3_q1 ^ output_r_q1);

assign xor_ln114_fu_956_p2 = (temp_matrix3_q0 ^ output_r_q0);

assign xor_ln222_fu_721_p2 = (and_ln222_fu_715_p2 ^ a_fu_673_p1);

assign xor_ln223_1_fu_770_p2 = (xor_ln223_fu_766_p2 ^ and_ln223_fu_762_p2);

assign xor_ln223_fu_766_p2 = (b_reg_1158 ^ a_reg_1145);

assign xor_ln224_1_fu_817_p2 = (xor_ln224_fu_813_p2 ^ and_ln224_fu_809_p2);

assign xor_ln224_fu_813_p2 = (xor_ln223_reg_1176 ^ c_reg_1170);

assign xor_ln55_fu_696_p2 = (trunc_ln209_reg_1121 ^ 3'd7);

assign xor_ln68_3_fu_785_p2 = (shl_ln68_4_fu_780_p2 ^ 8'd255);

assign xor_ln68_4_fu_832_p2 = (shl_ln68_6_fu_827_p2 ^ 8'd255);

assign xor_ln68_fu_737_p2 = (shl_ln68_fu_731_p2 ^ 8'd255);

assign zext_ln114_1_fu_506_p1 = i_0_0_i1_reg_371;

assign zext_ln114_2_fu_923_p1 = or_ln110_fu_917_p2;

assign zext_ln114_3_fu_522_p1 = or_ln110_1_fu_516_p2;

assign zext_ln114_4_fu_899_p1 = i_0_0_i_reg_406;

assign zext_ln114_5_fu_908_p1 = add_ln114_fu_903_p2;

assign zext_ln114_6_fu_945_p1 = add_ln114_1_fu_937_p3;

assign zext_ln114_7_fu_976_p1 = i_0_0_i2_reg_417;

assign zext_ln114_8_fu_992_p1 = or_ln110_2_fu_986_p2;

assign zext_ln114_fu_894_p1 = i_0_0_i_reg_406;

assign zext_ln174_1_fu_489_p1 = or_ln171_fu_483_p2;

assign zext_ln174_fu_478_p1 = loop_0_0_reg_360;

assign zext_ln222_fu_727_p1 = xor_ln222_fu_721_p2;

assign zext_ln223_fu_776_p1 = xor_ln223_1_fu_770_p2;

assign zext_ln224_fu_823_p1 = xor_ln224_1_fu_817_p2;

assign zext_ln55_1_fu_663_p1 = sub_ln55_fu_658_p2;

assign zext_ln55_2_fu_632_p1 = lshr_ln55_2_fu_622_p4;

assign zext_ln55_3_fu_682_p1 = sub_ln55_1_fu_677_p2;

assign zext_ln55_4_fu_647_p1 = lshr_ln55_4_fu_637_p4;

assign zext_ln55_5_fu_701_p1 = xor_ln55_fu_696_p2;

assign zext_ln55_fu_607_p1 = lshr_ln_fu_597_p4;

always @ (posedge ap_clk) begin
    zext_ln174_reg_1020[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln174_1_reg_1030[0] <= 1'b1;
    zext_ln174_1_reg_1030[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    output_addr_7_reg_1058[0] <= 1'b1;
    output_addr_7_reg_1058[2] <= 1'b0;
    shl_ln_reg_1096[8:0] <= 9'b000000000;
    temp_addr_11_reg_1115[6:2] <= 5'b00000;
    temp_addr_12_reg_1128[6:2] <= 5'b00000;
    temp_addr_13_reg_1134[6:2] <= 5'b00000;
    zext_ln55_3_reg_1152[7:3] <= 5'b00000;
    zext_ln55_5_reg_1164[7:3] <= 5'b00000;
    add_ln243_reg_1186[8:0] <= 9'b000000000;
    add_ln244_reg_1191[1:0] <= 2'b00;
    output_addr_5_reg_1210[0] <= 1'b1;
    output_addr_5_reg_1210[2] <= 1'b0;
    output_addr_9_reg_1238[0] <= 1'b1;
    output_addr_9_reg_1238[2] <= 1'b0;
end

endmodule //LowMCEnc
