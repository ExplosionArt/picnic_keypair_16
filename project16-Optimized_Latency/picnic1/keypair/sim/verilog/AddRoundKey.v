// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        round,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_q1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] round;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
input  [7:0] RoundKey_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;
reg[7:0] RoundKey_address1;
reg RoundKey_ce1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] grp_fu_145_p2;
reg   [7:0] reg_157;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [7:0] grp_fu_151_p2;
reg   [7:0] reg_162;
wire   [2:0] i_fu_173_p2;
reg   [2:0] i_reg_296;
wire    ap_CS_fsm_state2;
wire   [4:0] tmp_s_fu_183_p3;
reg   [4:0] tmp_s_reg_301;
wire   [0:0] icmp_ln248_fu_167_p2;
reg   [3:0] state_addr_reg_307;
reg   [3:0] state_addr_1_reg_312;
wire   [7:0] add_ln_fu_214_p4;
reg   [7:0] add_ln_reg_317;
reg   [3:0] state_addr_2_reg_333;
reg   [3:0] state_addr_3_reg_338;
reg   [2:0] i_0_reg_134;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln253_fu_191_p1;
wire   [63:0] tmp_1_fu_202_p3;
wire   [63:0] zext_ln253_1_fu_224_p1;
wire   [63:0] zext_ln253_2_fu_235_p1;
wire   [63:0] tmp_2_fu_245_p3;
wire   [63:0] tmp_3_fu_259_p3;
wire   [63:0] zext_ln253_3_fu_273_p1;
wire   [63:0] zext_ln253_4_fu_283_p1;
wire   [4:0] or_ln253_3_fu_196_p2;
wire   [3:0] trunc_ln253_1_fu_211_p1;
wire   [1:0] trunc_ln253_fu_179_p1;
wire   [7:0] or_ln253_fu_229_p2;
wire   [4:0] or_ln253_4_fu_240_p2;
wire   [4:0] or_ln253_5_fu_254_p2;
wire   [7:0] or_ln253_1_fu_268_p2;
wire   [7:0] or_ln253_2_fu_278_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_134 <= i_reg_296;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_134 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln248_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln_reg_317[7 : 2] <= add_ln_fu_214_p4[7 : 2];
        state_addr_1_reg_312[3 : 2] <= tmp_1_fu_202_p3[3 : 2];
        state_addr_reg_307[3 : 2] <= zext_ln253_fu_191_p1[3 : 2];
        tmp_s_reg_301[4 : 2] <= tmp_s_fu_183_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_296 <= i_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_157 <= grp_fu_145_p2;
        reg_162 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_addr_2_reg_333[3 : 2] <= tmp_2_fu_245_p3[3 : 2];
        state_addr_3_reg_338[3 : 2] <= tmp_3_fu_259_p3[3 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address0 = zext_ln253_3_fu_273_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_address0 = zext_ln253_1_fu_224_p1;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address1 = zext_ln253_4_fu_283_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_address1 = zext_ln253_2_fu_235_p1;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        RoundKey_ce1 = 1'b1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln248_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln248_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = state_addr_2_reg_333;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = state_addr_reg_307;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = tmp_2_fu_245_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = zext_ln253_fu_191_p1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = state_addr_3_reg_338;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = state_addr_1_reg_312;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = tmp_3_fu_259_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = tmp_1_fu_202_p3;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln248_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln_fu_214_p4 = {{{trunc_ln253_1_fu_211_p1}, {trunc_ln253_fu_179_p1}}, {2'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_fu_145_p2 = (state_q0 ^ RoundKey_q0);

assign grp_fu_151_p2 = (state_q1 ^ RoundKey_q1);

assign i_fu_173_p2 = (i_0_reg_134 + 3'd1);

assign icmp_ln248_fu_167_p2 = ((i_0_reg_134 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln253_1_fu_268_p2 = (8'd2 | add_ln_reg_317);

assign or_ln253_2_fu_278_p2 = (8'd3 | add_ln_reg_317);

assign or_ln253_3_fu_196_p2 = (tmp_s_fu_183_p3 | 5'd1);

assign or_ln253_4_fu_240_p2 = (tmp_s_reg_301 | 5'd2);

assign or_ln253_5_fu_254_p2 = (tmp_s_reg_301 | 5'd3);

assign or_ln253_fu_229_p2 = (8'd1 | add_ln_fu_214_p4);

assign state_d0 = reg_157;

assign state_d1 = reg_162;

assign tmp_1_fu_202_p3 = {{59'd0}, {or_ln253_3_fu_196_p2}};

assign tmp_2_fu_245_p3 = {{59'd0}, {or_ln253_4_fu_240_p2}};

assign tmp_3_fu_259_p3 = {{59'd0}, {or_ln253_5_fu_254_p2}};

assign tmp_s_fu_183_p3 = {{i_0_reg_134}, {2'd0}};

assign trunc_ln253_1_fu_211_p1 = round[3:0];

assign trunc_ln253_fu_179_p1 = i_0_reg_134[1:0];

assign zext_ln253_1_fu_224_p1 = add_ln_fu_214_p4;

assign zext_ln253_2_fu_235_p1 = or_ln253_fu_229_p2;

assign zext_ln253_3_fu_273_p1 = or_ln253_1_fu_268_p2;

assign zext_ln253_4_fu_283_p1 = or_ln253_2_fu_278_p2;

assign zext_ln253_fu_191_p1 = tmp_s_fu_183_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_301[1:0] <= 2'b00;
    state_addr_reg_307[1:0] <= 2'b00;
    state_addr_1_reg_312[1:0] <= 2'b01;
    add_ln_reg_317[1:0] <= 2'b00;
    state_addr_2_reg_333[1:0] <= 2'b10;
    state_addr_3_reg_338[1:0] <= 2'b11;
end

endmodule //AddRoundKey
